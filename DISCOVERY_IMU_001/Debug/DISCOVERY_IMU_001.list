
DISCOVERY_IMU_001.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a244  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a8  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a47c  0800a47c  0002014c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a47c  0800a47c  0001a47c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a484  0800a484  0002014c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a484  0800a484  0001a484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a488  0800a488  0001a488  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000014c  20000000  0800a48c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002014c  2**0
                  CONTENTS
 10 .bss          00001ebc  2000014c  2000014c  0002014c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20002008  20002008  0002014c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002014c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002017c  2**0
                  CONTENTS, READONLY
 14 .debug_info   00018328  00000000  00000000  000201bf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003d3d  00000000  00000000  000384e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001448  00000000  00000000  0003c228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000f9f  00000000  00000000  0003d670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00024da1  00000000  00000000  0003e60f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0001c75a  00000000  00000000  000633b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000cd652  00000000  00000000  0007fb0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00005a3c  00000000  00000000  0014d15c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000006f  00000000  00000000  00152b98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000014c 	.word	0x2000014c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a3bc 	.word	0x0800a3bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000150 	.word	0x20000150
 80001cc:	0800a3bc 	.word	0x0800a3bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_uldivmod>:
 80005f8:	b953      	cbnz	r3, 8000610 <__aeabi_uldivmod+0x18>
 80005fa:	b94a      	cbnz	r2, 8000610 <__aeabi_uldivmod+0x18>
 80005fc:	2900      	cmp	r1, #0
 80005fe:	bf08      	it	eq
 8000600:	2800      	cmpeq	r0, #0
 8000602:	bf1c      	itt	ne
 8000604:	f04f 31ff 	movne.w	r1, #4294967295
 8000608:	f04f 30ff 	movne.w	r0, #4294967295
 800060c:	f000 b970 	b.w	80008f0 <__aeabi_idiv0>
 8000610:	f1ad 0c08 	sub.w	ip, sp, #8
 8000614:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000618:	f000 f806 	bl	8000628 <__udivmoddi4>
 800061c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000620:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000624:	b004      	add	sp, #16
 8000626:	4770      	bx	lr

08000628 <__udivmoddi4>:
 8000628:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800062c:	9e08      	ldr	r6, [sp, #32]
 800062e:	460d      	mov	r5, r1
 8000630:	4604      	mov	r4, r0
 8000632:	460f      	mov	r7, r1
 8000634:	2b00      	cmp	r3, #0
 8000636:	d14a      	bne.n	80006ce <__udivmoddi4+0xa6>
 8000638:	428a      	cmp	r2, r1
 800063a:	4694      	mov	ip, r2
 800063c:	d965      	bls.n	800070a <__udivmoddi4+0xe2>
 800063e:	fab2 f382 	clz	r3, r2
 8000642:	b143      	cbz	r3, 8000656 <__udivmoddi4+0x2e>
 8000644:	fa02 fc03 	lsl.w	ip, r2, r3
 8000648:	f1c3 0220 	rsb	r2, r3, #32
 800064c:	409f      	lsls	r7, r3
 800064e:	fa20 f202 	lsr.w	r2, r0, r2
 8000652:	4317      	orrs	r7, r2
 8000654:	409c      	lsls	r4, r3
 8000656:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800065a:	fa1f f58c 	uxth.w	r5, ip
 800065e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000662:	0c22      	lsrs	r2, r4, #16
 8000664:	fb0e 7711 	mls	r7, lr, r1, r7
 8000668:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800066c:	fb01 f005 	mul.w	r0, r1, r5
 8000670:	4290      	cmp	r0, r2
 8000672:	d90a      	bls.n	800068a <__udivmoddi4+0x62>
 8000674:	eb1c 0202 	adds.w	r2, ip, r2
 8000678:	f101 37ff 	add.w	r7, r1, #4294967295
 800067c:	f080 811c 	bcs.w	80008b8 <__udivmoddi4+0x290>
 8000680:	4290      	cmp	r0, r2
 8000682:	f240 8119 	bls.w	80008b8 <__udivmoddi4+0x290>
 8000686:	3902      	subs	r1, #2
 8000688:	4462      	add	r2, ip
 800068a:	1a12      	subs	r2, r2, r0
 800068c:	b2a4      	uxth	r4, r4
 800068e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000692:	fb0e 2210 	mls	r2, lr, r0, r2
 8000696:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800069a:	fb00 f505 	mul.w	r5, r0, r5
 800069e:	42a5      	cmp	r5, r4
 80006a0:	d90a      	bls.n	80006b8 <__udivmoddi4+0x90>
 80006a2:	eb1c 0404 	adds.w	r4, ip, r4
 80006a6:	f100 32ff 	add.w	r2, r0, #4294967295
 80006aa:	f080 8107 	bcs.w	80008bc <__udivmoddi4+0x294>
 80006ae:	42a5      	cmp	r5, r4
 80006b0:	f240 8104 	bls.w	80008bc <__udivmoddi4+0x294>
 80006b4:	4464      	add	r4, ip
 80006b6:	3802      	subs	r0, #2
 80006b8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80006bc:	1b64      	subs	r4, r4, r5
 80006be:	2100      	movs	r1, #0
 80006c0:	b11e      	cbz	r6, 80006ca <__udivmoddi4+0xa2>
 80006c2:	40dc      	lsrs	r4, r3
 80006c4:	2300      	movs	r3, #0
 80006c6:	e9c6 4300 	strd	r4, r3, [r6]
 80006ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006ce:	428b      	cmp	r3, r1
 80006d0:	d908      	bls.n	80006e4 <__udivmoddi4+0xbc>
 80006d2:	2e00      	cmp	r6, #0
 80006d4:	f000 80ed 	beq.w	80008b2 <__udivmoddi4+0x28a>
 80006d8:	2100      	movs	r1, #0
 80006da:	e9c6 0500 	strd	r0, r5, [r6]
 80006de:	4608      	mov	r0, r1
 80006e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006e4:	fab3 f183 	clz	r1, r3
 80006e8:	2900      	cmp	r1, #0
 80006ea:	d149      	bne.n	8000780 <__udivmoddi4+0x158>
 80006ec:	42ab      	cmp	r3, r5
 80006ee:	d302      	bcc.n	80006f6 <__udivmoddi4+0xce>
 80006f0:	4282      	cmp	r2, r0
 80006f2:	f200 80f8 	bhi.w	80008e6 <__udivmoddi4+0x2be>
 80006f6:	1a84      	subs	r4, r0, r2
 80006f8:	eb65 0203 	sbc.w	r2, r5, r3
 80006fc:	2001      	movs	r0, #1
 80006fe:	4617      	mov	r7, r2
 8000700:	2e00      	cmp	r6, #0
 8000702:	d0e2      	beq.n	80006ca <__udivmoddi4+0xa2>
 8000704:	e9c6 4700 	strd	r4, r7, [r6]
 8000708:	e7df      	b.n	80006ca <__udivmoddi4+0xa2>
 800070a:	b902      	cbnz	r2, 800070e <__udivmoddi4+0xe6>
 800070c:	deff      	udf	#255	; 0xff
 800070e:	fab2 f382 	clz	r3, r2
 8000712:	2b00      	cmp	r3, #0
 8000714:	f040 8090 	bne.w	8000838 <__udivmoddi4+0x210>
 8000718:	1a8a      	subs	r2, r1, r2
 800071a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800071e:	fa1f fe8c 	uxth.w	lr, ip
 8000722:	2101      	movs	r1, #1
 8000724:	fbb2 f5f7 	udiv	r5, r2, r7
 8000728:	fb07 2015 	mls	r0, r7, r5, r2
 800072c:	0c22      	lsrs	r2, r4, #16
 800072e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000732:	fb0e f005 	mul.w	r0, lr, r5
 8000736:	4290      	cmp	r0, r2
 8000738:	d908      	bls.n	800074c <__udivmoddi4+0x124>
 800073a:	eb1c 0202 	adds.w	r2, ip, r2
 800073e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000742:	d202      	bcs.n	800074a <__udivmoddi4+0x122>
 8000744:	4290      	cmp	r0, r2
 8000746:	f200 80cb 	bhi.w	80008e0 <__udivmoddi4+0x2b8>
 800074a:	4645      	mov	r5, r8
 800074c:	1a12      	subs	r2, r2, r0
 800074e:	b2a4      	uxth	r4, r4
 8000750:	fbb2 f0f7 	udiv	r0, r2, r7
 8000754:	fb07 2210 	mls	r2, r7, r0, r2
 8000758:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800075c:	fb0e fe00 	mul.w	lr, lr, r0
 8000760:	45a6      	cmp	lr, r4
 8000762:	d908      	bls.n	8000776 <__udivmoddi4+0x14e>
 8000764:	eb1c 0404 	adds.w	r4, ip, r4
 8000768:	f100 32ff 	add.w	r2, r0, #4294967295
 800076c:	d202      	bcs.n	8000774 <__udivmoddi4+0x14c>
 800076e:	45a6      	cmp	lr, r4
 8000770:	f200 80bb 	bhi.w	80008ea <__udivmoddi4+0x2c2>
 8000774:	4610      	mov	r0, r2
 8000776:	eba4 040e 	sub.w	r4, r4, lr
 800077a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800077e:	e79f      	b.n	80006c0 <__udivmoddi4+0x98>
 8000780:	f1c1 0720 	rsb	r7, r1, #32
 8000784:	408b      	lsls	r3, r1
 8000786:	fa22 fc07 	lsr.w	ip, r2, r7
 800078a:	ea4c 0c03 	orr.w	ip, ip, r3
 800078e:	fa05 f401 	lsl.w	r4, r5, r1
 8000792:	fa20 f307 	lsr.w	r3, r0, r7
 8000796:	40fd      	lsrs	r5, r7
 8000798:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800079c:	4323      	orrs	r3, r4
 800079e:	fbb5 f8f9 	udiv	r8, r5, r9
 80007a2:	fa1f fe8c 	uxth.w	lr, ip
 80007a6:	fb09 5518 	mls	r5, r9, r8, r5
 80007aa:	0c1c      	lsrs	r4, r3, #16
 80007ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80007b0:	fb08 f50e 	mul.w	r5, r8, lr
 80007b4:	42a5      	cmp	r5, r4
 80007b6:	fa02 f201 	lsl.w	r2, r2, r1
 80007ba:	fa00 f001 	lsl.w	r0, r0, r1
 80007be:	d90b      	bls.n	80007d8 <__udivmoddi4+0x1b0>
 80007c0:	eb1c 0404 	adds.w	r4, ip, r4
 80007c4:	f108 3aff 	add.w	sl, r8, #4294967295
 80007c8:	f080 8088 	bcs.w	80008dc <__udivmoddi4+0x2b4>
 80007cc:	42a5      	cmp	r5, r4
 80007ce:	f240 8085 	bls.w	80008dc <__udivmoddi4+0x2b4>
 80007d2:	f1a8 0802 	sub.w	r8, r8, #2
 80007d6:	4464      	add	r4, ip
 80007d8:	1b64      	subs	r4, r4, r5
 80007da:	b29d      	uxth	r5, r3
 80007dc:	fbb4 f3f9 	udiv	r3, r4, r9
 80007e0:	fb09 4413 	mls	r4, r9, r3, r4
 80007e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80007e8:	fb03 fe0e 	mul.w	lr, r3, lr
 80007ec:	45a6      	cmp	lr, r4
 80007ee:	d908      	bls.n	8000802 <__udivmoddi4+0x1da>
 80007f0:	eb1c 0404 	adds.w	r4, ip, r4
 80007f4:	f103 35ff 	add.w	r5, r3, #4294967295
 80007f8:	d26c      	bcs.n	80008d4 <__udivmoddi4+0x2ac>
 80007fa:	45a6      	cmp	lr, r4
 80007fc:	d96a      	bls.n	80008d4 <__udivmoddi4+0x2ac>
 80007fe:	3b02      	subs	r3, #2
 8000800:	4464      	add	r4, ip
 8000802:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000806:	fba3 9502 	umull	r9, r5, r3, r2
 800080a:	eba4 040e 	sub.w	r4, r4, lr
 800080e:	42ac      	cmp	r4, r5
 8000810:	46c8      	mov	r8, r9
 8000812:	46ae      	mov	lr, r5
 8000814:	d356      	bcc.n	80008c4 <__udivmoddi4+0x29c>
 8000816:	d053      	beq.n	80008c0 <__udivmoddi4+0x298>
 8000818:	b156      	cbz	r6, 8000830 <__udivmoddi4+0x208>
 800081a:	ebb0 0208 	subs.w	r2, r0, r8
 800081e:	eb64 040e 	sbc.w	r4, r4, lr
 8000822:	fa04 f707 	lsl.w	r7, r4, r7
 8000826:	40ca      	lsrs	r2, r1
 8000828:	40cc      	lsrs	r4, r1
 800082a:	4317      	orrs	r7, r2
 800082c:	e9c6 7400 	strd	r7, r4, [r6]
 8000830:	4618      	mov	r0, r3
 8000832:	2100      	movs	r1, #0
 8000834:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000838:	f1c3 0120 	rsb	r1, r3, #32
 800083c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000840:	fa20 f201 	lsr.w	r2, r0, r1
 8000844:	fa25 f101 	lsr.w	r1, r5, r1
 8000848:	409d      	lsls	r5, r3
 800084a:	432a      	orrs	r2, r5
 800084c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000850:	fa1f fe8c 	uxth.w	lr, ip
 8000854:	fbb1 f0f7 	udiv	r0, r1, r7
 8000858:	fb07 1510 	mls	r5, r7, r0, r1
 800085c:	0c11      	lsrs	r1, r2, #16
 800085e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000862:	fb00 f50e 	mul.w	r5, r0, lr
 8000866:	428d      	cmp	r5, r1
 8000868:	fa04 f403 	lsl.w	r4, r4, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x258>
 800086e:	eb1c 0101 	adds.w	r1, ip, r1
 8000872:	f100 38ff 	add.w	r8, r0, #4294967295
 8000876:	d22f      	bcs.n	80008d8 <__udivmoddi4+0x2b0>
 8000878:	428d      	cmp	r5, r1
 800087a:	d92d      	bls.n	80008d8 <__udivmoddi4+0x2b0>
 800087c:	3802      	subs	r0, #2
 800087e:	4461      	add	r1, ip
 8000880:	1b49      	subs	r1, r1, r5
 8000882:	b292      	uxth	r2, r2
 8000884:	fbb1 f5f7 	udiv	r5, r1, r7
 8000888:	fb07 1115 	mls	r1, r7, r5, r1
 800088c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000890:	fb05 f10e 	mul.w	r1, r5, lr
 8000894:	4291      	cmp	r1, r2
 8000896:	d908      	bls.n	80008aa <__udivmoddi4+0x282>
 8000898:	eb1c 0202 	adds.w	r2, ip, r2
 800089c:	f105 38ff 	add.w	r8, r5, #4294967295
 80008a0:	d216      	bcs.n	80008d0 <__udivmoddi4+0x2a8>
 80008a2:	4291      	cmp	r1, r2
 80008a4:	d914      	bls.n	80008d0 <__udivmoddi4+0x2a8>
 80008a6:	3d02      	subs	r5, #2
 80008a8:	4462      	add	r2, ip
 80008aa:	1a52      	subs	r2, r2, r1
 80008ac:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80008b0:	e738      	b.n	8000724 <__udivmoddi4+0xfc>
 80008b2:	4631      	mov	r1, r6
 80008b4:	4630      	mov	r0, r6
 80008b6:	e708      	b.n	80006ca <__udivmoddi4+0xa2>
 80008b8:	4639      	mov	r1, r7
 80008ba:	e6e6      	b.n	800068a <__udivmoddi4+0x62>
 80008bc:	4610      	mov	r0, r2
 80008be:	e6fb      	b.n	80006b8 <__udivmoddi4+0x90>
 80008c0:	4548      	cmp	r0, r9
 80008c2:	d2a9      	bcs.n	8000818 <__udivmoddi4+0x1f0>
 80008c4:	ebb9 0802 	subs.w	r8, r9, r2
 80008c8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80008cc:	3b01      	subs	r3, #1
 80008ce:	e7a3      	b.n	8000818 <__udivmoddi4+0x1f0>
 80008d0:	4645      	mov	r5, r8
 80008d2:	e7ea      	b.n	80008aa <__udivmoddi4+0x282>
 80008d4:	462b      	mov	r3, r5
 80008d6:	e794      	b.n	8000802 <__udivmoddi4+0x1da>
 80008d8:	4640      	mov	r0, r8
 80008da:	e7d1      	b.n	8000880 <__udivmoddi4+0x258>
 80008dc:	46d0      	mov	r8, sl
 80008de:	e77b      	b.n	80007d8 <__udivmoddi4+0x1b0>
 80008e0:	3d02      	subs	r5, #2
 80008e2:	4462      	add	r2, ip
 80008e4:	e732      	b.n	800074c <__udivmoddi4+0x124>
 80008e6:	4608      	mov	r0, r1
 80008e8:	e70a      	b.n	8000700 <__udivmoddi4+0xd8>
 80008ea:	4464      	add	r4, ip
 80008ec:	3802      	subs	r0, #2
 80008ee:	e742      	b.n	8000776 <__udivmoddi4+0x14e>

080008f0 <__aeabi_idiv0>:
 80008f0:	4770      	bx	lr
 80008f2:	bf00      	nop

080008f4 <lis302dl_write_reg>:
#define CONNECT_LIS302()    HAL_GPIO_WritePin(LIS302DL_CS_GPIO_PORT, LIS302DL_CS_PIN, GPIO_PIN_RESET)
#define DISCONNECT_LS302()  HAL_GPIO_WritePin(LIS302DL_CS_GPIO_PORT, LIS302DL_CS_PIN, GPIO_PIN_SET)


// Init fonctions
static void lis302dl_write_reg(SPI_HandleTypeDef *hspi, uint8_t reg, uint8_t value) {
 80008f4:	b580      	push	{r7, lr}
 80008f6:	b082      	sub	sp, #8
 80008f8:	af00      	add	r7, sp, #0
 80008fa:	6078      	str	r0, [r7, #4]
 80008fc:	460b      	mov	r3, r1
 80008fe:	70fb      	strb	r3, [r7, #3]
 8000900:	4613      	mov	r3, r2
 8000902:	70bb      	strb	r3, [r7, #2]
  CONNECT_LIS302() ;
 8000904:	2200      	movs	r2, #0
 8000906:	2108      	movs	r1, #8
 8000908:	480c      	ldr	r0, [pc, #48]	; (800093c <lis302dl_write_reg+0x48>)
 800090a:	f001 f899 	bl	8001a40 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(hspi, &reg, 1, HAL_MAX_DELAY);
 800090e:	1cf9      	adds	r1, r7, #3
 8000910:	f04f 33ff 	mov.w	r3, #4294967295
 8000914:	2201      	movs	r2, #1
 8000916:	6878      	ldr	r0, [r7, #4]
 8000918:	f003 ff6f 	bl	80047fa <HAL_SPI_Transmit>
  HAL_SPI_Transmit(hspi, &value, 1, HAL_MAX_DELAY);
 800091c:	1cb9      	adds	r1, r7, #2
 800091e:	f04f 33ff 	mov.w	r3, #4294967295
 8000922:	2201      	movs	r2, #1
 8000924:	6878      	ldr	r0, [r7, #4]
 8000926:	f003 ff68 	bl	80047fa <HAL_SPI_Transmit>
  DISCONNECT_LS302();
 800092a:	2201      	movs	r2, #1
 800092c:	2108      	movs	r1, #8
 800092e:	4803      	ldr	r0, [pc, #12]	; (800093c <lis302dl_write_reg+0x48>)
 8000930:	f001 f886 	bl	8001a40 <HAL_GPIO_WritePin>
}
 8000934:	bf00      	nop
 8000936:	3708      	adds	r7, #8
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	40021000 	.word	0x40021000

08000940 <lis302dl_init>:

void lis302dl_init(SPI_HandleTypeDef *hspi) {
 8000940:	b580      	push	{r7, lr}
 8000942:	b082      	sub	sp, #8
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
  lis302dl_write_reg(hspi, LIS302DL_CTRL_REG1, LIS302DL_CTRL_REG1_2G_CONF);
 8000948:	2247      	movs	r2, #71	; 0x47
 800094a:	2120      	movs	r1, #32
 800094c:	6878      	ldr	r0, [r7, #4]
 800094e:	f7ff ffd1 	bl	80008f4 <lis302dl_write_reg>
}
 8000952:	bf00      	nop
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <read_lis302>:


//Read sensor data fonctions
void read_lis302(SPI_HandleTypeDef *hspi, uint8_t *u8X, uint8_t *u8Y, uint8_t *u8Z) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b086      	sub	sp, #24
 8000960:	af00      	add	r7, sp, #0
 8000962:	60f8      	str	r0, [r7, #12]
 8000964:	60b9      	str	r1, [r7, #8]
 8000966:	607a      	str	r2, [r7, #4]
 8000968:	603b      	str	r3, [r7, #0]
  uint8_t raw_data;

  CONNECT_LIS302();
 800096a:	2200      	movs	r2, #0
 800096c:	2108      	movs	r1, #8
 800096e:	482f      	ldr	r0, [pc, #188]	; (8000a2c <read_lis302+0xd0>)
 8000970:	f001 f866 	bl	8001a40 <HAL_GPIO_WritePin>
  uint8_t out_x_address = LIS302DL_OUT_X + LIS302DL_READ;
 8000974:	23a9      	movs	r3, #169	; 0xa9
 8000976:	75bb      	strb	r3, [r7, #22]
  HAL_SPI_Transmit(hspi, &out_x_address, 1, HAL_MAX_DELAY);
 8000978:	f107 0116 	add.w	r1, r7, #22
 800097c:	f04f 33ff 	mov.w	r3, #4294967295
 8000980:	2201      	movs	r2, #1
 8000982:	68f8      	ldr	r0, [r7, #12]
 8000984:	f003 ff39 	bl	80047fa <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, &raw_data, 1, HAL_MAX_DELAY);
 8000988:	f107 0117 	add.w	r1, r7, #23
 800098c:	f04f 33ff 	mov.w	r3, #4294967295
 8000990:	2201      	movs	r2, #1
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f004 f86d 	bl	8004a72 <HAL_SPI_Receive>
  DISCONNECT_LS302();
 8000998:	2201      	movs	r2, #1
 800099a:	2108      	movs	r1, #8
 800099c:	4823      	ldr	r0, [pc, #140]	; (8000a2c <read_lis302+0xd0>)
 800099e:	f001 f84f 	bl	8001a40 <HAL_GPIO_WritePin>
  *u8X = raw_data;
 80009a2:	7dfa      	ldrb	r2, [r7, #23]
 80009a4:	68bb      	ldr	r3, [r7, #8]
 80009a6:	701a      	strb	r2, [r3, #0]

  CONNECT_LIS302();
 80009a8:	2200      	movs	r2, #0
 80009aa:	2108      	movs	r1, #8
 80009ac:	481f      	ldr	r0, [pc, #124]	; (8000a2c <read_lis302+0xd0>)
 80009ae:	f001 f847 	bl	8001a40 <HAL_GPIO_WritePin>
  uint8_t out_y_address = LIS302DL_OUT_Y + LIS302DL_READ;
 80009b2:	23ab      	movs	r3, #171	; 0xab
 80009b4:	757b      	strb	r3, [r7, #21]
  HAL_SPI_Transmit(hspi, &out_y_address, 1, HAL_MAX_DELAY);
 80009b6:	f107 0115 	add.w	r1, r7, #21
 80009ba:	f04f 33ff 	mov.w	r3, #4294967295
 80009be:	2201      	movs	r2, #1
 80009c0:	68f8      	ldr	r0, [r7, #12]
 80009c2:	f003 ff1a 	bl	80047fa <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, &raw_data, 1, HAL_MAX_DELAY);
 80009c6:	f107 0117 	add.w	r1, r7, #23
 80009ca:	f04f 33ff 	mov.w	r3, #4294967295
 80009ce:	2201      	movs	r2, #1
 80009d0:	68f8      	ldr	r0, [r7, #12]
 80009d2:	f004 f84e 	bl	8004a72 <HAL_SPI_Receive>
  DISCONNECT_LS302();
 80009d6:	2201      	movs	r2, #1
 80009d8:	2108      	movs	r1, #8
 80009da:	4814      	ldr	r0, [pc, #80]	; (8000a2c <read_lis302+0xd0>)
 80009dc:	f001 f830 	bl	8001a40 <HAL_GPIO_WritePin>
  *u8Y = raw_data;
 80009e0:	7dfa      	ldrb	r2, [r7, #23]
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	701a      	strb	r2, [r3, #0]

  CONNECT_LIS302();
 80009e6:	2200      	movs	r2, #0
 80009e8:	2108      	movs	r1, #8
 80009ea:	4810      	ldr	r0, [pc, #64]	; (8000a2c <read_lis302+0xd0>)
 80009ec:	f001 f828 	bl	8001a40 <HAL_GPIO_WritePin>
  uint8_t out_z_address = LIS302DL_OUT_Z + LIS302DL_READ;
 80009f0:	23ad      	movs	r3, #173	; 0xad
 80009f2:	753b      	strb	r3, [r7, #20]
  HAL_SPI_Transmit(hspi, &out_z_address, 1, HAL_MAX_DELAY);
 80009f4:	f107 0114 	add.w	r1, r7, #20
 80009f8:	f04f 33ff 	mov.w	r3, #4294967295
 80009fc:	2201      	movs	r2, #1
 80009fe:	68f8      	ldr	r0, [r7, #12]
 8000a00:	f003 fefb 	bl	80047fa <HAL_SPI_Transmit>
  HAL_SPI_Receive(hspi, &raw_data, 1, HAL_MAX_DELAY);
 8000a04:	f107 0117 	add.w	r1, r7, #23
 8000a08:	f04f 33ff 	mov.w	r3, #4294967295
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	68f8      	ldr	r0, [r7, #12]
 8000a10:	f004 f82f 	bl	8004a72 <HAL_SPI_Receive>
  DISCONNECT_LS302();
 8000a14:	2201      	movs	r2, #1
 8000a16:	2108      	movs	r1, #8
 8000a18:	4804      	ldr	r0, [pc, #16]	; (8000a2c <read_lis302+0xd0>)
 8000a1a:	f001 f811 	bl	8001a40 <HAL_GPIO_WritePin>
  *u8Z = raw_data;
 8000a1e:	7dfa      	ldrb	r2, [r7, #23]
 8000a20:	683b      	ldr	r3, [r7, #0]
 8000a22:	701a      	strb	r2, [r3, #0]
}
 8000a24:	bf00      	nop
 8000a26:	3718      	adds	r7, #24
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	bd80      	pop	{r7, pc}
 8000a2c:	40021000 	.word	0x40021000

08000a30 <transmit_data>:

// USB Transmit Fonctions
void transmit_data(uint8_t u8X, uint8_t u8Y, uint8_t u8Z) {
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b09e      	sub	sp, #120	; 0x78
 8000a34:	af02      	add	r7, sp, #8
 8000a36:	4603      	mov	r3, r0
 8000a38:	71fb      	strb	r3, [r7, #7]
 8000a3a:	460b      	mov	r3, r1
 8000a3c:	71bb      	strb	r3, [r7, #6]
 8000a3e:	4613      	mov	r3, r2
 8000a40:	717b      	strb	r3, [r7, #5]
  uint8_t DataToSend[100];
  sprintf((char *)DataToSend, "X:%u,Y:%u,Z:%u\r\n", u8X, u8Y, u8Z);
 8000a42:	79fa      	ldrb	r2, [r7, #7]
 8000a44:	79b9      	ldrb	r1, [r7, #6]
 8000a46:	797b      	ldrb	r3, [r7, #5]
 8000a48:	f107 000c 	add.w	r0, r7, #12
 8000a4c:	9300      	str	r3, [sp, #0]
 8000a4e:	460b      	mov	r3, r1
 8000a50:	4909      	ldr	r1, [pc, #36]	; (8000a78 <transmit_data+0x48>)
 8000a52:	f009 f80f 	bl	8009a74 <siprintf>
  CDC_Transmit_FS(DataToSend, strlen((char *)DataToSend));
 8000a56:	f107 030c 	add.w	r3, r7, #12
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f7ff fbb8 	bl	80001d0 <strlen>
 8000a60:	4603      	mov	r3, r0
 8000a62:	b29a      	uxth	r2, r3
 8000a64:	f107 030c 	add.w	r3, r7, #12
 8000a68:	4611      	mov	r1, r2
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	f008 fb98 	bl	80091a0 <CDC_Transmit_FS>
}
 8000a70:	bf00      	nop
 8000a72:	3770      	adds	r7, #112	; 0x70
 8000a74:	46bd      	mov	sp, r7
 8000a76:	bd80      	pop	{r7, pc}
 8000a78:	0800a3d4 	.word	0x0800a3d4

08000a7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a82:	f000 fc99 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a86:	f000 f845 	bl	8000b14 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a8a:	f000 f96b 	bl	8000d64 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000a8e:	f000 f8ab 	bl	8000be8 <MX_I2C1_Init>
  MX_I2S3_Init();
 8000a92:	f000 f8d7 	bl	8000c44 <MX_I2S3_Init>
  MX_SPI1_Init();
 8000a96:	f000 f905 	bl	8000ca4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000a9a:	f000 f939 	bl	8000d10 <MX_USART2_UART_Init>
  MX_USB_DEVICE_Init();
 8000a9e:	f008 faa3 	bl	8008fe8 <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */

  lis302dl_init(&hspi1);
 8000aa2:	4816      	ldr	r0, [pc, #88]	; (8000afc <main+0x80>)
 8000aa4:	f7ff ff4c 	bl	8000940 <lis302dl_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	    read_lis302(&hspi1, &u8X, &u8Y, &u8Z);
 8000aa8:	4b15      	ldr	r3, [pc, #84]	; (8000b00 <main+0x84>)
 8000aaa:	4a16      	ldr	r2, [pc, #88]	; (8000b04 <main+0x88>)
 8000aac:	4916      	ldr	r1, [pc, #88]	; (8000b08 <main+0x8c>)
 8000aae:	4813      	ldr	r0, [pc, #76]	; (8000afc <main+0x80>)
 8000ab0:	f7ff ff54 	bl	800095c <read_lis302>
	    //compute_orientation(u8X, u8Y, u8Z, &pitch, &roll);
	    transmit_data(u8X, u8Y, u8Z, pitch, roll);
 8000ab4:	4b14      	ldr	r3, [pc, #80]	; (8000b08 <main+0x8c>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	461c      	mov	r4, r3
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <main+0x88>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	461d      	mov	r5, r3
 8000ac0:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <main+0x84>)
 8000ac2:	781b      	ldrb	r3, [r3, #0]
 8000ac4:	461e      	mov	r6, r3
 8000ac6:	4b11      	ldr	r3, [pc, #68]	; (8000b0c <main+0x90>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	4618      	mov	r0, r3
 8000acc:	f7ff fd3c 	bl	8000548 <__aeabi_f2d>
 8000ad0:	4680      	mov	r8, r0
 8000ad2:	4689      	mov	r9, r1
 8000ad4:	4b0e      	ldr	r3, [pc, #56]	; (8000b10 <main+0x94>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fd35 	bl	8000548 <__aeabi_f2d>
 8000ade:	4602      	mov	r2, r0
 8000ae0:	460b      	mov	r3, r1
 8000ae2:	ec43 2b11 	vmov	d1, r2, r3
 8000ae6:	ec49 8b10 	vmov	d0, r8, r9
 8000aea:	4632      	mov	r2, r6
 8000aec:	4629      	mov	r1, r5
 8000aee:	4620      	mov	r0, r4
 8000af0:	f7ff ff9e 	bl	8000a30 <transmit_data>
	    HAL_Delay(100);
 8000af4:	2064      	movs	r0, #100	; 0x64
 8000af6:	f000 fcd1 	bl	800149c <HAL_Delay>
  {
 8000afa:	e7d5      	b.n	8000aa8 <main+0x2c>
 8000afc:	20000210 	.word	0x20000210
 8000b00:	2000016a 	.word	0x2000016a
 8000b04:	20000169 	.word	0x20000169
 8000b08:	20000168 	.word	0x20000168
 8000b0c:	2000016c 	.word	0x2000016c
 8000b10:	20000170 	.word	0x20000170

08000b14 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b094      	sub	sp, #80	; 0x50
 8000b18:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b1a:	f107 0320 	add.w	r3, r7, #32
 8000b1e:	2230      	movs	r2, #48	; 0x30
 8000b20:	2100      	movs	r1, #0
 8000b22:	4618      	mov	r0, r3
 8000b24:	f008 ffc6 	bl	8009ab4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b28:	f107 030c 	add.w	r3, r7, #12
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	601a      	str	r2, [r3, #0]
 8000b30:	605a      	str	r2, [r3, #4]
 8000b32:	609a      	str	r2, [r3, #8]
 8000b34:	60da      	str	r2, [r3, #12]
 8000b36:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60bb      	str	r3, [r7, #8]
 8000b3c:	4b28      	ldr	r3, [pc, #160]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a27      	ldr	r2, [pc, #156]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b25      	ldr	r3, [pc, #148]	; (8000be0 <SystemClock_Config+0xcc>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b50:	60bb      	str	r3, [r7, #8]
 8000b52:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000b54:	2300      	movs	r3, #0
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	4b22      	ldr	r3, [pc, #136]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a21      	ldr	r2, [pc, #132]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b5e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b62:	6013      	str	r3, [r2, #0]
 8000b64:	4b1f      	ldr	r3, [pc, #124]	; (8000be4 <SystemClock_Config+0xd0>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b6c:	607b      	str	r3, [r7, #4]
 8000b6e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b70:	2301      	movs	r3, #1
 8000b72:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b74:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b78:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b7a:	2302      	movs	r3, #2
 8000b7c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b7e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b82:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000b84:	2308      	movs	r3, #8
 8000b86:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b88:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b8c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b8e:	2302      	movs	r3, #2
 8000b90:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b92:	2307      	movs	r3, #7
 8000b94:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b96:	f107 0320 	add.w	r3, r7, #32
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	f002 ffcc 	bl	8003b38 <HAL_RCC_OscConfig>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000ba6:	f000 f9db 	bl	8000f60 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000baa:	230f      	movs	r3, #15
 8000bac:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000bb6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000bba:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000bbc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bc0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000bc2:	f107 030c 	add.w	r3, r7, #12
 8000bc6:	2105      	movs	r1, #5
 8000bc8:	4618      	mov	r0, r3
 8000bca:	f003 fa2d 	bl	8004028 <HAL_RCC_ClockConfig>
 8000bce:	4603      	mov	r3, r0
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d001      	beq.n	8000bd8 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000bd4:	f000 f9c4 	bl	8000f60 <Error_Handler>
  }
}
 8000bd8:	bf00      	nop
 8000bda:	3750      	adds	r7, #80	; 0x50
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40007000 	.word	0x40007000

08000be8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000bec:	4b12      	ldr	r3, [pc, #72]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000bee:	4a13      	ldr	r2, [pc, #76]	; (8000c3c <MX_I2C1_Init+0x54>)
 8000bf0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000bf4:	4a12      	ldr	r2, [pc, #72]	; (8000c40 <MX_I2C1_Init+0x58>)
 8000bf6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000bf8:	4b0f      	ldr	r3, [pc, #60]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000bfe:	4b0e      	ldr	r3, [pc, #56]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c04:	4b0c      	ldr	r3, [pc, #48]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c0a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c0c:	4b0a      	ldr	r3, [pc, #40]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c12:	4b09      	ldr	r3, [pc, #36]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c18:	4b07      	ldr	r3, [pc, #28]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c24:	4804      	ldr	r0, [pc, #16]	; (8000c38 <MX_I2C1_Init+0x50>)
 8000c26:	f000 ff25 	bl	8001a74 <HAL_I2C_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000c30:	f000 f996 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c34:	bf00      	nop
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	20000174 	.word	0x20000174
 8000c3c:	40005400 	.word	0x40005400
 8000c40:	000186a0 	.word	0x000186a0

08000c44 <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 8000c48:	4b13      	ldr	r3, [pc, #76]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c4a:	4a14      	ldr	r2, [pc, #80]	; (8000c9c <MX_I2S3_Init+0x58>)
 8000c4c:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 8000c4e:	4b12      	ldr	r3, [pc, #72]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c50:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c54:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 8000c56:	4b10      	ldr	r3, [pc, #64]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 8000c62:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c68:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000c6a:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c6c:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <MX_I2S3_Init+0x5c>)
 8000c6e:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000c70:	4b09      	ldr	r3, [pc, #36]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 8000c76:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 8000c82:	4805      	ldr	r0, [pc, #20]	; (8000c98 <MX_I2S3_Init+0x54>)
 8000c84:	f001 f83a 	bl	8001cfc <HAL_I2S_Init>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d001      	beq.n	8000c92 <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000c8e:	f000 f967 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	200001c8 	.word	0x200001c8
 8000c9c:	40003c00 	.word	0x40003c00
 8000ca0:	00017700 	.word	0x00017700

08000ca4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ca8:	4b17      	ldr	r3, [pc, #92]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000caa:	4a18      	ldr	r2, [pc, #96]	; (8000d0c <MX_SPI1_Init+0x68>)
 8000cac:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000cae:	4b16      	ldr	r3, [pc, #88]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cb0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cb4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cbc:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc2:	4b11      	ldr	r3, [pc, #68]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000cc8:	4b0f      	ldr	r3, [pc, #60]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000cce:	4b0e      	ldr	r3, [pc, #56]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cd0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cd4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cd8:	2210      	movs	r2, #16
 8000cda:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cdc:	4b0a      	ldr	r3, [pc, #40]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce2:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ce8:	4b07      	ldr	r3, [pc, #28]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cf0:	220a      	movs	r2, #10
 8000cf2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000cf4:	4804      	ldr	r0, [pc, #16]	; (8000d08 <MX_SPI1_Init+0x64>)
 8000cf6:	f003 fcf7 	bl	80046e8 <HAL_SPI_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	d001      	beq.n	8000d04 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000d00:	f000 f92e 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000d04:	bf00      	nop
 8000d06:	bd80      	pop	{r7, pc}
 8000d08:	20000210 	.word	0x20000210
 8000d0c:	40013000 	.word	0x40013000

08000d10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d14:	4b11      	ldr	r3, [pc, #68]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d16:	4a12      	ldr	r2, [pc, #72]	; (8000d60 <MX_USART2_UART_Init+0x50>)
 8000d18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d1a:	4b10      	ldr	r3, [pc, #64]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d1c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d2e:	4b0b      	ldr	r3, [pc, #44]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d34:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d36:	220c      	movs	r2, #12
 8000d38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d3a:	4b08      	ldr	r3, [pc, #32]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d40:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000d46:	4805      	ldr	r0, [pc, #20]	; (8000d5c <MX_USART2_UART_Init+0x4c>)
 8000d48:	f004 fa76 	bl	8005238 <HAL_UART_Init>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000d52:	f000 f905 	bl	8000f60 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000d56:	bf00      	nop
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	20000268 	.word	0x20000268
 8000d60:	40004400 	.word	0x40004400

08000d64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b08c      	sub	sp, #48	; 0x30
 8000d68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d6a:	f107 031c 	add.w	r3, r7, #28
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
 8000d74:	609a      	str	r2, [r3, #8]
 8000d76:	60da      	str	r2, [r3, #12]
 8000d78:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	61bb      	str	r3, [r7, #24]
 8000d7e:	4b72      	ldr	r3, [pc, #456]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000d80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d82:	4a71      	ldr	r2, [pc, #452]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000d84:	f043 0310 	orr.w	r3, r3, #16
 8000d88:	6313      	str	r3, [r2, #48]	; 0x30
 8000d8a:	4b6f      	ldr	r3, [pc, #444]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d8e:	f003 0310 	and.w	r3, r3, #16
 8000d92:	61bb      	str	r3, [r7, #24]
 8000d94:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
 8000d9a:	4b6b      	ldr	r3, [pc, #428]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000d9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d9e:	4a6a      	ldr	r2, [pc, #424]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000da0:	f043 0304 	orr.w	r3, r3, #4
 8000da4:	6313      	str	r3, [r2, #48]	; 0x30
 8000da6:	4b68      	ldr	r3, [pc, #416]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000daa:	f003 0304 	and.w	r3, r3, #4
 8000dae:	617b      	str	r3, [r7, #20]
 8000db0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000db2:	2300      	movs	r3, #0
 8000db4:	613b      	str	r3, [r7, #16]
 8000db6:	4b64      	ldr	r3, [pc, #400]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000db8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dba:	4a63      	ldr	r2, [pc, #396]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000dbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000dc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000dc2:	4b61      	ldr	r3, [pc, #388]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dce:	2300      	movs	r3, #0
 8000dd0:	60fb      	str	r3, [r7, #12]
 8000dd2:	4b5d      	ldr	r3, [pc, #372]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd6:	4a5c      	ldr	r2, [pc, #368]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000dd8:	f043 0301 	orr.w	r3, r3, #1
 8000ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dde:	4b5a      	ldr	r3, [pc, #360]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	f003 0301 	and.w	r3, r3, #1
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b56      	ldr	r3, [pc, #344]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df2:	4a55      	ldr	r2, [pc, #340]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000df4:	f043 0302 	orr.w	r3, r3, #2
 8000df8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfa:	4b53      	ldr	r3, [pc, #332]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfe:	f003 0302 	and.w	r3, r3, #2
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	4b4f      	ldr	r3, [pc, #316]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a4e      	ldr	r2, [pc, #312]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000e10:	f043 0308 	orr.w	r3, r3, #8
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b4c      	ldr	r3, [pc, #304]	; (8000f48 <MX_GPIO_Init+0x1e4>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0308 	and.w	r3, r3, #8
 8000e1e:	607b      	str	r3, [r7, #4]
 8000e20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000e22:	2200      	movs	r2, #0
 8000e24:	2108      	movs	r1, #8
 8000e26:	4849      	ldr	r0, [pc, #292]	; (8000f4c <MX_GPIO_Init+0x1e8>)
 8000e28:	f000 fe0a 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	2101      	movs	r1, #1
 8000e30:	4847      	ldr	r0, [pc, #284]	; (8000f50 <MX_GPIO_Init+0x1ec>)
 8000e32:	f000 fe05 	bl	8001a40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000e36:	2200      	movs	r2, #0
 8000e38:	f24f 0110 	movw	r1, #61456	; 0xf010
 8000e3c:	4845      	ldr	r0, [pc, #276]	; (8000f54 <MX_GPIO_Init+0x1f0>)
 8000e3e:	f000 fdff 	bl	8001a40 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000e42:	2308      	movs	r3, #8
 8000e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e46:	2301      	movs	r3, #1
 8000e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	483c      	ldr	r0, [pc, #240]	; (8000f4c <MX_GPIO_Init+0x1e8>)
 8000e5a:	f000 fc55 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e62:	2301      	movs	r3, #1
 8000e64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e66:	2300      	movs	r3, #0
 8000e68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e6e:	f107 031c 	add.w	r3, r7, #28
 8000e72:	4619      	mov	r1, r3
 8000e74:	4836      	ldr	r0, [pc, #216]	; (8000f50 <MX_GPIO_Init+0x1ec>)
 8000e76:	f000 fc47 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000e7a:	2308      	movs	r3, #8
 8000e7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e7e:	2302      	movs	r3, #2
 8000e80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e82:	2300      	movs	r3, #0
 8000e84:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e86:	2300      	movs	r3, #0
 8000e88:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000e8a:	2305      	movs	r3, #5
 8000e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000e8e:	f107 031c 	add.w	r3, r7, #28
 8000e92:	4619      	mov	r1, r3
 8000e94:	482e      	ldr	r0, [pc, #184]	; (8000f50 <MX_GPIO_Init+0x1ec>)
 8000e96:	f000 fc37 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000e9e:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000ea2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000ea8:	f107 031c 	add.w	r3, r7, #28
 8000eac:	4619      	mov	r1, r3
 8000eae:	482a      	ldr	r0, [pc, #168]	; (8000f58 <MX_GPIO_Init+0x1f4>)
 8000eb0:	f000 fc2a 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000eb4:	2304      	movs	r3, #4
 8000eb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb8:	2300      	movs	r3, #0
 8000eba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebc:	2300      	movs	r3, #0
 8000ebe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000ec0:	f107 031c 	add.w	r3, r7, #28
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	4825      	ldr	r0, [pc, #148]	; (8000f5c <MX_GPIO_Init+0x1f8>)
 8000ec8:	f000 fc1e 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000ecc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000ed0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed2:	2302      	movs	r3, #2
 8000ed4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000ede:	2305      	movs	r3, #5
 8000ee0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000ee2:	f107 031c 	add.w	r3, r7, #28
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	481c      	ldr	r0, [pc, #112]	; (8000f5c <MX_GPIO_Init+0x1f8>)
 8000eea:	f000 fc0d 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000eee:	f24f 0310 	movw	r3, #61456	; 0xf010
 8000ef2:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000efc:	2300      	movs	r3, #0
 8000efe:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000f00:	f107 031c 	add.w	r3, r7, #28
 8000f04:	4619      	mov	r1, r3
 8000f06:	4813      	ldr	r0, [pc, #76]	; (8000f54 <MX_GPIO_Init+0x1f0>)
 8000f08:	f000 fbfe 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000f0c:	2320      	movs	r3, #32
 8000f0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f10:	2300      	movs	r3, #0
 8000f12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f14:	2300      	movs	r3, #0
 8000f16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000f18:	f107 031c 	add.w	r3, r7, #28
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	480d      	ldr	r0, [pc, #52]	; (8000f54 <MX_GPIO_Init+0x1f0>)
 8000f20:	f000 fbf2 	bl	8001708 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000f24:	2302      	movs	r3, #2
 8000f26:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000f28:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000f2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2e:	2300      	movs	r3, #0
 8000f30:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	4619      	mov	r1, r3
 8000f38:	4804      	ldr	r0, [pc, #16]	; (8000f4c <MX_GPIO_Init+0x1e8>)
 8000f3a:	f000 fbe5 	bl	8001708 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f3e:	bf00      	nop
 8000f40:	3730      	adds	r7, #48	; 0x30
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	40023800 	.word	0x40023800
 8000f4c:	40021000 	.word	0x40021000
 8000f50:	40020800 	.word	0x40020800
 8000f54:	40020c00 	.word	0x40020c00
 8000f58:	40020000 	.word	0x40020000
 8000f5c:	40020400 	.word	0x40020400

08000f60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f60:	b480      	push	{r7}
 8000f62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f64:	b672      	cpsid	i
}
 8000f66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <Error_Handler+0x8>
	...

08000f6c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	607b      	str	r3, [r7, #4]
 8000f76:	4b10      	ldr	r3, [pc, #64]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f7a:	4a0f      	ldr	r2, [pc, #60]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f80:	6453      	str	r3, [r2, #68]	; 0x44
 8000f82:	4b0d      	ldr	r3, [pc, #52]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f8a:	607b      	str	r3, [r7, #4]
 8000f8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f8e:	2300      	movs	r3, #0
 8000f90:	603b      	str	r3, [r7, #0]
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f96:	4a08      	ldr	r2, [pc, #32]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000f98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f9c:	6413      	str	r3, [r2, #64]	; 0x40
 8000f9e:	4b06      	ldr	r3, [pc, #24]	; (8000fb8 <HAL_MspInit+0x4c>)
 8000fa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fa2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fa6:	603b      	str	r3, [r7, #0]
 8000fa8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000faa:	2007      	movs	r0, #7
 8000fac:	f000 fb6a 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fb0:	bf00      	nop
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	40023800 	.word	0x40023800

08000fbc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b08a      	sub	sp, #40	; 0x28
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc4:	f107 0314 	add.w	r3, r7, #20
 8000fc8:	2200      	movs	r2, #0
 8000fca:	601a      	str	r2, [r3, #0]
 8000fcc:	605a      	str	r2, [r3, #4]
 8000fce:	609a      	str	r2, [r3, #8]
 8000fd0:	60da      	str	r2, [r3, #12]
 8000fd2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	681b      	ldr	r3, [r3, #0]
 8000fd8:	4a19      	ldr	r2, [pc, #100]	; (8001040 <HAL_I2C_MspInit+0x84>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d12c      	bne.n	8001038 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	613b      	str	r3, [r7, #16]
 8000fe2:	4b18      	ldr	r3, [pc, #96]	; (8001044 <HAL_I2C_MspInit+0x88>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	4a17      	ldr	r2, [pc, #92]	; (8001044 <HAL_I2C_MspInit+0x88>)
 8000fe8:	f043 0302 	orr.w	r3, r3, #2
 8000fec:	6313      	str	r3, [r2, #48]	; 0x30
 8000fee:	4b15      	ldr	r3, [pc, #84]	; (8001044 <HAL_I2C_MspInit+0x88>)
 8000ff0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000ffa:	f44f 7310 	mov.w	r3, #576	; 0x240
 8000ffe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001000:	2312      	movs	r3, #18
 8001002:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001004:	2301      	movs	r3, #1
 8001006:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001008:	2300      	movs	r3, #0
 800100a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800100c:	2304      	movs	r3, #4
 800100e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001010:	f107 0314 	add.w	r3, r7, #20
 8001014:	4619      	mov	r1, r3
 8001016:	480c      	ldr	r0, [pc, #48]	; (8001048 <HAL_I2C_MspInit+0x8c>)
 8001018:	f000 fb76 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800101c:	2300      	movs	r3, #0
 800101e:	60fb      	str	r3, [r7, #12]
 8001020:	4b08      	ldr	r3, [pc, #32]	; (8001044 <HAL_I2C_MspInit+0x88>)
 8001022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001024:	4a07      	ldr	r2, [pc, #28]	; (8001044 <HAL_I2C_MspInit+0x88>)
 8001026:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800102a:	6413      	str	r3, [r2, #64]	; 0x40
 800102c:	4b05      	ldr	r3, [pc, #20]	; (8001044 <HAL_I2C_MspInit+0x88>)
 800102e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001030:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001034:	60fb      	str	r3, [r7, #12]
 8001036:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001038:	bf00      	nop
 800103a:	3728      	adds	r7, #40	; 0x28
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	40005400 	.word	0x40005400
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400

0800104c <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b08e      	sub	sp, #56	; 0x38
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001064:	f107 0314 	add.w	r3, r7, #20
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4a31      	ldr	r2, [pc, #196]	; (800113c <HAL_I2S_MspInit+0xf0>)
 8001078:	4293      	cmp	r3, r2
 800107a:	d15a      	bne.n	8001132 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 800107c:	2301      	movs	r3, #1
 800107e:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8001080:	23c0      	movs	r3, #192	; 0xc0
 8001082:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8001084:	2302      	movs	r3, #2
 8001086:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001088:	f107 0314 	add.w	r3, r7, #20
 800108c:	4618      	mov	r0, r3
 800108e:	f003 f9eb 	bl	8004468 <HAL_RCCEx_PeriphCLKConfig>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8001098:	f7ff ff62 	bl	8000f60 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	4b27      	ldr	r3, [pc, #156]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a26      	ldr	r2, [pc, #152]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b24      	ldr	r3, [pc, #144]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80010b4:	613b      	str	r3, [r7, #16]
 80010b6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
 80010bc:	4b20      	ldr	r3, [pc, #128]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c0:	4a1f      	ldr	r2, [pc, #124]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010c2:	f043 0301 	orr.w	r3, r3, #1
 80010c6:	6313      	str	r3, [r2, #48]	; 0x30
 80010c8:	4b1d      	ldr	r3, [pc, #116]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010cc:	f003 0301 	and.w	r3, r3, #1
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d4:	2300      	movs	r3, #0
 80010d6:	60bb      	str	r3, [r7, #8]
 80010d8:	4b19      	ldr	r3, [pc, #100]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010dc:	4a18      	ldr	r2, [pc, #96]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010de:	f043 0304 	orr.w	r3, r3, #4
 80010e2:	6313      	str	r3, [r2, #48]	; 0x30
 80010e4:	4b16      	ldr	r3, [pc, #88]	; (8001140 <HAL_I2S_MspInit+0xf4>)
 80010e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e8:	f003 0304 	and.w	r3, r3, #4
 80010ec:	60bb      	str	r3, [r7, #8]
 80010ee:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 80010f0:	2310      	movs	r3, #16
 80010f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010f4:	2302      	movs	r3, #2
 80010f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f8:	2300      	movs	r3, #0
 80010fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010fc:	2300      	movs	r3, #0
 80010fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001100:	2306      	movs	r3, #6
 8001102:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8001104:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001108:	4619      	mov	r1, r3
 800110a:	480e      	ldr	r0, [pc, #56]	; (8001144 <HAL_I2S_MspInit+0xf8>)
 800110c:	f000 fafc 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8001110:	f44f 53a4 	mov.w	r3, #5248	; 0x1480
 8001114:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001116:	2302      	movs	r3, #2
 8001118:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111a:	2300      	movs	r3, #0
 800111c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800111e:	2300      	movs	r3, #0
 8001120:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001122:	2306      	movs	r3, #6
 8001124:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001126:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800112a:	4619      	mov	r1, r3
 800112c:	4806      	ldr	r0, [pc, #24]	; (8001148 <HAL_I2S_MspInit+0xfc>)
 800112e:	f000 faeb 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001132:	bf00      	nop
 8001134:	3738      	adds	r7, #56	; 0x38
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	40003c00 	.word	0x40003c00
 8001140:	40023800 	.word	0x40023800
 8001144:	40020000 	.word	0x40020000
 8001148:	40020800 	.word	0x40020800

0800114c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b08a      	sub	sp, #40	; 0x28
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	2200      	movs	r2, #0
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	605a      	str	r2, [r3, #4]
 800115e:	609a      	str	r2, [r3, #8]
 8001160:	60da      	str	r2, [r3, #12]
 8001162:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <HAL_SPI_MspInit+0x84>)
 800116a:	4293      	cmp	r3, r2
 800116c:	d12b      	bne.n	80011c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	613b      	str	r3, [r7, #16]
 8001172:	4b18      	ldr	r3, [pc, #96]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	4a17      	ldr	r2, [pc, #92]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001178:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800117c:	6453      	str	r3, [r2, #68]	; 0x44
 800117e:	4b15      	ldr	r3, [pc, #84]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001186:	613b      	str	r3, [r7, #16]
 8001188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b11      	ldr	r3, [pc, #68]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a10      	ldr	r2, [pc, #64]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b0e      	ldr	r3, [pc, #56]	; (80011d4 <HAL_SPI_MspInit+0x88>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 80011a6:	23e0      	movs	r3, #224	; 0xe0
 80011a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011aa:	2302      	movs	r3, #2
 80011ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ae:	2300      	movs	r3, #0
 80011b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b2:	2300      	movs	r3, #0
 80011b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80011b6:	2305      	movs	r3, #5
 80011b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ba:	f107 0314 	add.w	r3, r7, #20
 80011be:	4619      	mov	r1, r3
 80011c0:	4805      	ldr	r0, [pc, #20]	; (80011d8 <HAL_SPI_MspInit+0x8c>)
 80011c2:	f000 faa1 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40013000 	.word	0x40013000
 80011d4:	40023800 	.word	0x40023800
 80011d8:	40020000 	.word	0x40020000

080011dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
 80011e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e4:	f107 0314 	add.w	r3, r7, #20
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]
 80011f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a19      	ldr	r2, [pc, #100]	; (8001260 <HAL_UART_MspInit+0x84>)
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d12b      	bne.n	8001256 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80011fe:	2300      	movs	r3, #0
 8001200:	613b      	str	r3, [r7, #16]
 8001202:	4b18      	ldr	r3, [pc, #96]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	4a17      	ldr	r2, [pc, #92]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800120c:	6413      	str	r3, [r2, #64]	; 0x40
 800120e:	4b15      	ldr	r3, [pc, #84]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001212:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001216:	613b      	str	r3, [r7, #16]
 8001218:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
 800121e:	4b11      	ldr	r3, [pc, #68]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	4a10      	ldr	r2, [pc, #64]	; (8001264 <HAL_UART_MspInit+0x88>)
 8001224:	f043 0301 	orr.w	r3, r3, #1
 8001228:	6313      	str	r3, [r2, #48]	; 0x30
 800122a:	4b0e      	ldr	r3, [pc, #56]	; (8001264 <HAL_UART_MspInit+0x88>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
 8001234:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001236:	230c      	movs	r3, #12
 8001238:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123a:	2302      	movs	r3, #2
 800123c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001242:	2303      	movs	r3, #3
 8001244:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001246:	2307      	movs	r3, #7
 8001248:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800124a:	f107 0314 	add.w	r3, r7, #20
 800124e:	4619      	mov	r1, r3
 8001250:	4805      	ldr	r0, [pc, #20]	; (8001268 <HAL_UART_MspInit+0x8c>)
 8001252:	f000 fa59 	bl	8001708 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001256:	bf00      	nop
 8001258:	3728      	adds	r7, #40	; 0x28
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}
 800125e:	bf00      	nop
 8001260:	40004400 	.word	0x40004400
 8001264:	40023800 	.word	0x40023800
 8001268:	40020000 	.word	0x40020000

0800126c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800126c:	b480      	push	{r7}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001270:	e7fe      	b.n	8001270 <NMI_Handler+0x4>

08001272 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001272:	b480      	push	{r7}
 8001274:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001276:	e7fe      	b.n	8001276 <HardFault_Handler+0x4>

08001278 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800127c:	e7fe      	b.n	800127c <MemManage_Handler+0x4>

0800127e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800127e:	b480      	push	{r7}
 8001280:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001282:	e7fe      	b.n	8001282 <BusFault_Handler+0x4>

08001284 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001284:	b480      	push	{r7}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001288:	e7fe      	b.n	8001288 <UsageFault_Handler+0x4>

0800128a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800128a:	b480      	push	{r7}
 800128c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr

08001298 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800129c:	bf00      	nop
 800129e:	46bd      	mov	sp, r7
 80012a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a4:	4770      	bx	lr

080012a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012a6:	b480      	push	{r7}
 80012a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012aa:	bf00      	nop
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012b8:	f000 f8d0 	bl	800145c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 80012c4:	4802      	ldr	r0, [pc, #8]	; (80012d0 <OTG_FS_IRQHandler+0x10>)
 80012c6:	f001 fb09 	bl	80028dc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80012ca:	bf00      	nop
 80012cc:	bd80      	pop	{r7, pc}
 80012ce:	bf00      	nop
 80012d0:	20001794 	.word	0x20001794

080012d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b086      	sub	sp, #24
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <_sbrk+0x5c>)
 80012de:	4b15      	ldr	r3, [pc, #84]	; (8001334 <_sbrk+0x60>)
 80012e0:	1ad3      	subs	r3, r2, r3
 80012e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80012e8:	4b13      	ldr	r3, [pc, #76]	; (8001338 <_sbrk+0x64>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d102      	bne.n	80012f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <_sbrk+0x64>)
 80012f2:	4a12      	ldr	r2, [pc, #72]	; (800133c <_sbrk+0x68>)
 80012f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80012f6:	4b10      	ldr	r3, [pc, #64]	; (8001338 <_sbrk+0x64>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4413      	add	r3, r2
 80012fe:	693a      	ldr	r2, [r7, #16]
 8001300:	429a      	cmp	r2, r3
 8001302:	d207      	bcs.n	8001314 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001304:	f008 fbde 	bl	8009ac4 <__errno>
 8001308:	4603      	mov	r3, r0
 800130a:	220c      	movs	r2, #12
 800130c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800130e:	f04f 33ff 	mov.w	r3, #4294967295
 8001312:	e009      	b.n	8001328 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001314:	4b08      	ldr	r3, [pc, #32]	; (8001338 <_sbrk+0x64>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800131a:	4b07      	ldr	r3, [pc, #28]	; (8001338 <_sbrk+0x64>)
 800131c:	681a      	ldr	r2, [r3, #0]
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	4413      	add	r3, r2
 8001322:	4a05      	ldr	r2, [pc, #20]	; (8001338 <_sbrk+0x64>)
 8001324:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001326:	68fb      	ldr	r3, [r7, #12]
}
 8001328:	4618      	mov	r0, r3
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	20020000 	.word	0x20020000
 8001334:	00000400 	.word	0x00000400
 8001338:	200002ac 	.word	0x200002ac
 800133c:	20002008 	.word	0x20002008

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001368:	480d      	ldr	r0, [pc, #52]	; (80013a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800136a:	490e      	ldr	r1, [pc, #56]	; (80013a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800136c:	4a0e      	ldr	r2, [pc, #56]	; (80013a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800136e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001370:	e002      	b.n	8001378 <LoopCopyDataInit>

08001372 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001372:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001374:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001376:	3304      	adds	r3, #4

08001378 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001378:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800137c:	d3f9      	bcc.n	8001372 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800137e:	4a0b      	ldr	r2, [pc, #44]	; (80013ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001380:	4c0b      	ldr	r4, [pc, #44]	; (80013b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001382:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001384:	e001      	b.n	800138a <LoopFillZerobss>

08001386 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001386:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001388:	3204      	adds	r2, #4

0800138a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800138c:	d3fb      	bcc.n	8001386 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800138e:	f7ff ffd7 	bl	8001340 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001392:	f008 fb9d 	bl	8009ad0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff fb71 	bl	8000a7c <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	2000014c 	.word	0x2000014c
  ldr r2, =_sidata
 80013a8:	0800a48c 	.word	0x0800a48c
  ldr r2, =_sbss
 80013ac:	2000014c 	.word	0x2000014c
  ldr r4, =_ebss
 80013b0:	20002008 	.word	0x20002008

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f94f 	bl	8001684 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	2000      	movs	r0, #0
 80013e8:	f000 f808 	bl	80013fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fdbe 	bl	8000f6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001404:	4b12      	ldr	r3, [pc, #72]	; (8001450 <HAL_InitTick+0x54>)
 8001406:	681a      	ldr	r2, [r3, #0]
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <HAL_InitTick+0x58>)
 800140a:	781b      	ldrb	r3, [r3, #0]
 800140c:	4619      	mov	r1, r3
 800140e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001412:	fbb3 f3f1 	udiv	r3, r3, r1
 8001416:	fbb2 f3f3 	udiv	r3, r2, r3
 800141a:	4618      	mov	r0, r3
 800141c:	f000 f967 	bl	80016ee <HAL_SYSTICK_Config>
 8001420:	4603      	mov	r3, r0
 8001422:	2b00      	cmp	r3, #0
 8001424:	d001      	beq.n	800142a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001426:	2301      	movs	r3, #1
 8001428:	e00e      	b.n	8001448 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	2b0f      	cmp	r3, #15
 800142e:	d80a      	bhi.n	8001446 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001430:	2200      	movs	r2, #0
 8001432:	6879      	ldr	r1, [r7, #4]
 8001434:	f04f 30ff 	mov.w	r0, #4294967295
 8001438:	f000 f92f 	bl	800169a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800143c:	4a06      	ldr	r2, [pc, #24]	; (8001458 <HAL_InitTick+0x5c>)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001442:	2300      	movs	r3, #0
 8001444:	e000      	b.n	8001448 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
}
 8001448:	4618      	mov	r0, r3
 800144a:	3708      	adds	r7, #8
 800144c:	46bd      	mov	sp, r7
 800144e:	bd80      	pop	{r7, pc}
 8001450:	20000000 	.word	0x20000000
 8001454:	20000008 	.word	0x20000008
 8001458:	20000004 	.word	0x20000004

0800145c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800145c:	b480      	push	{r7}
 800145e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001460:	4b06      	ldr	r3, [pc, #24]	; (800147c <HAL_IncTick+0x20>)
 8001462:	781b      	ldrb	r3, [r3, #0]
 8001464:	461a      	mov	r2, r3
 8001466:	4b06      	ldr	r3, [pc, #24]	; (8001480 <HAL_IncTick+0x24>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4413      	add	r3, r2
 800146c:	4a04      	ldr	r2, [pc, #16]	; (8001480 <HAL_IncTick+0x24>)
 800146e:	6013      	str	r3, [r2, #0]
}
 8001470:	bf00      	nop
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000008 	.word	0x20000008
 8001480:	200002b0 	.word	0x200002b0

08001484 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  return uwTick;
 8001488:	4b03      	ldr	r3, [pc, #12]	; (8001498 <HAL_GetTick+0x14>)
 800148a:	681b      	ldr	r3, [r3, #0]
}
 800148c:	4618      	mov	r0, r3
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
 8001496:	bf00      	nop
 8001498:	200002b0 	.word	0x200002b0

0800149c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800149c:	b580      	push	{r7, lr}
 800149e:	b084      	sub	sp, #16
 80014a0:	af00      	add	r7, sp, #0
 80014a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80014a4:	f7ff ffee 	bl	8001484 <HAL_GetTick>
 80014a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80014b4:	d005      	beq.n	80014c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80014b6:	4b0a      	ldr	r3, [pc, #40]	; (80014e0 <HAL_Delay+0x44>)
 80014b8:	781b      	ldrb	r3, [r3, #0]
 80014ba:	461a      	mov	r2, r3
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	4413      	add	r3, r2
 80014c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80014c2:	bf00      	nop
 80014c4:	f7ff ffde 	bl	8001484 <HAL_GetTick>
 80014c8:	4602      	mov	r2, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	68fa      	ldr	r2, [r7, #12]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	d8f7      	bhi.n	80014c4 <HAL_Delay+0x28>
  {
  }
}
 80014d4:	bf00      	nop
 80014d6:	bf00      	nop
 80014d8:	3710      	adds	r7, #16
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000008 	.word	0x20000008

080014e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b085      	sub	sp, #20
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	f003 0307 	and.w	r3, r3, #7
 80014f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014f4:	4b0c      	ldr	r3, [pc, #48]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 80014f6:	68db      	ldr	r3, [r3, #12]
 80014f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014fa:	68ba      	ldr	r2, [r7, #8]
 80014fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001500:	4013      	ands	r3, r2
 8001502:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800150c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001510:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001514:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001516:	4a04      	ldr	r2, [pc, #16]	; (8001528 <__NVIC_SetPriorityGrouping+0x44>)
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	60d3      	str	r3, [r2, #12]
}
 800151c:	bf00      	nop
 800151e:	3714      	adds	r7, #20
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr
 8001528:	e000ed00 	.word	0xe000ed00

0800152c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800152c:	b480      	push	{r7}
 800152e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001530:	4b04      	ldr	r3, [pc, #16]	; (8001544 <__NVIC_GetPriorityGrouping+0x18>)
 8001532:	68db      	ldr	r3, [r3, #12]
 8001534:	0a1b      	lsrs	r3, r3, #8
 8001536:	f003 0307 	and.w	r3, r3, #7
}
 800153a:	4618      	mov	r0, r3
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	4603      	mov	r3, r0
 8001550:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001552:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001556:	2b00      	cmp	r3, #0
 8001558:	db0b      	blt.n	8001572 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800155a:	79fb      	ldrb	r3, [r7, #7]
 800155c:	f003 021f 	and.w	r2, r3, #31
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <__NVIC_EnableIRQ+0x38>)
 8001562:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001566:	095b      	lsrs	r3, r3, #5
 8001568:	2001      	movs	r0, #1
 800156a:	fa00 f202 	lsl.w	r2, r0, r2
 800156e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001572:	bf00      	nop
 8001574:	370c      	adds	r7, #12
 8001576:	46bd      	mov	sp, r7
 8001578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800157c:	4770      	bx	lr
 800157e:	bf00      	nop
 8001580:	e000e100 	.word	0xe000e100

08001584 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001584:	b480      	push	{r7}
 8001586:	b083      	sub	sp, #12
 8001588:	af00      	add	r7, sp, #0
 800158a:	4603      	mov	r3, r0
 800158c:	6039      	str	r1, [r7, #0]
 800158e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001590:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001594:	2b00      	cmp	r3, #0
 8001596:	db0a      	blt.n	80015ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001598:	683b      	ldr	r3, [r7, #0]
 800159a:	b2da      	uxtb	r2, r3
 800159c:	490c      	ldr	r1, [pc, #48]	; (80015d0 <__NVIC_SetPriority+0x4c>)
 800159e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015a2:	0112      	lsls	r2, r2, #4
 80015a4:	b2d2      	uxtb	r2, r2
 80015a6:	440b      	add	r3, r1
 80015a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015ac:	e00a      	b.n	80015c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ae:	683b      	ldr	r3, [r7, #0]
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	4908      	ldr	r1, [pc, #32]	; (80015d4 <__NVIC_SetPriority+0x50>)
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	f003 030f 	and.w	r3, r3, #15
 80015ba:	3b04      	subs	r3, #4
 80015bc:	0112      	lsls	r2, r2, #4
 80015be:	b2d2      	uxtb	r2, r2
 80015c0:	440b      	add	r3, r1
 80015c2:	761a      	strb	r2, [r3, #24]
}
 80015c4:	bf00      	nop
 80015c6:	370c      	adds	r7, #12
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	e000e100 	.word	0xe000e100
 80015d4:	e000ed00 	.word	0xe000ed00

080015d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015d8:	b480      	push	{r7}
 80015da:	b089      	sub	sp, #36	; 0x24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	60f8      	str	r0, [r7, #12]
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 0307 	and.w	r3, r3, #7
 80015ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80015ec:	69fb      	ldr	r3, [r7, #28]
 80015ee:	f1c3 0307 	rsb	r3, r3, #7
 80015f2:	2b04      	cmp	r3, #4
 80015f4:	bf28      	it	cs
 80015f6:	2304      	movcs	r3, #4
 80015f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80015fa:	69fb      	ldr	r3, [r7, #28]
 80015fc:	3304      	adds	r3, #4
 80015fe:	2b06      	cmp	r3, #6
 8001600:	d902      	bls.n	8001608 <NVIC_EncodePriority+0x30>
 8001602:	69fb      	ldr	r3, [r7, #28]
 8001604:	3b03      	subs	r3, #3
 8001606:	e000      	b.n	800160a <NVIC_EncodePriority+0x32>
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800160c:	f04f 32ff 	mov.w	r2, #4294967295
 8001610:	69bb      	ldr	r3, [r7, #24]
 8001612:	fa02 f303 	lsl.w	r3, r2, r3
 8001616:	43da      	mvns	r2, r3
 8001618:	68bb      	ldr	r3, [r7, #8]
 800161a:	401a      	ands	r2, r3
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001620:	f04f 31ff 	mov.w	r1, #4294967295
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	fa01 f303 	lsl.w	r3, r1, r3
 800162a:	43d9      	mvns	r1, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001630:	4313      	orrs	r3, r2
         );
}
 8001632:	4618      	mov	r0, r3
 8001634:	3724      	adds	r7, #36	; 0x24
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3b01      	subs	r3, #1
 800164c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001650:	d301      	bcc.n	8001656 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001652:	2301      	movs	r3, #1
 8001654:	e00f      	b.n	8001676 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001656:	4a0a      	ldr	r2, [pc, #40]	; (8001680 <SysTick_Config+0x40>)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	3b01      	subs	r3, #1
 800165c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800165e:	210f      	movs	r1, #15
 8001660:	f04f 30ff 	mov.w	r0, #4294967295
 8001664:	f7ff ff8e 	bl	8001584 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001668:	4b05      	ldr	r3, [pc, #20]	; (8001680 <SysTick_Config+0x40>)
 800166a:	2200      	movs	r2, #0
 800166c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800166e:	4b04      	ldr	r3, [pc, #16]	; (8001680 <SysTick_Config+0x40>)
 8001670:	2207      	movs	r2, #7
 8001672:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	e000e010 	.word	0xe000e010

08001684 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800168c:	6878      	ldr	r0, [r7, #4]
 800168e:	f7ff ff29 	bl	80014e4 <__NVIC_SetPriorityGrouping>
}
 8001692:	bf00      	nop
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}

0800169a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800169a:	b580      	push	{r7, lr}
 800169c:	b086      	sub	sp, #24
 800169e:	af00      	add	r7, sp, #0
 80016a0:	4603      	mov	r3, r0
 80016a2:	60b9      	str	r1, [r7, #8]
 80016a4:	607a      	str	r2, [r7, #4]
 80016a6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016a8:	2300      	movs	r3, #0
 80016aa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016ac:	f7ff ff3e 	bl	800152c <__NVIC_GetPriorityGrouping>
 80016b0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016b2:	687a      	ldr	r2, [r7, #4]
 80016b4:	68b9      	ldr	r1, [r7, #8]
 80016b6:	6978      	ldr	r0, [r7, #20]
 80016b8:	f7ff ff8e 	bl	80015d8 <NVIC_EncodePriority>
 80016bc:	4602      	mov	r2, r0
 80016be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016c2:	4611      	mov	r1, r2
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff ff5d 	bl	8001584 <__NVIC_SetPriority>
}
 80016ca:	bf00      	nop
 80016cc:	3718      	adds	r7, #24
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}

080016d2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016d2:	b580      	push	{r7, lr}
 80016d4:	b082      	sub	sp, #8
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	4603      	mov	r3, r0
 80016da:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff31 	bl	8001548 <__NVIC_EnableIRQ>
}
 80016e6:	bf00      	nop
 80016e8:	3708      	adds	r7, #8
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80016f6:	6878      	ldr	r0, [r7, #4]
 80016f8:	f7ff ffa2 	bl	8001640 <SysTick_Config>
 80016fc:	4603      	mov	r3, r0
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001708:	b480      	push	{r7}
 800170a:	b089      	sub	sp, #36	; 0x24
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
 8001710:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001716:	2300      	movs	r3, #0
 8001718:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800171a:	2300      	movs	r3, #0
 800171c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	2300      	movs	r3, #0
 8001720:	61fb      	str	r3, [r7, #28]
 8001722:	e16b      	b.n	80019fc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001724:	2201      	movs	r2, #1
 8001726:	69fb      	ldr	r3, [r7, #28]
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	697a      	ldr	r2, [r7, #20]
 8001734:	4013      	ands	r3, r2
 8001736:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001738:	693a      	ldr	r2, [r7, #16]
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	429a      	cmp	r2, r3
 800173e:	f040 815a 	bne.w	80019f6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	f003 0303 	and.w	r3, r3, #3
 800174a:	2b01      	cmp	r3, #1
 800174c:	d005      	beq.n	800175a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800174e:	683b      	ldr	r3, [r7, #0]
 8001750:	685b      	ldr	r3, [r3, #4]
 8001752:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001756:	2b02      	cmp	r3, #2
 8001758:	d130      	bne.n	80017bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001760:	69fb      	ldr	r3, [r7, #28]
 8001762:	005b      	lsls	r3, r3, #1
 8001764:	2203      	movs	r2, #3
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43db      	mvns	r3, r3
 800176c:	69ba      	ldr	r2, [r7, #24]
 800176e:	4013      	ands	r3, r2
 8001770:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	68da      	ldr	r2, [r3, #12]
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	fa02 f303 	lsl.w	r3, r2, r3
 800177e:	69ba      	ldr	r2, [r7, #24]
 8001780:	4313      	orrs	r3, r2
 8001782:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	69ba      	ldr	r2, [r7, #24]
 8001788:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	685b      	ldr	r3, [r3, #4]
 800178e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001790:	2201      	movs	r2, #1
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	43db      	mvns	r3, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4013      	ands	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	091b      	lsrs	r3, r3, #4
 80017a6:	f003 0201 	and.w	r2, r3, #1
 80017aa:	69fb      	ldr	r3, [r7, #28]
 80017ac:	fa02 f303 	lsl.w	r3, r2, r3
 80017b0:	69ba      	ldr	r2, [r7, #24]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	69ba      	ldr	r2, [r7, #24]
 80017ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	f003 0303 	and.w	r3, r3, #3
 80017c4:	2b03      	cmp	r3, #3
 80017c6:	d017      	beq.n	80017f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ce:	69fb      	ldr	r3, [r7, #28]
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	2203      	movs	r2, #3
 80017d4:	fa02 f303 	lsl.w	r3, r2, r3
 80017d8:	43db      	mvns	r3, r3
 80017da:	69ba      	ldr	r2, [r7, #24]
 80017dc:	4013      	ands	r3, r2
 80017de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017e0:	683b      	ldr	r3, [r7, #0]
 80017e2:	689a      	ldr	r2, [r3, #8]
 80017e4:	69fb      	ldr	r3, [r7, #28]
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4313      	orrs	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69ba      	ldr	r2, [r7, #24]
 80017f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b02      	cmp	r3, #2
 8001802:	d123      	bne.n	800184c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001804:	69fb      	ldr	r3, [r7, #28]
 8001806:	08da      	lsrs	r2, r3, #3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	3208      	adds	r2, #8
 800180c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001810:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	009b      	lsls	r3, r3, #2
 800181a:	220f      	movs	r2, #15
 800181c:	fa02 f303 	lsl.w	r3, r2, r3
 8001820:	43db      	mvns	r3, r3
 8001822:	69ba      	ldr	r2, [r7, #24]
 8001824:	4013      	ands	r3, r2
 8001826:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001828:	683b      	ldr	r3, [r7, #0]
 800182a:	691a      	ldr	r2, [r3, #16]
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	fa02 f303 	lsl.w	r3, r2, r3
 8001838:	69ba      	ldr	r2, [r7, #24]
 800183a:	4313      	orrs	r3, r2
 800183c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	08da      	lsrs	r2, r3, #3
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	3208      	adds	r2, #8
 8001846:	69b9      	ldr	r1, [r7, #24]
 8001848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001852:	69fb      	ldr	r3, [r7, #28]
 8001854:	005b      	lsls	r3, r3, #1
 8001856:	2203      	movs	r2, #3
 8001858:	fa02 f303 	lsl.w	r3, r2, r3
 800185c:	43db      	mvns	r3, r3
 800185e:	69ba      	ldr	r2, [r7, #24]
 8001860:	4013      	ands	r3, r2
 8001862:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	f003 0203 	and.w	r2, r3, #3
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	005b      	lsls	r3, r3, #1
 8001870:	fa02 f303 	lsl.w	r3, r2, r3
 8001874:	69ba      	ldr	r2, [r7, #24]
 8001876:	4313      	orrs	r3, r2
 8001878:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001888:	2b00      	cmp	r3, #0
 800188a:	f000 80b4 	beq.w	80019f6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800188e:	2300      	movs	r3, #0
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	4b60      	ldr	r3, [pc, #384]	; (8001a14 <HAL_GPIO_Init+0x30c>)
 8001894:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001896:	4a5f      	ldr	r2, [pc, #380]	; (8001a14 <HAL_GPIO_Init+0x30c>)
 8001898:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800189c:	6453      	str	r3, [r2, #68]	; 0x44
 800189e:	4b5d      	ldr	r3, [pc, #372]	; (8001a14 <HAL_GPIO_Init+0x30c>)
 80018a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018a6:	60fb      	str	r3, [r7, #12]
 80018a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018aa:	4a5b      	ldr	r2, [pc, #364]	; (8001a18 <HAL_GPIO_Init+0x310>)
 80018ac:	69fb      	ldr	r3, [r7, #28]
 80018ae:	089b      	lsrs	r3, r3, #2
 80018b0:	3302      	adds	r3, #2
 80018b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018b8:	69fb      	ldr	r3, [r7, #28]
 80018ba:	f003 0303 	and.w	r3, r3, #3
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	220f      	movs	r2, #15
 80018c2:	fa02 f303 	lsl.w	r3, r2, r3
 80018c6:	43db      	mvns	r3, r3
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	4013      	ands	r3, r2
 80018cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a52      	ldr	r2, [pc, #328]	; (8001a1c <HAL_GPIO_Init+0x314>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d02b      	beq.n	800192e <HAL_GPIO_Init+0x226>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a51      	ldr	r2, [pc, #324]	; (8001a20 <HAL_GPIO_Init+0x318>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d025      	beq.n	800192a <HAL_GPIO_Init+0x222>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a50      	ldr	r2, [pc, #320]	; (8001a24 <HAL_GPIO_Init+0x31c>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d01f      	beq.n	8001926 <HAL_GPIO_Init+0x21e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4f      	ldr	r2, [pc, #316]	; (8001a28 <HAL_GPIO_Init+0x320>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d019      	beq.n	8001922 <HAL_GPIO_Init+0x21a>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4a4e      	ldr	r2, [pc, #312]	; (8001a2c <HAL_GPIO_Init+0x324>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d013      	beq.n	800191e <HAL_GPIO_Init+0x216>
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a4d      	ldr	r2, [pc, #308]	; (8001a30 <HAL_GPIO_Init+0x328>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d00d      	beq.n	800191a <HAL_GPIO_Init+0x212>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a4c      	ldr	r2, [pc, #304]	; (8001a34 <HAL_GPIO_Init+0x32c>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d007      	beq.n	8001916 <HAL_GPIO_Init+0x20e>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4a4b      	ldr	r2, [pc, #300]	; (8001a38 <HAL_GPIO_Init+0x330>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d101      	bne.n	8001912 <HAL_GPIO_Init+0x20a>
 800190e:	2307      	movs	r3, #7
 8001910:	e00e      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001912:	2308      	movs	r3, #8
 8001914:	e00c      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001916:	2306      	movs	r3, #6
 8001918:	e00a      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191a:	2305      	movs	r3, #5
 800191c:	e008      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800191e:	2304      	movs	r3, #4
 8001920:	e006      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001922:	2303      	movs	r3, #3
 8001924:	e004      	b.n	8001930 <HAL_GPIO_Init+0x228>
 8001926:	2302      	movs	r3, #2
 8001928:	e002      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192a:	2301      	movs	r3, #1
 800192c:	e000      	b.n	8001930 <HAL_GPIO_Init+0x228>
 800192e:	2300      	movs	r3, #0
 8001930:	69fa      	ldr	r2, [r7, #28]
 8001932:	f002 0203 	and.w	r2, r2, #3
 8001936:	0092      	lsls	r2, r2, #2
 8001938:	4093      	lsls	r3, r2
 800193a:	69ba      	ldr	r2, [r7, #24]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001940:	4935      	ldr	r1, [pc, #212]	; (8001a18 <HAL_GPIO_Init+0x310>)
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	089b      	lsrs	r3, r3, #2
 8001946:	3302      	adds	r3, #2
 8001948:	69ba      	ldr	r2, [r7, #24]
 800194a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800194e:	4b3b      	ldr	r3, [pc, #236]	; (8001a3c <HAL_GPIO_Init+0x334>)
 8001950:	689b      	ldr	r3, [r3, #8]
 8001952:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	43db      	mvns	r3, r3
 8001958:	69ba      	ldr	r2, [r7, #24]
 800195a:	4013      	ands	r3, r2
 800195c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800195e:	683b      	ldr	r3, [r7, #0]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001966:	2b00      	cmp	r3, #0
 8001968:	d003      	beq.n	8001972 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	4313      	orrs	r3, r2
 8001970:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001972:	4a32      	ldr	r2, [pc, #200]	; (8001a3c <HAL_GPIO_Init+0x334>)
 8001974:	69bb      	ldr	r3, [r7, #24]
 8001976:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001978:	4b30      	ldr	r3, [pc, #192]	; (8001a3c <HAL_GPIO_Init+0x334>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	43db      	mvns	r3, r3
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	4013      	ands	r3, r2
 8001986:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001990:	2b00      	cmp	r3, #0
 8001992:	d003      	beq.n	800199c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	4313      	orrs	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800199c:	4a27      	ldr	r2, [pc, #156]	; (8001a3c <HAL_GPIO_Init+0x334>)
 800199e:	69bb      	ldr	r3, [r7, #24]
 80019a0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019a2:	4b26      	ldr	r3, [pc, #152]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80019a4:	685b      	ldr	r3, [r3, #4]
 80019a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	43db      	mvns	r3, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4013      	ands	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019b2:	683b      	ldr	r3, [r7, #0]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	d003      	beq.n	80019c6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4313      	orrs	r3, r2
 80019c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019c6:	4a1d      	ldr	r2, [pc, #116]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80019c8:	69bb      	ldr	r3, [r7, #24]
 80019ca:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019cc:	4b1b      	ldr	r3, [pc, #108]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	685b      	ldr	r3, [r3, #4]
 80019e0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d003      	beq.n	80019f0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	4313      	orrs	r3, r2
 80019ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019f0:	4a12      	ldr	r2, [pc, #72]	; (8001a3c <HAL_GPIO_Init+0x334>)
 80019f2:	69bb      	ldr	r3, [r7, #24]
 80019f4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3301      	adds	r3, #1
 80019fa:	61fb      	str	r3, [r7, #28]
 80019fc:	69fb      	ldr	r3, [r7, #28]
 80019fe:	2b0f      	cmp	r3, #15
 8001a00:	f67f ae90 	bls.w	8001724 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001a04:	bf00      	nop
 8001a06:	bf00      	nop
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40023800 	.word	0x40023800
 8001a18:	40013800 	.word	0x40013800
 8001a1c:	40020000 	.word	0x40020000
 8001a20:	40020400 	.word	0x40020400
 8001a24:	40020800 	.word	0x40020800
 8001a28:	40020c00 	.word	0x40020c00
 8001a2c:	40021000 	.word	0x40021000
 8001a30:	40021400 	.word	0x40021400
 8001a34:	40021800 	.word	0x40021800
 8001a38:	40021c00 	.word	0x40021c00
 8001a3c:	40013c00 	.word	0x40013c00

08001a40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
 8001a48:	460b      	mov	r3, r1
 8001a4a:	807b      	strh	r3, [r7, #2]
 8001a4c:	4613      	mov	r3, r2
 8001a4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a50:	787b      	ldrb	r3, [r7, #1]
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d003      	beq.n	8001a5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a56:	887a      	ldrh	r2, [r7, #2]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a5c:	e003      	b.n	8001a66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a5e:	887b      	ldrh	r3, [r7, #2]
 8001a60:	041a      	lsls	r2, r3, #16
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	619a      	str	r2, [r3, #24]
}
 8001a66:	bf00      	nop
 8001a68:	370c      	adds	r7, #12
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
	...

08001a74 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b084      	sub	sp, #16
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d101      	bne.n	8001a86 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a82:	2301      	movs	r3, #1
 8001a84:	e12b      	b.n	8001cde <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d106      	bne.n	8001aa0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2200      	movs	r2, #0
 8001a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f7ff fa8e 	bl	8000fbc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	2224      	movs	r2, #36	; 0x24
 8001aa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	681a      	ldr	r2, [r3, #0]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0201 	bic.w	r2, r2, #1
 8001ab6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	681a      	ldr	r2, [r3, #0]
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ac6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ad6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ad8:	f002 fc9e 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8001adc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	4a81      	ldr	r2, [pc, #516]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d807      	bhi.n	8001af8 <HAL_I2C_Init+0x84>
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	4a80      	ldr	r2, [pc, #512]	; (8001cec <HAL_I2C_Init+0x278>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	bf94      	ite	ls
 8001af0:	2301      	movls	r3, #1
 8001af2:	2300      	movhi	r3, #0
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	e006      	b.n	8001b06 <HAL_I2C_Init+0x92>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	4a7d      	ldr	r2, [pc, #500]	; (8001cf0 <HAL_I2C_Init+0x27c>)
 8001afc:	4293      	cmp	r3, r2
 8001afe:	bf94      	ite	ls
 8001b00:	2301      	movls	r3, #1
 8001b02:	2300      	movhi	r3, #0
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e0e7      	b.n	8001cde <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001b0e:	68fb      	ldr	r3, [r7, #12]
 8001b10:	4a78      	ldr	r2, [pc, #480]	; (8001cf4 <HAL_I2C_Init+0x280>)
 8001b12:	fba2 2303 	umull	r2, r3, r2, r3
 8001b16:	0c9b      	lsrs	r3, r3, #18
 8001b18:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	685b      	ldr	r3, [r3, #4]
 8001b20:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	68ba      	ldr	r2, [r7, #8]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	6a1b      	ldr	r3, [r3, #32]
 8001b34:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	4a6a      	ldr	r2, [pc, #424]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d802      	bhi.n	8001b48 <HAL_I2C_Init+0xd4>
 8001b42:	68bb      	ldr	r3, [r7, #8]
 8001b44:	3301      	adds	r3, #1
 8001b46:	e009      	b.n	8001b5c <HAL_I2C_Init+0xe8>
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001b4e:	fb02 f303 	mul.w	r3, r2, r3
 8001b52:	4a69      	ldr	r2, [pc, #420]	; (8001cf8 <HAL_I2C_Init+0x284>)
 8001b54:	fba2 2303 	umull	r2, r3, r2, r3
 8001b58:	099b      	lsrs	r3, r3, #6
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	687a      	ldr	r2, [r7, #4]
 8001b5e:	6812      	ldr	r2, [r2, #0]
 8001b60:	430b      	orrs	r3, r1
 8001b62:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	69db      	ldr	r3, [r3, #28]
 8001b6a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b6e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	495c      	ldr	r1, [pc, #368]	; (8001ce8 <HAL_I2C_Init+0x274>)
 8001b78:	428b      	cmp	r3, r1
 8001b7a:	d819      	bhi.n	8001bb0 <HAL_I2C_Init+0x13c>
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	1e59      	subs	r1, r3, #1
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	005b      	lsls	r3, r3, #1
 8001b86:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b8a:	1c59      	adds	r1, r3, #1
 8001b8c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b90:	400b      	ands	r3, r1
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d00a      	beq.n	8001bac <HAL_I2C_Init+0x138>
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	1e59      	subs	r1, r3, #1
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ba4:	3301      	adds	r3, #1
 8001ba6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001baa:	e051      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bac:	2304      	movs	r3, #4
 8001bae:	e04f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	689b      	ldr	r3, [r3, #8]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d111      	bne.n	8001bdc <HAL_I2C_Init+0x168>
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	1e58      	subs	r0, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6859      	ldr	r1, [r3, #4]
 8001bc0:	460b      	mov	r3, r1
 8001bc2:	005b      	lsls	r3, r3, #1
 8001bc4:	440b      	add	r3, r1
 8001bc6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bca:	3301      	adds	r3, #1
 8001bcc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	bf0c      	ite	eq
 8001bd4:	2301      	moveq	r3, #1
 8001bd6:	2300      	movne	r3, #0
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	e012      	b.n	8001c02 <HAL_I2C_Init+0x18e>
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	1e58      	subs	r0, r3, #1
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6859      	ldr	r1, [r3, #4]
 8001be4:	460b      	mov	r3, r1
 8001be6:	009b      	lsls	r3, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	0099      	lsls	r1, r3, #2
 8001bec:	440b      	add	r3, r1
 8001bee:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	bf0c      	ite	eq
 8001bfc:	2301      	moveq	r3, #1
 8001bfe:	2300      	movne	r3, #0
 8001c00:	b2db      	uxtb	r3, r3
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d001      	beq.n	8001c0a <HAL_I2C_Init+0x196>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e022      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d10e      	bne.n	8001c30 <HAL_I2C_Init+0x1bc>
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	1e58      	subs	r0, r3, #1
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6859      	ldr	r1, [r3, #4]
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	005b      	lsls	r3, r3, #1
 8001c1e:	440b      	add	r3, r1
 8001c20:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c24:	3301      	adds	r3, #1
 8001c26:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001c2e:	e00f      	b.n	8001c50 <HAL_I2C_Init+0x1dc>
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	1e58      	subs	r0, r3, #1
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	6859      	ldr	r1, [r3, #4]
 8001c38:	460b      	mov	r3, r1
 8001c3a:	009b      	lsls	r3, r3, #2
 8001c3c:	440b      	add	r3, r1
 8001c3e:	0099      	lsls	r1, r3, #2
 8001c40:	440b      	add	r3, r1
 8001c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8001c46:	3301      	adds	r3, #1
 8001c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001c4c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001c50:	6879      	ldr	r1, [r7, #4]
 8001c52:	6809      	ldr	r1, [r1, #0]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	69da      	ldr	r2, [r3, #28]
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6a1b      	ldr	r3, [r3, #32]
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	430a      	orrs	r2, r1
 8001c72:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c7e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c82:	687a      	ldr	r2, [r7, #4]
 8001c84:	6911      	ldr	r1, [r2, #16]
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	68d2      	ldr	r2, [r2, #12]
 8001c8a:	4311      	orrs	r1, r2
 8001c8c:	687a      	ldr	r2, [r7, #4]
 8001c8e:	6812      	ldr	r2, [r2, #0]
 8001c90:	430b      	orrs	r3, r1
 8001c92:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68db      	ldr	r3, [r3, #12]
 8001c9a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695a      	ldr	r2, [r3, #20]
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	699b      	ldr	r3, [r3, #24]
 8001ca6:	431a      	orrs	r2, r3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	430a      	orrs	r2, r1
 8001cae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f042 0201 	orr.w	r2, r2, #1
 8001cbe:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2220      	movs	r2, #32
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001cdc:	2300      	movs	r3, #0
}
 8001cde:	4618      	mov	r0, r3
 8001ce0:	3710      	adds	r7, #16
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	bd80      	pop	{r7, pc}
 8001ce6:	bf00      	nop
 8001ce8:	000186a0 	.word	0x000186a0
 8001cec:	001e847f 	.word	0x001e847f
 8001cf0:	003d08ff 	.word	0x003d08ff
 8001cf4:	431bde83 	.word	0x431bde83
 8001cf8:	10624dd3 	.word	0x10624dd3

08001cfc <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d101      	bne.n	8001d0e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e128      	b.n	8001f60 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001d14:	b2db      	uxtb	r3, r3
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d109      	bne.n	8001d2e <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	2200      	movs	r2, #0
 8001d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a90      	ldr	r2, [pc, #576]	; (8001f68 <HAL_I2S_Init+0x26c>)
 8001d26:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff f98f 	bl	800104c <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	2202      	movs	r2, #2
 8001d32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	69db      	ldr	r3, [r3, #28]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6812      	ldr	r2, [r2, #0]
 8001d40:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001d44:	f023 030f 	bic.w	r3, r3, #15
 8001d48:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	2202      	movs	r2, #2
 8001d50:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	695b      	ldr	r3, [r3, #20]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d060      	beq.n	8001e1c <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	68db      	ldr	r3, [r3, #12]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d102      	bne.n	8001d68 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 8001d62:	2310      	movs	r3, #16
 8001d64:	617b      	str	r3, [r7, #20]
 8001d66:	e001      	b.n	8001d6c <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8001d68:	2320      	movs	r3, #32
 8001d6a:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	689b      	ldr	r3, [r3, #8]
 8001d70:	2b20      	cmp	r3, #32
 8001d72:	d802      	bhi.n	8001d7a <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 8001d74:	697b      	ldr	r3, [r7, #20]
 8001d76:	005b      	lsls	r3, r3, #1
 8001d78:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8001d7a:	2001      	movs	r0, #1
 8001d7c:	f002 fc56 	bl	800462c <HAL_RCCEx_GetPeriphCLKFreq>
 8001d80:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d8a:	d125      	bne.n	8001dd8 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68db      	ldr	r3, [r3, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d010      	beq.n	8001db6 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	009b      	lsls	r3, r3, #2
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	fbb2 f2f3 	udiv	r2, r2, r3
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	461a      	mov	r2, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	695b      	ldr	r3, [r3, #20]
 8001dac:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db0:	3305      	adds	r3, #5
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	e01f      	b.n	8001df6 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	00db      	lsls	r3, r3, #3
 8001dba:	68fa      	ldr	r2, [r7, #12]
 8001dbc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	009b      	lsls	r3, r3, #2
 8001dc4:	4413      	add	r3, r2
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	461a      	mov	r2, r3
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	695b      	ldr	r3, [r3, #20]
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	3305      	adds	r3, #5
 8001dd4:	613b      	str	r3, [r7, #16]
 8001dd6:	e00e      	b.n	8001df6 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	697b      	ldr	r3, [r7, #20]
 8001ddc:	fbb2 f2f3 	udiv	r2, r2, r3
 8001de0:	4613      	mov	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	4413      	add	r3, r2
 8001de6:	005b      	lsls	r3, r3, #1
 8001de8:	461a      	mov	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	695b      	ldr	r3, [r3, #20]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	3305      	adds	r3, #5
 8001df4:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	4a5c      	ldr	r2, [pc, #368]	; (8001f6c <HAL_I2S_Init+0x270>)
 8001dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8001dfe:	08db      	lsrs	r3, r3, #3
 8001e00:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	f003 0301 	and.w	r3, r3, #1
 8001e08:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8001e0a:	693a      	ldr	r2, [r7, #16]
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	085b      	lsrs	r3, r3, #1
 8001e12:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8001e14:	69bb      	ldr	r3, [r7, #24]
 8001e16:	021b      	lsls	r3, r3, #8
 8001e18:	61bb      	str	r3, [r7, #24]
 8001e1a:	e003      	b.n	8001e24 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8001e1c:	2302      	movs	r3, #2
 8001e1e:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8001e24:	69fb      	ldr	r3, [r7, #28]
 8001e26:	2b01      	cmp	r3, #1
 8001e28:	d902      	bls.n	8001e30 <HAL_I2S_Init+0x134>
 8001e2a:	69fb      	ldr	r3, [r7, #28]
 8001e2c:	2bff      	cmp	r3, #255	; 0xff
 8001e2e:	d907      	bls.n	8001e40 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e34:	f043 0210 	orr.w	r2, r3, #16
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e08f      	b.n	8001f60 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	691a      	ldr	r2, [r3, #16]
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	ea42 0103 	orr.w	r1, r2, r3
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	69fa      	ldr	r2, [r7, #28]
 8001e50:	430a      	orrs	r2, r1
 8001e52:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	69db      	ldr	r3, [r3, #28]
 8001e5a:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001e5e:	f023 030f 	bic.w	r3, r3, #15
 8001e62:	687a      	ldr	r2, [r7, #4]
 8001e64:	6851      	ldr	r1, [r2, #4]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	6892      	ldr	r2, [r2, #8]
 8001e6a:	4311      	orrs	r1, r2
 8001e6c:	687a      	ldr	r2, [r7, #4]
 8001e6e:	68d2      	ldr	r2, [r2, #12]
 8001e70:	4311      	orrs	r1, r2
 8001e72:	687a      	ldr	r2, [r7, #4]
 8001e74:	6992      	ldr	r2, [r2, #24]
 8001e76:	430a      	orrs	r2, r1
 8001e78:	431a      	orrs	r2, r3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001e82:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	2b01      	cmp	r3, #1
 8001e8a:	d161      	bne.n	8001f50 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a38      	ldr	r2, [pc, #224]	; (8001f70 <HAL_I2S_Init+0x274>)
 8001e90:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a37      	ldr	r2, [pc, #220]	; (8001f74 <HAL_I2S_Init+0x278>)
 8001e98:	4293      	cmp	r3, r2
 8001e9a:	d101      	bne.n	8001ea0 <HAL_I2S_Init+0x1a4>
 8001e9c:	4b36      	ldr	r3, [pc, #216]	; (8001f78 <HAL_I2S_Init+0x27c>)
 8001e9e:	e001      	b.n	8001ea4 <HAL_I2S_Init+0x1a8>
 8001ea0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ea4:	69db      	ldr	r3, [r3, #28]
 8001ea6:	687a      	ldr	r2, [r7, #4]
 8001ea8:	6812      	ldr	r2, [r2, #0]
 8001eaa:	4932      	ldr	r1, [pc, #200]	; (8001f74 <HAL_I2S_Init+0x278>)
 8001eac:	428a      	cmp	r2, r1
 8001eae:	d101      	bne.n	8001eb4 <HAL_I2S_Init+0x1b8>
 8001eb0:	4a31      	ldr	r2, [pc, #196]	; (8001f78 <HAL_I2S_Init+0x27c>)
 8001eb2:	e001      	b.n	8001eb8 <HAL_I2S_Init+0x1bc>
 8001eb4:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8001eb8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8001ebc:	f023 030f 	bic.w	r3, r3, #15
 8001ec0:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	4a2b      	ldr	r2, [pc, #172]	; (8001f74 <HAL_I2S_Init+0x278>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	d101      	bne.n	8001ed0 <HAL_I2S_Init+0x1d4>
 8001ecc:	4b2a      	ldr	r3, [pc, #168]	; (8001f78 <HAL_I2S_Init+0x27c>)
 8001ece:	e001      	b.n	8001ed4 <HAL_I2S_Init+0x1d8>
 8001ed0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001ed4:	2202      	movs	r2, #2
 8001ed6:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4a25      	ldr	r2, [pc, #148]	; (8001f74 <HAL_I2S_Init+0x278>)
 8001ede:	4293      	cmp	r3, r2
 8001ee0:	d101      	bne.n	8001ee6 <HAL_I2S_Init+0x1ea>
 8001ee2:	4b25      	ldr	r3, [pc, #148]	; (8001f78 <HAL_I2S_Init+0x27c>)
 8001ee4:	e001      	b.n	8001eea <HAL_I2S_Init+0x1ee>
 8001ee6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001eea:	69db      	ldr	r3, [r3, #28]
 8001eec:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef6:	d003      	beq.n	8001f00 <HAL_I2S_Init+0x204>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d103      	bne.n	8001f08 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8001f00:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f04:	613b      	str	r3, [r7, #16]
 8001f06:	e001      	b.n	8001f0c <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f16:	4313      	orrs	r3, r2
 8001f18:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	68db      	ldr	r3, [r3, #12]
 8001f1e:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f20:	4313      	orrs	r3, r2
 8001f22:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8001f2a:	4313      	orrs	r3, r2
 8001f2c:	b29a      	uxth	r2, r3
 8001f2e:	897b      	ldrh	r3, [r7, #10]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	b29b      	uxth	r3, r3
 8001f34:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001f38:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a0d      	ldr	r2, [pc, #52]	; (8001f74 <HAL_I2S_Init+0x278>)
 8001f40:	4293      	cmp	r3, r2
 8001f42:	d101      	bne.n	8001f48 <HAL_I2S_Init+0x24c>
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <HAL_I2S_Init+0x27c>)
 8001f46:	e001      	b.n	8001f4c <HAL_I2S_Init+0x250>
 8001f48:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8001f4c:	897a      	ldrh	r2, [r7, #10]
 8001f4e:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	2201      	movs	r2, #1
 8001f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3720      	adds	r7, #32
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	08002073 	.word	0x08002073
 8001f6c:	cccccccd 	.word	0xcccccccd
 8001f70:	08002189 	.word	0x08002189
 8001f74:	40003800 	.word	0x40003800
 8001f78:	40003400 	.word	0x40003400

08001f7c <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	b083      	sub	sp, #12
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 8001f84:	bf00      	nop
 8001f86:	370c      	adds	r7, #12
 8001f88:	46bd      	mov	sp, r7
 8001f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8e:	4770      	bx	lr

08001f90 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b083      	sub	sp, #12
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	b083      	sub	sp, #12
 8001fa8:	af00      	add	r7, sp, #0
 8001faa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8001fac:	bf00      	nop
 8001fae:	370c      	adds	r7, #12
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb6:	4770      	bx	lr

08001fb8 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b082      	sub	sp, #8
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	881a      	ldrh	r2, [r3, #0]
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd0:	1c9a      	adds	r2, r3, #2
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fda:	b29b      	uxth	r3, r3
 8001fdc:	3b01      	subs	r3, #1
 8001fde:	b29a      	uxth	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001fe8:	b29b      	uxth	r3, r3
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d10e      	bne.n	800200c <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	685a      	ldr	r2, [r3, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8001ffc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2201      	movs	r2, #1
 8002002:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ffb8 	bl	8001f7c <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800200c:	bf00      	nop
 800200e:	3708      	adds	r7, #8
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}

08002014 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	68da      	ldr	r2, [r3, #12]
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002026:	b292      	uxth	r2, r2
 8002028:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800202e:	1c9a      	adds	r2, r3, #2
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002038:	b29b      	uxth	r3, r3
 800203a:	3b01      	subs	r3, #1
 800203c:	b29a      	uxth	r2, r3
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002046:	b29b      	uxth	r3, r3
 8002048:	2b00      	cmp	r3, #0
 800204a:	d10e      	bne.n	800206a <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685a      	ldr	r2, [r3, #4]
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800205a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	2201      	movs	r2, #1
 8002060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002064:	6878      	ldr	r0, [r7, #4]
 8002066:	f7ff ff93 	bl	8001f90 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 800206a:	bf00      	nop
 800206c:	3708      	adds	r7, #8
 800206e:	46bd      	mov	sp, r7
 8002070:	bd80      	pop	{r7, pc}

08002072 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002072:	b580      	push	{r7, lr}
 8002074:	b086      	sub	sp, #24
 8002076:	af00      	add	r7, sp, #0
 8002078:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b04      	cmp	r3, #4
 800208c:	d13a      	bne.n	8002104 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 800208e:	697b      	ldr	r3, [r7, #20]
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	2b01      	cmp	r3, #1
 8002096:	d109      	bne.n	80020ac <I2S_IRQHandler+0x3a>
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	685b      	ldr	r3, [r3, #4]
 800209e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020a2:	2b40      	cmp	r3, #64	; 0x40
 80020a4:	d102      	bne.n	80020ac <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f7ff ffb4 	bl	8002014 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020b2:	2b40      	cmp	r3, #64	; 0x40
 80020b4:	d126      	bne.n	8002104 <I2S_IRQHandler+0x92>
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	f003 0320 	and.w	r3, r3, #32
 80020c0:	2b20      	cmp	r3, #32
 80020c2:	d11f      	bne.n	8002104 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	685a      	ldr	r2, [r3, #4]
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80020d2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80020d4:	2300      	movs	r3, #0
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	68db      	ldr	r3, [r3, #12]
 80020de:	613b      	str	r3, [r7, #16]
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	689b      	ldr	r3, [r3, #8]
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2201      	movs	r2, #1
 80020ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	f043 0202 	orr.w	r2, r3, #2
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7ff ff50 	bl	8001fa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b03      	cmp	r3, #3
 800210e:	d136      	bne.n	800217e <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002110:	697b      	ldr	r3, [r7, #20]
 8002112:	f003 0302 	and.w	r3, r3, #2
 8002116:	2b02      	cmp	r3, #2
 8002118:	d109      	bne.n	800212e <I2S_IRQHandler+0xbc>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002124:	2b80      	cmp	r3, #128	; 0x80
 8002126:	d102      	bne.n	800212e <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	f7ff ff45 	bl	8001fb8 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	f003 0308 	and.w	r3, r3, #8
 8002134:	2b08      	cmp	r3, #8
 8002136:	d122      	bne.n	800217e <I2S_IRQHandler+0x10c>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	685b      	ldr	r3, [r3, #4]
 800213e:	f003 0320 	and.w	r3, r3, #32
 8002142:	2b20      	cmp	r3, #32
 8002144:	d11b      	bne.n	800217e <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	685a      	ldr	r2, [r3, #4]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002154:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	689b      	ldr	r3, [r3, #8]
 8002160:	60fb      	str	r3, [r7, #12]
 8002162:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002170:	f043 0204 	orr.w	r2, r3, #4
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002178:	6878      	ldr	r0, [r7, #4]
 800217a:	f7ff ff13 	bl	8001fa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800217e:	bf00      	nop
 8002180:	3718      	adds	r7, #24
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
	...

08002188 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b088      	sub	sp, #32
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	4a92      	ldr	r2, [pc, #584]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d101      	bne.n	80021a6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80021a2:	4b92      	ldr	r3, [pc, #584]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021a4:	e001      	b.n	80021aa <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80021a6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	4a8b      	ldr	r2, [pc, #556]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80021bc:	4293      	cmp	r3, r2
 80021be:	d101      	bne.n	80021c4 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 80021c0:	4b8a      	ldr	r3, [pc, #552]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80021c2:	e001      	b.n	80021c8 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 80021c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80021c8:	685b      	ldr	r3, [r3, #4]
 80021ca:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021d4:	d004      	beq.n	80021e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f040 8099 	bne.w	8002312 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 80021e0:	69fb      	ldr	r3, [r7, #28]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b02      	cmp	r3, #2
 80021e8:	d107      	bne.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d002      	beq.n	80021fa <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 f925 	bl	8002444 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 80021fa:	69bb      	ldr	r3, [r7, #24]
 80021fc:	f003 0301 	and.w	r3, r3, #1
 8002200:	2b01      	cmp	r3, #1
 8002202:	d107      	bne.n	8002214 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800220a:	2b00      	cmp	r3, #0
 800220c:	d002      	beq.n	8002214 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 f9c8 	bl	80025a4 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002214:	69bb      	ldr	r3, [r7, #24]
 8002216:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800221a:	2b40      	cmp	r3, #64	; 0x40
 800221c:	d13a      	bne.n	8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f003 0320 	and.w	r3, r3, #32
 8002224:	2b00      	cmp	r3, #0
 8002226:	d035      	beq.n	8002294 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a6e      	ldr	r2, [pc, #440]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d101      	bne.n	8002236 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002232:	4b6e      	ldr	r3, [pc, #440]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002234:	e001      	b.n	800223a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002236:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800223a:	685a      	ldr	r2, [r3, #4]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4969      	ldr	r1, [pc, #420]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002242:	428b      	cmp	r3, r1
 8002244:	d101      	bne.n	800224a <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002246:	4b69      	ldr	r3, [pc, #420]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002248:	e001      	b.n	800224e <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800224a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800224e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002252:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002262:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002264:	2300      	movs	r3, #0
 8002266:	60fb      	str	r3, [r7, #12]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	60fb      	str	r3, [r7, #12]
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	60fb      	str	r3, [r7, #12]
 8002278:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f043 0202 	orr.w	r2, r3, #2
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800228e:	6878      	ldr	r0, [r7, #4]
 8002290:	f7ff fe88 	bl	8001fa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	f003 0308 	and.w	r3, r3, #8
 800229a:	2b08      	cmp	r3, #8
 800229c:	f040 80c3 	bne.w	8002426 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	f003 0320 	and.w	r3, r3, #32
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	f000 80bd 	beq.w	8002426 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	685a      	ldr	r2, [r3, #4]
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80022ba:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a49      	ldr	r2, [pc, #292]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022c2:	4293      	cmp	r3, r2
 80022c4:	d101      	bne.n	80022ca <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 80022c6:	4b49      	ldr	r3, [pc, #292]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022c8:	e001      	b.n	80022ce <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 80022ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022ce:	685a      	ldr	r2, [r3, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4944      	ldr	r1, [pc, #272]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80022d6:	428b      	cmp	r3, r1
 80022d8:	d101      	bne.n	80022de <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 80022da:	4b44      	ldr	r3, [pc, #272]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80022dc:	e001      	b.n	80022e2 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 80022de:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80022e2:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80022e6:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	689b      	ldr	r3, [r3, #8]
 80022f2:	60bb      	str	r3, [r7, #8]
 80022f4:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	2201      	movs	r2, #1
 80022fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002302:	f043 0204 	orr.w	r2, r3, #4
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800230a:	6878      	ldr	r0, [r7, #4]
 800230c:	f7ff fe4a 	bl	8001fa4 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002310:	e089      	b.n	8002426 <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002312:	69bb      	ldr	r3, [r7, #24]
 8002314:	f003 0302 	and.w	r3, r3, #2
 8002318:	2b02      	cmp	r3, #2
 800231a:	d107      	bne.n	800232c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 800231c:	693b      	ldr	r3, [r7, #16]
 800231e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002326:	6878      	ldr	r0, [r7, #4]
 8002328:	f000 f8be 	bl	80024a8 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 800232c:	69fb      	ldr	r3, [r7, #28]
 800232e:	f003 0301 	and.w	r3, r3, #1
 8002332:	2b01      	cmp	r3, #1
 8002334:	d107      	bne.n	8002346 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8fd 	bl	8002540 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002346:	69fb      	ldr	r3, [r7, #28]
 8002348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800234c:	2b40      	cmp	r3, #64	; 0x40
 800234e:	d12f      	bne.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002350:	697b      	ldr	r3, [r7, #20]
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	2b00      	cmp	r3, #0
 8002358:	d02a      	beq.n	80023b0 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	685a      	ldr	r2, [r3, #4]
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002368:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a1e      	ldr	r2, [pc, #120]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002370:	4293      	cmp	r3, r2
 8002372:	d101      	bne.n	8002378 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8002376:	e001      	b.n	800237c <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002378:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800237c:	685a      	ldr	r2, [r3, #4]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4919      	ldr	r1, [pc, #100]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8002384:	428b      	cmp	r3, r1
 8002386:	d101      	bne.n	800238c <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800238a:	e001      	b.n	8002390 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 800238c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002390:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002394:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	2201      	movs	r2, #1
 800239a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a2:	f043 0202 	orr.w	r2, r3, #2
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff fdfa 	bl	8001fa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	f003 0308 	and.w	r3, r3, #8
 80023b6:	2b08      	cmp	r3, #8
 80023b8:	d136      	bne.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f003 0320 	and.w	r3, r3, #32
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d031      	beq.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a07      	ldr	r2, [pc, #28]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d101      	bne.n	80023d2 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 80023ce:	4b07      	ldr	r3, [pc, #28]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023d0:	e001      	b.n	80023d6 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 80023d2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	4902      	ldr	r1, [pc, #8]	; (80023e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80023de:	428b      	cmp	r3, r1
 80023e0:	d106      	bne.n	80023f0 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 80023e2:	4b02      	ldr	r3, [pc, #8]	; (80023ec <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80023e4:	e006      	b.n	80023f4 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 80023e6:	bf00      	nop
 80023e8:	40003800 	.word	0x40003800
 80023ec:	40003400 	.word	0x40003400
 80023f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80023f4:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80023f8:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	685a      	ldr	r2, [r3, #4]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002408:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	f043 0204 	orr.w	r2, r3, #4
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff fdc0 	bl	8001fa4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002424:	e000      	b.n	8002428 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002426:	bf00      	nop
}
 8002428:	bf00      	nop
 800242a:	3720      	adds	r7, #32
 800242c:	46bd      	mov	sp, r7
 800242e:	bd80      	pop	{r7, pc}

08002430 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8002438:	bf00      	nop
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002450:	1c99      	adds	r1, r3, #2
 8002452:	687a      	ldr	r2, [r7, #4]
 8002454:	6251      	str	r1, [r2, #36]	; 0x24
 8002456:	881a      	ldrh	r2, [r3, #0]
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002462:	b29b      	uxth	r3, r3
 8002464:	3b01      	subs	r3, #1
 8002466:	b29a      	uxth	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002470:	b29b      	uxth	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d113      	bne.n	800249e <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	685a      	ldr	r2, [r3, #4]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002484:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800248a:	b29b      	uxth	r3, r3
 800248c:	2b00      	cmp	r3, #0
 800248e:	d106      	bne.n	800249e <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002498:	6878      	ldr	r0, [r7, #4]
 800249a:	f7ff ffc9 	bl	8002430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800249e:	bf00      	nop
 80024a0:	3708      	adds	r7, #8
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
	...

080024a8 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80024a8:	b580      	push	{r7, lr}
 80024aa:	b082      	sub	sp, #8
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c99      	adds	r1, r3, #2
 80024b6:	687a      	ldr	r2, [r7, #4]
 80024b8:	6251      	str	r1, [r2, #36]	; 0x24
 80024ba:	8819      	ldrh	r1, [r3, #0]
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a1d      	ldr	r2, [pc, #116]	; (8002538 <I2SEx_TxISR_I2SExt+0x90>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d101      	bne.n	80024ca <I2SEx_TxISR_I2SExt+0x22>
 80024c6:	4b1d      	ldr	r3, [pc, #116]	; (800253c <I2SEx_TxISR_I2SExt+0x94>)
 80024c8:	e001      	b.n	80024ce <I2SEx_TxISR_I2SExt+0x26>
 80024ca:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024ce:	460a      	mov	r2, r1
 80024d0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024d6:	b29b      	uxth	r3, r3
 80024d8:	3b01      	subs	r3, #1
 80024da:	b29a      	uxth	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024e4:	b29b      	uxth	r3, r3
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d121      	bne.n	800252e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	4a12      	ldr	r2, [pc, #72]	; (8002538 <I2SEx_TxISR_I2SExt+0x90>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d101      	bne.n	80024f8 <I2SEx_TxISR_I2SExt+0x50>
 80024f4:	4b11      	ldr	r3, [pc, #68]	; (800253c <I2SEx_TxISR_I2SExt+0x94>)
 80024f6:	e001      	b.n	80024fc <I2SEx_TxISR_I2SExt+0x54>
 80024f8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80024fc:	685a      	ldr	r2, [r3, #4]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <I2SEx_TxISR_I2SExt+0x90>)
 8002504:	428b      	cmp	r3, r1
 8002506:	d101      	bne.n	800250c <I2SEx_TxISR_I2SExt+0x64>
 8002508:	4b0c      	ldr	r3, [pc, #48]	; (800253c <I2SEx_TxISR_I2SExt+0x94>)
 800250a:	e001      	b.n	8002510 <I2SEx_TxISR_I2SExt+0x68>
 800250c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002510:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002514:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800251a:	b29b      	uxth	r3, r3
 800251c:	2b00      	cmp	r3, #0
 800251e:	d106      	bne.n	800252e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2201      	movs	r2, #1
 8002524:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002528:	6878      	ldr	r0, [r7, #4]
 800252a:	f7ff ff81 	bl	8002430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800252e:	bf00      	nop
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bd80      	pop	{r7, pc}
 8002536:	bf00      	nop
 8002538:	40003800 	.word	0x40003800
 800253c:	40003400 	.word	0x40003400

08002540 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b082      	sub	sp, #8
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68d8      	ldr	r0, [r3, #12]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002552:	1c99      	adds	r1, r3, #2
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	62d1      	str	r1, [r2, #44]	; 0x2c
 8002558:	b282      	uxth	r2, r0
 800255a:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002560:	b29b      	uxth	r3, r3
 8002562:	3b01      	subs	r3, #1
 8002564:	b29a      	uxth	r2, r3
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800256e:	b29b      	uxth	r3, r3
 8002570:	2b00      	cmp	r3, #0
 8002572:	d113      	bne.n	800259c <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002582:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002588:	b29b      	uxth	r3, r3
 800258a:	2b00      	cmp	r3, #0
 800258c:	d106      	bne.n	800259c <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	2201      	movs	r2, #1
 8002592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	f7ff ff4a 	bl	8002430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800259c:	bf00      	nop
 800259e:	3708      	adds	r7, #8
 80025a0:	46bd      	mov	sp, r7
 80025a2:	bd80      	pop	{r7, pc}

080025a4 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b082      	sub	sp, #8
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a20      	ldr	r2, [pc, #128]	; (8002634 <I2SEx_RxISR_I2SExt+0x90>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d101      	bne.n	80025ba <I2SEx_RxISR_I2SExt+0x16>
 80025b6:	4b20      	ldr	r3, [pc, #128]	; (8002638 <I2SEx_RxISR_I2SExt+0x94>)
 80025b8:	e001      	b.n	80025be <I2SEx_RxISR_I2SExt+0x1a>
 80025ba:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025be:	68d8      	ldr	r0, [r3, #12]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c4:	1c99      	adds	r1, r3, #2
 80025c6:	687a      	ldr	r2, [r7, #4]
 80025c8:	62d1      	str	r1, [r2, #44]	; 0x2c
 80025ca:	b282      	uxth	r2, r0
 80025cc:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025d2:	b29b      	uxth	r3, r3
 80025d4:	3b01      	subs	r3, #1
 80025d6:	b29a      	uxth	r2, r3
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025e0:	b29b      	uxth	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d121      	bne.n	800262a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4a12      	ldr	r2, [pc, #72]	; (8002634 <I2SEx_RxISR_I2SExt+0x90>)
 80025ec:	4293      	cmp	r3, r2
 80025ee:	d101      	bne.n	80025f4 <I2SEx_RxISR_I2SExt+0x50>
 80025f0:	4b11      	ldr	r3, [pc, #68]	; (8002638 <I2SEx_RxISR_I2SExt+0x94>)
 80025f2:	e001      	b.n	80025f8 <I2SEx_RxISR_I2SExt+0x54>
 80025f4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80025f8:	685a      	ldr	r2, [r3, #4]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	490d      	ldr	r1, [pc, #52]	; (8002634 <I2SEx_RxISR_I2SExt+0x90>)
 8002600:	428b      	cmp	r3, r1
 8002602:	d101      	bne.n	8002608 <I2SEx_RxISR_I2SExt+0x64>
 8002604:	4b0c      	ldr	r3, [pc, #48]	; (8002638 <I2SEx_RxISR_I2SExt+0x94>)
 8002606:	e001      	b.n	800260c <I2SEx_RxISR_I2SExt+0x68>
 8002608:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800260c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002610:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002616:	b29b      	uxth	r3, r3
 8002618:	2b00      	cmp	r3, #0
 800261a:	d106      	bne.n	800262a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	2201      	movs	r2, #1
 8002620:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f7ff ff03 	bl	8002430 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800262a:	bf00      	nop
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40003800 	.word	0x40003800
 8002638:	40003400 	.word	0x40003400

0800263c <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	b08f      	sub	sp, #60	; 0x3c
 8002640:	af0a      	add	r7, sp, #40	; 0x28
 8002642:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	2b00      	cmp	r3, #0
 8002648:	d101      	bne.n	800264e <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e10f      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800265a:	b2db      	uxtb	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	d106      	bne.n	800266e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2200      	movs	r2, #0
 8002664:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002668:	6878      	ldr	r0, [r7, #4]
 800266a:	f006 fee1 	bl	8009430 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	2203      	movs	r2, #3
 8002672:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800267a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800267e:	2b00      	cmp	r3, #0
 8002680:	d102      	bne.n	8002688 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4618      	mov	r0, r3
 800268e:	f003 f9aa 	bl	80059e6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	603b      	str	r3, [r7, #0]
 8002698:	687e      	ldr	r6, [r7, #4]
 800269a:	466d      	mov	r5, sp
 800269c:	f106 0410 	add.w	r4, r6, #16
 80026a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80026b0:	1d33      	adds	r3, r6, #4
 80026b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80026b4:	6838      	ldr	r0, [r7, #0]
 80026b6:	f003 f881 	bl	80057bc <USB_CoreInit>
 80026ba:	4603      	mov	r3, r0
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d005      	beq.n	80026cc <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	2202      	movs	r2, #2
 80026c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e0d0      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	2100      	movs	r1, #0
 80026d2:	4618      	mov	r0, r3
 80026d4:	f003 f998 	bl	8005a08 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d8:	2300      	movs	r3, #0
 80026da:	73fb      	strb	r3, [r7, #15]
 80026dc:	e04a      	b.n	8002774 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80026de:	7bfa      	ldrb	r2, [r7, #15]
 80026e0:	6879      	ldr	r1, [r7, #4]
 80026e2:	4613      	mov	r3, r2
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	4413      	add	r3, r2
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	440b      	add	r3, r1
 80026ec:	333d      	adds	r3, #61	; 0x3d
 80026ee:	2201      	movs	r2, #1
 80026f0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	333c      	adds	r3, #60	; 0x3c
 8002702:	7bfa      	ldrb	r2, [r7, #15]
 8002704:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002706:	7bfa      	ldrb	r2, [r7, #15]
 8002708:	7bfb      	ldrb	r3, [r7, #15]
 800270a:	b298      	uxth	r0, r3
 800270c:	6879      	ldr	r1, [r7, #4]
 800270e:	4613      	mov	r3, r2
 8002710:	00db      	lsls	r3, r3, #3
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	440b      	add	r3, r1
 8002718:	3344      	adds	r3, #68	; 0x44
 800271a:	4602      	mov	r2, r0
 800271c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800271e:	7bfa      	ldrb	r2, [r7, #15]
 8002720:	6879      	ldr	r1, [r7, #4]
 8002722:	4613      	mov	r3, r2
 8002724:	00db      	lsls	r3, r3, #3
 8002726:	4413      	add	r3, r2
 8002728:	009b      	lsls	r3, r3, #2
 800272a:	440b      	add	r3, r1
 800272c:	3340      	adds	r3, #64	; 0x40
 800272e:	2200      	movs	r2, #0
 8002730:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002732:	7bfa      	ldrb	r2, [r7, #15]
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	4613      	mov	r3, r2
 8002738:	00db      	lsls	r3, r3, #3
 800273a:	4413      	add	r3, r2
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	440b      	add	r3, r1
 8002740:	3348      	adds	r3, #72	; 0x48
 8002742:	2200      	movs	r2, #0
 8002744:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002746:	7bfa      	ldrb	r2, [r7, #15]
 8002748:	6879      	ldr	r1, [r7, #4]
 800274a:	4613      	mov	r3, r2
 800274c:	00db      	lsls	r3, r3, #3
 800274e:	4413      	add	r3, r2
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	440b      	add	r3, r1
 8002754:	334c      	adds	r3, #76	; 0x4c
 8002756:	2200      	movs	r2, #0
 8002758:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800275a:	7bfa      	ldrb	r2, [r7, #15]
 800275c:	6879      	ldr	r1, [r7, #4]
 800275e:	4613      	mov	r3, r2
 8002760:	00db      	lsls	r3, r3, #3
 8002762:	4413      	add	r3, r2
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	440b      	add	r3, r1
 8002768:	3354      	adds	r3, #84	; 0x54
 800276a:	2200      	movs	r2, #0
 800276c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800276e:	7bfb      	ldrb	r3, [r7, #15]
 8002770:	3301      	adds	r3, #1
 8002772:	73fb      	strb	r3, [r7, #15]
 8002774:	7bfa      	ldrb	r2, [r7, #15]
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	685b      	ldr	r3, [r3, #4]
 800277a:	429a      	cmp	r2, r3
 800277c:	d3af      	bcc.n	80026de <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
 8002782:	e044      	b.n	800280e <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002784:	7bfa      	ldrb	r2, [r7, #15]
 8002786:	6879      	ldr	r1, [r7, #4]
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	440b      	add	r3, r1
 8002792:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002796:	2200      	movs	r2, #0
 8002798:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800279a:	7bfa      	ldrb	r2, [r7, #15]
 800279c:	6879      	ldr	r1, [r7, #4]
 800279e:	4613      	mov	r3, r2
 80027a0:	00db      	lsls	r3, r3, #3
 80027a2:	4413      	add	r3, r2
 80027a4:	009b      	lsls	r3, r3, #2
 80027a6:	440b      	add	r3, r1
 80027a8:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80027ac:	7bfa      	ldrb	r2, [r7, #15]
 80027ae:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80027b0:	7bfa      	ldrb	r2, [r7, #15]
 80027b2:	6879      	ldr	r1, [r7, #4]
 80027b4:	4613      	mov	r3, r2
 80027b6:	00db      	lsls	r3, r3, #3
 80027b8:	4413      	add	r3, r2
 80027ba:	009b      	lsls	r3, r3, #2
 80027bc:	440b      	add	r3, r1
 80027be:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80027c2:	2200      	movs	r2, #0
 80027c4:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80027c6:	7bfa      	ldrb	r2, [r7, #15]
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	4613      	mov	r3, r2
 80027cc:	00db      	lsls	r3, r3, #3
 80027ce:	4413      	add	r3, r2
 80027d0:	009b      	lsls	r3, r3, #2
 80027d2:	440b      	add	r3, r1
 80027d4:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80027d8:	2200      	movs	r2, #0
 80027da:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80027dc:	7bfa      	ldrb	r2, [r7, #15]
 80027de:	6879      	ldr	r1, [r7, #4]
 80027e0:	4613      	mov	r3, r2
 80027e2:	00db      	lsls	r3, r3, #3
 80027e4:	4413      	add	r3, r2
 80027e6:	009b      	lsls	r3, r3, #2
 80027e8:	440b      	add	r3, r1
 80027ea:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80027ee:	2200      	movs	r2, #0
 80027f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80027f2:	7bfa      	ldrb	r2, [r7, #15]
 80027f4:	6879      	ldr	r1, [r7, #4]
 80027f6:	4613      	mov	r3, r2
 80027f8:	00db      	lsls	r3, r3, #3
 80027fa:	4413      	add	r3, r2
 80027fc:	009b      	lsls	r3, r3, #2
 80027fe:	440b      	add	r3, r1
 8002800:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002808:	7bfb      	ldrb	r3, [r7, #15]
 800280a:	3301      	adds	r3, #1
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	7bfa      	ldrb	r2, [r7, #15]
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	429a      	cmp	r2, r3
 8002816:	d3b5      	bcc.n	8002784 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	603b      	str	r3, [r7, #0]
 800281e:	687e      	ldr	r6, [r7, #4]
 8002820:	466d      	mov	r5, sp
 8002822:	f106 0410 	add.w	r4, r6, #16
 8002826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800282c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800282e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002832:	e885 0003 	stmia.w	r5, {r0, r1}
 8002836:	1d33      	adds	r3, r6, #4
 8002838:	cb0e      	ldmia	r3, {r1, r2, r3}
 800283a:	6838      	ldr	r0, [r7, #0]
 800283c:	f003 f930 	bl	8005aa0 <USB_DevInit>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d005      	beq.n	8002852 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2202      	movs	r2, #2
 800284a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	e00d      	b.n	800286e <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2201      	movs	r2, #1
 800285e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f004 fa7f 	bl	8006d6a <USB_DevDisconnect>

  return HAL_OK;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002876 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002876:	b580      	push	{r7, lr}
 8002878:	b084      	sub	sp, #16
 800287a:	af00      	add	r7, sp, #0
 800287c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800288a:	2b01      	cmp	r3, #1
 800288c:	d101      	bne.n	8002892 <HAL_PCD_Start+0x1c>
 800288e:	2302      	movs	r3, #2
 8002890:	e020      	b.n	80028d4 <HAL_PCD_Start+0x5e>
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	2201      	movs	r2, #1
 8002896:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800289e:	2b01      	cmp	r3, #1
 80028a0:	d109      	bne.n	80028b6 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d005      	beq.n	80028b6 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028ae:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	4618      	mov	r0, r3
 80028bc:	f003 f882 	bl	80059c4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	4618      	mov	r0, r3
 80028c6:	f004 fa2f 	bl	8006d28 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80028d2:	2300      	movs	r3, #0
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3710      	adds	r7, #16
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}

080028dc <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80028dc:	b590      	push	{r4, r7, lr}
 80028de:	b08d      	sub	sp, #52	; 0x34
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028ea:	6a3b      	ldr	r3, [r7, #32]
 80028ec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f004 faed 	bl	8006ed2 <USB_GetMode>
 80028f8:	4603      	mov	r3, r0
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	f040 848a 	bne.w	8003214 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4618      	mov	r0, r3
 8002906:	f004 fa51 	bl	8006dac <USB_ReadInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	f000 8480 	beq.w	8003212 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002918:	689b      	ldr	r3, [r3, #8]
 800291a:	0a1b      	lsrs	r3, r3, #8
 800291c:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4618      	mov	r0, r3
 800292c:	f004 fa3e 	bl	8006dac <USB_ReadInterrupts>
 8002930:	4603      	mov	r3, r0
 8002932:	f003 0302 	and.w	r3, r3, #2
 8002936:	2b02      	cmp	r3, #2
 8002938:	d107      	bne.n	800294a <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	695a      	ldr	r2, [r3, #20]
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	f002 0202 	and.w	r2, r2, #2
 8002948:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4618      	mov	r0, r3
 8002950:	f004 fa2c 	bl	8006dac <USB_ReadInterrupts>
 8002954:	4603      	mov	r3, r0
 8002956:	f003 0310 	and.w	r3, r3, #16
 800295a:	2b10      	cmp	r3, #16
 800295c:	d161      	bne.n	8002a22 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	699a      	ldr	r2, [r3, #24]
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	f022 0210 	bic.w	r2, r2, #16
 800296c:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800296e:	6a3b      	ldr	r3, [r7, #32]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002974:	69bb      	ldr	r3, [r7, #24]
 8002976:	f003 020f 	and.w	r2, r3, #15
 800297a:	4613      	mov	r3, r2
 800297c:	00db      	lsls	r3, r3, #3
 800297e:	4413      	add	r3, r2
 8002980:	009b      	lsls	r3, r3, #2
 8002982:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	4413      	add	r3, r2
 800298a:	3304      	adds	r3, #4
 800298c:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800298e:	69bb      	ldr	r3, [r7, #24]
 8002990:	0c5b      	lsrs	r3, r3, #17
 8002992:	f003 030f 	and.w	r3, r3, #15
 8002996:	2b02      	cmp	r3, #2
 8002998:	d124      	bne.n	80029e4 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800299a:	69ba      	ldr	r2, [r7, #24]
 800299c:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d035      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	091b      	lsrs	r3, r3, #4
 80029ae:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 80029b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029b4:	b29b      	uxth	r3, r3
 80029b6:	461a      	mov	r2, r3
 80029b8:	6a38      	ldr	r0, [r7, #32]
 80029ba:	f004 f863 	bl	8006a84 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	691a      	ldr	r2, [r3, #16]
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029ca:	441a      	add	r2, r3
 80029cc:	697b      	ldr	r3, [r7, #20]
 80029ce:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80029d0:	697b      	ldr	r3, [r7, #20]
 80029d2:	6a1a      	ldr	r2, [r3, #32]
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	091b      	lsrs	r3, r3, #4
 80029d8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80029dc:	441a      	add	r2, r3
 80029de:	697b      	ldr	r3, [r7, #20]
 80029e0:	621a      	str	r2, [r3, #32]
 80029e2:	e016      	b.n	8002a12 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80029e4:	69bb      	ldr	r3, [r7, #24]
 80029e6:	0c5b      	lsrs	r3, r3, #17
 80029e8:	f003 030f 	and.w	r3, r3, #15
 80029ec:	2b06      	cmp	r3, #6
 80029ee:	d110      	bne.n	8002a12 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029f6:	2208      	movs	r2, #8
 80029f8:	4619      	mov	r1, r3
 80029fa:	6a38      	ldr	r0, [r7, #32]
 80029fc:	f004 f842 	bl	8006a84 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a00:	697b      	ldr	r3, [r7, #20]
 8002a02:	6a1a      	ldr	r2, [r3, #32]
 8002a04:	69bb      	ldr	r3, [r7, #24]
 8002a06:	091b      	lsrs	r3, r3, #4
 8002a08:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a0c:	441a      	add	r2, r3
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	699a      	ldr	r2, [r3, #24]
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	f042 0210 	orr.w	r2, r2, #16
 8002a20:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	4618      	mov	r0, r3
 8002a28:	f004 f9c0 	bl	8006dac <USB_ReadInterrupts>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a32:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002a36:	f040 80a7 	bne.w	8002b88 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	4618      	mov	r0, r3
 8002a44:	f004 f9c5 	bl	8006dd2 <USB_ReadDevAllOutEpInterrupt>
 8002a48:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002a4a:	e099      	b.n	8002b80 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	f003 0301 	and.w	r3, r3, #1
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	f000 808e 	beq.w	8002b74 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a5e:	b2d2      	uxtb	r2, r2
 8002a60:	4611      	mov	r1, r2
 8002a62:	4618      	mov	r0, r3
 8002a64:	f004 f9e9 	bl	8006e3a <USB_ReadDevOutEPInterrupt>
 8002a68:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002a6a:	693b      	ldr	r3, [r7, #16]
 8002a6c:	f003 0301 	and.w	r3, r3, #1
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00c      	beq.n	8002a8e <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002a74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69fb      	ldr	r3, [r7, #28]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a80:	461a      	mov	r2, r3
 8002a82:	2301      	movs	r3, #1
 8002a84:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002a86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f000 fec3 	bl	8003814 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	f003 0308 	and.w	r3, r3, #8
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d00c      	beq.n	8002ab2 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	015a      	lsls	r2, r3, #5
 8002a9c:	69fb      	ldr	r3, [r7, #28]
 8002a9e:	4413      	add	r3, r2
 8002aa0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2308      	movs	r3, #8
 8002aa8:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002aaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002aac:	6878      	ldr	r0, [r7, #4]
 8002aae:	f000 ff99 	bl	80039e4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002ab2:	693b      	ldr	r3, [r7, #16]
 8002ab4:	f003 0310 	and.w	r3, r3, #16
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002abe:	015a      	lsls	r2, r3, #5
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	4413      	add	r3, r2
 8002ac4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ac8:	461a      	mov	r2, r3
 8002aca:	2310      	movs	r3, #16
 8002acc:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d030      	beq.n	8002b3a <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	695b      	ldr	r3, [r3, #20]
 8002adc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ae0:	2b80      	cmp	r3, #128	; 0x80
 8002ae2:	d109      	bne.n	8002af8 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	69fa      	ldr	r2, [r7, #28]
 8002aee:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002af2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002af6:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b06:	687a      	ldr	r2, [r7, #4]
 8002b08:	4413      	add	r3, r2
 8002b0a:	3304      	adds	r3, #4
 8002b0c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002b0e:	697b      	ldr	r3, [r7, #20]
 8002b10:	78db      	ldrb	r3, [r3, #3]
 8002b12:	2b01      	cmp	r3, #1
 8002b14:	d108      	bne.n	8002b28 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002b16:	697b      	ldr	r3, [r7, #20]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	4619      	mov	r1, r3
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f006 fd98 	bl	8009658 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	015a      	lsls	r2, r3, #5
 8002b2c:	69fb      	ldr	r3, [r7, #28]
 8002b2e:	4413      	add	r3, r2
 8002b30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b34:	461a      	mov	r2, r3
 8002b36:	2302      	movs	r3, #2
 8002b38:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002b3a:	693b      	ldr	r3, [r7, #16]
 8002b3c:	f003 0320 	and.w	r3, r3, #32
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d008      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b46:	015a      	lsls	r2, r3, #5
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	4413      	add	r3, r2
 8002b4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b50:	461a      	mov	r2, r3
 8002b52:	2320      	movs	r3, #32
 8002b54:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d009      	beq.n	8002b74 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002b72:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b76:	3301      	adds	r3, #1
 8002b78:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	085b      	lsrs	r3, r3, #1
 8002b7e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f47f af62 	bne.w	8002a4c <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f004 f90d 	bl	8006dac <USB_ReadInterrupts>
 8002b92:	4603      	mov	r3, r0
 8002b94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002b98:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002b9c:	f040 80db 	bne.w	8002d56 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	f004 f92e 	bl	8006e06 <USB_ReadDevAllInEpInterrupt>
 8002baa:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002bb0:	e0cd      	b.n	8002d4e <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002bb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	f000 80c2 	beq.w	8002d42 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	4611      	mov	r1, r2
 8002bc8:	4618      	mov	r0, r3
 8002bca:	f004 f954 	bl	8006e76 <USB_ReadDevInEPInterrupt>
 8002bce:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002bd0:	693b      	ldr	r3, [r7, #16]
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d057      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	f003 030f 	and.w	r3, r3, #15
 8002be0:	2201      	movs	r2, #1
 8002be2:	fa02 f303 	lsl.w	r3, r2, r3
 8002be6:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be8:	69fb      	ldr	r3, [r7, #28]
 8002bea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	43db      	mvns	r3, r3
 8002bf4:	69f9      	ldr	r1, [r7, #28]
 8002bf6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c00:	015a      	lsls	r2, r3, #5
 8002c02:	69fb      	ldr	r3, [r7, #28]
 8002c04:	4413      	add	r3, r2
 8002c06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c0a:	461a      	mov	r2, r3
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	691b      	ldr	r3, [r3, #16]
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d132      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002c18:	6879      	ldr	r1, [r7, #4]
 8002c1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1c:	4613      	mov	r3, r2
 8002c1e:	00db      	lsls	r3, r3, #3
 8002c20:	4413      	add	r3, r2
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	440b      	add	r3, r1
 8002c26:	334c      	adds	r3, #76	; 0x4c
 8002c28:	6819      	ldr	r1, [r3, #0]
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	4613      	mov	r3, r2
 8002c30:	00db      	lsls	r3, r3, #3
 8002c32:	4413      	add	r3, r2
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	4403      	add	r3, r0
 8002c38:	3348      	adds	r3, #72	; 0x48
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	4419      	add	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c42:	4613      	mov	r3, r2
 8002c44:	00db      	lsls	r3, r3, #3
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	4403      	add	r3, r0
 8002c4c:	334c      	adds	r3, #76	; 0x4c
 8002c4e:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d113      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x3a2>
 8002c56:	6879      	ldr	r1, [r7, #4]
 8002c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c5a:	4613      	mov	r3, r2
 8002c5c:	00db      	lsls	r3, r3, #3
 8002c5e:	4413      	add	r3, r2
 8002c60:	009b      	lsls	r3, r3, #2
 8002c62:	440b      	add	r3, r1
 8002c64:	3354      	adds	r3, #84	; 0x54
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d108      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	6818      	ldr	r0, [r3, #0]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c76:	461a      	mov	r2, r3
 8002c78:	2101      	movs	r1, #1
 8002c7a:	f004 f95b 	bl	8006f34 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c80:	b2db      	uxtb	r3, r3
 8002c82:	4619      	mov	r1, r3
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f006 fc62 	bl	800954e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0308 	and.w	r3, r3, #8
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d008      	beq.n	8002ca6 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	015a      	lsls	r2, r3, #5
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ca0:	461a      	mov	r2, r3
 8002ca2:	2308      	movs	r3, #8
 8002ca4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	f003 0310 	and.w	r3, r3, #16
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d008      	beq.n	8002cc2 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	2310      	movs	r3, #16
 8002cc0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d008      	beq.n	8002cde <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cce:	015a      	lsls	r2, r3, #5
 8002cd0:	69fb      	ldr	r3, [r7, #28]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cd8:	461a      	mov	r2, r3
 8002cda:	2340      	movs	r3, #64	; 0x40
 8002cdc:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	f003 0302 	and.w	r3, r3, #2
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d023      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cea:	6a38      	ldr	r0, [r7, #32]
 8002cec:	f003 f83c 	bl	8005d68 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002cf0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	4413      	add	r3, r2
 8002cf8:	009b      	lsls	r3, r3, #2
 8002cfa:	3338      	adds	r3, #56	; 0x38
 8002cfc:	687a      	ldr	r2, [r7, #4]
 8002cfe:	4413      	add	r3, r2
 8002d00:	3304      	adds	r3, #4
 8002d02:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d04:	697b      	ldr	r3, [r7, #20]
 8002d06:	78db      	ldrb	r3, [r3, #3]
 8002d08:	2b01      	cmp	r3, #1
 8002d0a:	d108      	bne.n	8002d1e <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	2200      	movs	r2, #0
 8002d10:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d14:	b2db      	uxtb	r3, r3
 8002d16:	4619      	mov	r1, r3
 8002d18:	6878      	ldr	r0, [r7, #4]
 8002d1a:	f006 fcaf 	bl	800967c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d20:	015a      	lsls	r2, r3, #5
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	4413      	add	r3, r2
 8002d26:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d2a:	461a      	mov	r2, r3
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002d30:	693b      	ldr	r3, [r7, #16]
 8002d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d003      	beq.n	8002d42 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002d3a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d3c:	6878      	ldr	r0, [r7, #4]
 8002d3e:	f000 fcdb 	bl	80036f8 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d44:	3301      	adds	r3, #1
 8002d46:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	f47f af2e 	bne.w	8002bb2 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f004 f826 	bl	8006dac <USB_ReadInterrupts>
 8002d60:	4603      	mov	r3, r0
 8002d62:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d66:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d6a:	d122      	bne.n	8002db2 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002d6c:	69fb      	ldr	r3, [r7, #28]
 8002d6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	69fa      	ldr	r2, [r7, #28]
 8002d76:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d7a:	f023 0301 	bic.w	r3, r3, #1
 8002d7e:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002d86:	2b01      	cmp	r3, #1
 8002d88:	d108      	bne.n	8002d9c <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2200      	movs	r2, #0
 8002d8e:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002d92:	2100      	movs	r1, #0
 8002d94:	6878      	ldr	r0, [r7, #4]
 8002d96:	f000 fec3 	bl	8003b20 <HAL_PCDEx_LPM_Callback>
 8002d9a:	e002      	b.n	8002da2 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f006 fc4d 	bl	800963c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	695a      	ldr	r2, [r3, #20]
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002db0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f003 fff8 	bl	8006dac <USB_ReadInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002dc2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002dc6:	d112      	bne.n	8002dee <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d102      	bne.n	8002dde <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002dd8:	6878      	ldr	r0, [r7, #4]
 8002dda:	f006 fc09 	bl	80095f0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	695a      	ldr	r2, [r3, #20]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002dec:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	4618      	mov	r0, r3
 8002df4:	f003 ffda 	bl	8006dac <USB_ReadInterrupts>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002dfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e02:	f040 80b7 	bne.w	8002f74 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f023 0301 	bic.w	r3, r3, #1
 8002e18:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	2110      	movs	r1, #16
 8002e20:	4618      	mov	r0, r3
 8002e22:	f002 ffa1 	bl	8005d68 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002e26:	2300      	movs	r3, #0
 8002e28:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002e2a:	e046      	b.n	8002eba <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e2e:	015a      	lsls	r2, r3, #5
 8002e30:	69fb      	ldr	r3, [r7, #28]
 8002e32:	4413      	add	r3, r2
 8002e34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e38:	461a      	mov	r2, r3
 8002e3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e3e:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e42:	015a      	lsls	r2, r3, #5
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	4413      	add	r3, r2
 8002e48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e50:	0151      	lsls	r1, r2, #5
 8002e52:	69fa      	ldr	r2, [r7, #28]
 8002e54:	440a      	add	r2, r1
 8002e56:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002e5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e62:	015a      	lsls	r2, r3, #5
 8002e64:	69fb      	ldr	r3, [r7, #28]
 8002e66:	4413      	add	r3, r2
 8002e68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002e72:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e76:	015a      	lsls	r2, r3, #5
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	4413      	add	r3, r2
 8002e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002e84:	0151      	lsls	r1, r2, #5
 8002e86:	69fa      	ldr	r2, [r7, #28]
 8002e88:	440a      	add	r2, r1
 8002e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002e8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002e92:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e96:	015a      	lsls	r2, r3, #5
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	4413      	add	r3, r2
 8002e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ea4:	0151      	lsls	r1, r2, #5
 8002ea6:	69fa      	ldr	r2, [r7, #28]
 8002ea8:	440a      	add	r2, r1
 8002eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002eae:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002eb2:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002eb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eb6:	3301      	adds	r3, #1
 8002eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	685b      	ldr	r3, [r3, #4]
 8002ebe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002ec0:	429a      	cmp	r2, r3
 8002ec2:	d3b3      	bcc.n	8002e2c <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002eca:	69db      	ldr	r3, [r3, #28]
 8002ecc:	69fa      	ldr	r2, [r7, #28]
 8002ece:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ed2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002ed6:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d016      	beq.n	8002f0e <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ee0:	69fb      	ldr	r3, [r7, #28]
 8002ee2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ee6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002eea:	69fa      	ldr	r2, [r7, #28]
 8002eec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ef0:	f043 030b 	orr.w	r3, r3, #11
 8002ef4:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002efe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f00:	69fa      	ldr	r2, [r7, #28]
 8002f02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f06:	f043 030b 	orr.w	r3, r3, #11
 8002f0a:	6453      	str	r3, [r2, #68]	; 0x44
 8002f0c:	e015      	b.n	8002f3a <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002f0e:	69fb      	ldr	r3, [r7, #28]
 8002f10:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f14:	695b      	ldr	r3, [r3, #20]
 8002f16:	69fa      	ldr	r2, [r7, #28]
 8002f18:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f1c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002f20:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002f24:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2c:	691b      	ldr	r3, [r3, #16]
 8002f2e:	69fa      	ldr	r2, [r7, #28]
 8002f30:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f34:	f043 030b 	orr.w	r3, r3, #11
 8002f38:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69fa      	ldr	r2, [r7, #28]
 8002f44:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f48:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002f4c:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6818      	ldr	r0, [r3, #0]
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	691b      	ldr	r3, [r3, #16]
 8002f56:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002f5e:	461a      	mov	r2, r3
 8002f60:	f003 ffe8 	bl	8006f34 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695a      	ldr	r2, [r3, #20]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002f72:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	4618      	mov	r0, r3
 8002f7a:	f003 ff17 	bl	8006dac <USB_ReadInterrupts>
 8002f7e:	4603      	mov	r3, r0
 8002f80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f88:	d124      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	4618      	mov	r0, r3
 8002f90:	f003 ffad 	bl	8006eee <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f002 ff62 	bl	8005e62 <USB_GetDevSpeed>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	461a      	mov	r2, r3
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681c      	ldr	r4, [r3, #0]
 8002faa:	f001 fa29 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8002fae:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002fb4:	b2db      	uxtb	r3, r3
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4620      	mov	r0, r4
 8002fba:	f002 fc61 	bl	8005880 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f006 faed 	bl	800959e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	695a      	ldr	r2, [r3, #20]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002fd2:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	4618      	mov	r0, r3
 8002fda:	f003 fee7 	bl	8006dac <USB_ReadInterrupts>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	f003 0308 	and.w	r3, r3, #8
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d10a      	bne.n	8002ffe <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002fe8:	6878      	ldr	r0, [r7, #4]
 8002fea:	f006 faca 	bl	8009582 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	695a      	ldr	r2, [r3, #20]
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f002 0208 	and.w	r2, r2, #8
 8002ffc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f003 fed2 	bl	8006dac <USB_ReadInterrupts>
 8003008:	4603      	mov	r3, r0
 800300a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800300e:	2b80      	cmp	r3, #128	; 0x80
 8003010:	d122      	bne.n	8003058 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003012:	6a3b      	ldr	r3, [r7, #32]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800301a:	6a3b      	ldr	r3, [r7, #32]
 800301c:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800301e:	2301      	movs	r3, #1
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
 8003022:	e014      	b.n	800304e <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003024:	6879      	ldr	r1, [r7, #4]
 8003026:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003028:	4613      	mov	r3, r2
 800302a:	00db      	lsls	r3, r3, #3
 800302c:	4413      	add	r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d105      	bne.n	8003048 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	b2db      	uxtb	r3, r3
 8003040:	4619      	mov	r1, r3
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	f000 fb27 	bl	8003696 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800304a:	3301      	adds	r3, #1
 800304c:	627b      	str	r3, [r7, #36]	; 0x24
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003054:	429a      	cmp	r2, r3
 8003056:	d3e5      	bcc.n	8003024 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4618      	mov	r0, r3
 800305e:	f003 fea5 	bl	8006dac <USB_ReadInterrupts>
 8003062:	4603      	mov	r3, r0
 8003064:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003068:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800306c:	d13b      	bne.n	80030e6 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800306e:	2301      	movs	r3, #1
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
 8003072:	e02b      	b.n	80030cc <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003084:	6879      	ldr	r1, [r7, #4]
 8003086:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003088:	4613      	mov	r3, r2
 800308a:	00db      	lsls	r3, r3, #3
 800308c:	4413      	add	r3, r2
 800308e:	009b      	lsls	r3, r3, #2
 8003090:	440b      	add	r3, r1
 8003092:	3340      	adds	r3, #64	; 0x40
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	2b01      	cmp	r3, #1
 8003098:	d115      	bne.n	80030c6 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800309a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800309c:	2b00      	cmp	r3, #0
 800309e:	da12      	bge.n	80030c6 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80030a0:	6879      	ldr	r1, [r7, #4]
 80030a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030a4:	4613      	mov	r3, r2
 80030a6:	00db      	lsls	r3, r3, #3
 80030a8:	4413      	add	r3, r2
 80030aa:	009b      	lsls	r3, r3, #2
 80030ac:	440b      	add	r3, r1
 80030ae:	333f      	adds	r3, #63	; 0x3f
 80030b0:	2201      	movs	r2, #1
 80030b2:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80030b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030b6:	b2db      	uxtb	r3, r3
 80030b8:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	4619      	mov	r1, r3
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fae8 	bl	8003696 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c8:	3301      	adds	r3, #1
 80030ca:	627b      	str	r3, [r7, #36]	; 0x24
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80030d2:	429a      	cmp	r2, r3
 80030d4:	d3ce      	bcc.n	8003074 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	695a      	ldr	r2, [r3, #20]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80030e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4618      	mov	r0, r3
 80030ec:	f003 fe5e 	bl	8006dac <USB_ReadInterrupts>
 80030f0:	4603      	mov	r3, r0
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80030fa:	d155      	bne.n	80031a8 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80030fc:	2301      	movs	r3, #1
 80030fe:	627b      	str	r3, [r7, #36]	; 0x24
 8003100:	e045      	b.n	800318e <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003102:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003104:	015a      	lsls	r2, r3, #5
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	4413      	add	r3, r2
 800310a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003112:	6879      	ldr	r1, [r7, #4]
 8003114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003124:	781b      	ldrb	r3, [r3, #0]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d12e      	bne.n	8003188 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800312a:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800312c:	2b00      	cmp	r3, #0
 800312e:	da2b      	bge.n	8003188 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800313c:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003140:	429a      	cmp	r2, r3
 8003142:	d121      	bne.n	8003188 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003144:	6879      	ldr	r1, [r7, #4]
 8003146:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003148:	4613      	mov	r3, r2
 800314a:	00db      	lsls	r3, r3, #3
 800314c:	4413      	add	r3, r2
 800314e:	009b      	lsls	r3, r3, #2
 8003150:	440b      	add	r3, r1
 8003152:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003156:	2201      	movs	r2, #1
 8003158:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800315a:	6a3b      	ldr	r3, [r7, #32]
 800315c:	699b      	ldr	r3, [r3, #24]
 800315e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003162:	6a3b      	ldr	r3, [r7, #32]
 8003164:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003166:	6a3b      	ldr	r3, [r7, #32]
 8003168:	695b      	ldr	r3, [r3, #20]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d10a      	bne.n	8003188 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003172:	69fb      	ldr	r3, [r7, #28]
 8003174:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	69fa      	ldr	r2, [r7, #28]
 800317c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003180:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003184:	6053      	str	r3, [r2, #4]
            break;
 8003186:	e007      	b.n	8003198 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318a:	3301      	adds	r3, #1
 800318c:	627b      	str	r3, [r7, #36]	; 0x24
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003194:	429a      	cmp	r2, r3
 8003196:	d3b4      	bcc.n	8003102 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	695a      	ldr	r2, [r3, #20]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80031a6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f003 fdfd 	bl	8006dac <USB_ReadInterrupts>
 80031b2:	4603      	mov	r3, r0
 80031b4:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d10a      	bne.n	80031d4 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f006 fa6e 	bl	80096a0 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	695a      	ldr	r2, [r3, #20]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80031d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f003 fde7 	bl	8006dac <USB_ReadInterrupts>
 80031de:	4603      	mov	r3, r0
 80031e0:	f003 0304 	and.w	r3, r3, #4
 80031e4:	2b04      	cmp	r3, #4
 80031e6:	d115      	bne.n	8003214 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	f003 0304 	and.w	r3, r3, #4
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d002      	beq.n	8003200 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80031fa:	6878      	ldr	r0, [r7, #4]
 80031fc:	f006 fa5e 	bl	80096bc <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	6859      	ldr	r1, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
 8003210:	e000      	b.n	8003214 <HAL_PCD_IRQHandler+0x938>
      return;
 8003212:	bf00      	nop
    }
  }
}
 8003214:	3734      	adds	r7, #52	; 0x34
 8003216:	46bd      	mov	sp, r7
 8003218:	bd90      	pop	{r4, r7, pc}

0800321a <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b082      	sub	sp, #8
 800321e:	af00      	add	r7, sp, #0
 8003220:	6078      	str	r0, [r7, #4]
 8003222:	460b      	mov	r3, r1
 8003224:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800322c:	2b01      	cmp	r3, #1
 800322e:	d101      	bne.n	8003234 <HAL_PCD_SetAddress+0x1a>
 8003230:	2302      	movs	r3, #2
 8003232:	e013      	b.n	800325c <HAL_PCD_SetAddress+0x42>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	78fa      	ldrb	r2, [r7, #3]
 8003240:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	78fa      	ldrb	r2, [r7, #3]
 800324a:	4611      	mov	r1, r2
 800324c:	4618      	mov	r0, r3
 800324e:	f003 fd45 	bl	8006cdc <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	2200      	movs	r2, #0
 8003256:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}

08003264 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b084      	sub	sp, #16
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
 800326c:	4608      	mov	r0, r1
 800326e:	4611      	mov	r1, r2
 8003270:	461a      	mov	r2, r3
 8003272:	4603      	mov	r3, r0
 8003274:	70fb      	strb	r3, [r7, #3]
 8003276:	460b      	mov	r3, r1
 8003278:	803b      	strh	r3, [r7, #0]
 800327a:	4613      	mov	r3, r2
 800327c:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800327e:	2300      	movs	r3, #0
 8003280:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003282:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003286:	2b00      	cmp	r3, #0
 8003288:	da0f      	bge.n	80032aa <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800328a:	78fb      	ldrb	r3, [r7, #3]
 800328c:	f003 020f 	and.w	r2, r3, #15
 8003290:	4613      	mov	r3, r2
 8003292:	00db      	lsls	r3, r3, #3
 8003294:	4413      	add	r3, r2
 8003296:	009b      	lsls	r3, r3, #2
 8003298:	3338      	adds	r3, #56	; 0x38
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	4413      	add	r3, r2
 800329e:	3304      	adds	r3, #4
 80032a0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	2201      	movs	r2, #1
 80032a6:	705a      	strb	r2, [r3, #1]
 80032a8:	e00f      	b.n	80032ca <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032aa:	78fb      	ldrb	r3, [r7, #3]
 80032ac:	f003 020f 	and.w	r2, r3, #15
 80032b0:	4613      	mov	r3, r2
 80032b2:	00db      	lsls	r3, r3, #3
 80032b4:	4413      	add	r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032bc:	687a      	ldr	r2, [r7, #4]
 80032be:	4413      	add	r3, r2
 80032c0:	3304      	adds	r3, #4
 80032c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2200      	movs	r2, #0
 80032c8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80032ca:	78fb      	ldrb	r3, [r7, #3]
 80032cc:	f003 030f 	and.w	r3, r3, #15
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80032d6:	883a      	ldrh	r2, [r7, #0]
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	78ba      	ldrb	r2, [r7, #2]
 80032e0:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	785b      	ldrb	r3, [r3, #1]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d004      	beq.n	80032f4 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	781b      	ldrb	r3, [r3, #0]
 80032ee:	b29a      	uxth	r2, r3
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80032f4:	78bb      	ldrb	r3, [r7, #2]
 80032f6:	2b02      	cmp	r3, #2
 80032f8:	d102      	bne.n	8003300 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003306:	2b01      	cmp	r3, #1
 8003308:	d101      	bne.n	800330e <HAL_PCD_EP_Open+0xaa>
 800330a:	2302      	movs	r3, #2
 800330c:	e00e      	b.n	800332c <HAL_PCD_EP_Open+0xc8>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2201      	movs	r2, #1
 8003312:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	68f9      	ldr	r1, [r7, #12]
 800331c:	4618      	mov	r0, r3
 800331e:	f002 fdc5 	bl	8005eac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2200      	movs	r2, #0
 8003326:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800332a:	7afb      	ldrb	r3, [r7, #11]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003334:	b580      	push	{r7, lr}
 8003336:	b084      	sub	sp, #16
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
 800333c:	460b      	mov	r3, r1
 800333e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003340:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003344:	2b00      	cmp	r3, #0
 8003346:	da0f      	bge.n	8003368 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003348:	78fb      	ldrb	r3, [r7, #3]
 800334a:	f003 020f 	and.w	r2, r3, #15
 800334e:	4613      	mov	r3, r2
 8003350:	00db      	lsls	r3, r3, #3
 8003352:	4413      	add	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	3338      	adds	r3, #56	; 0x38
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	4413      	add	r3, r2
 800335c:	3304      	adds	r3, #4
 800335e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	2201      	movs	r2, #1
 8003364:	705a      	strb	r2, [r3, #1]
 8003366:	e00f      	b.n	8003388 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003368:	78fb      	ldrb	r3, [r7, #3]
 800336a:	f003 020f 	and.w	r2, r3, #15
 800336e:	4613      	mov	r3, r2
 8003370:	00db      	lsls	r3, r3, #3
 8003372:	4413      	add	r3, r2
 8003374:	009b      	lsls	r3, r3, #2
 8003376:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800337a:	687a      	ldr	r2, [r7, #4]
 800337c:	4413      	add	r3, r2
 800337e:	3304      	adds	r3, #4
 8003380:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003388:	78fb      	ldrb	r3, [r7, #3]
 800338a:	f003 030f 	and.w	r3, r3, #15
 800338e:	b2da      	uxtb	r2, r3
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800339a:	2b01      	cmp	r3, #1
 800339c:	d101      	bne.n	80033a2 <HAL_PCD_EP_Close+0x6e>
 800339e:	2302      	movs	r3, #2
 80033a0:	e00e      	b.n	80033c0 <HAL_PCD_EP_Close+0x8c>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2201      	movs	r2, #1
 80033a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	68f9      	ldr	r1, [r7, #12]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f002 fe03 	bl	8005fbc <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2200      	movs	r2, #0
 80033ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80033be:	2300      	movs	r3, #0
}
 80033c0:	4618      	mov	r0, r3
 80033c2:	3710      	adds	r7, #16
 80033c4:	46bd      	mov	sp, r7
 80033c6:	bd80      	pop	{r7, pc}

080033c8 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b086      	sub	sp, #24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	607a      	str	r2, [r7, #4]
 80033d2:	603b      	str	r3, [r7, #0]
 80033d4:	460b      	mov	r3, r1
 80033d6:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033d8:	7afb      	ldrb	r3, [r7, #11]
 80033da:	f003 020f 	and.w	r2, r3, #15
 80033de:	4613      	mov	r3, r2
 80033e0:	00db      	lsls	r3, r3, #3
 80033e2:	4413      	add	r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033ea:	68fa      	ldr	r2, [r7, #12]
 80033ec:	4413      	add	r3, r2
 80033ee:	3304      	adds	r3, #4
 80033f0:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80033f2:	697b      	ldr	r3, [r7, #20]
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80033f8:	697b      	ldr	r3, [r7, #20]
 80033fa:	683a      	ldr	r2, [r7, #0]
 80033fc:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	2200      	movs	r2, #0
 8003402:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003404:	697b      	ldr	r3, [r7, #20]
 8003406:	2200      	movs	r2, #0
 8003408:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800340a:	7afb      	ldrb	r3, [r7, #11]
 800340c:	f003 030f 	and.w	r3, r3, #15
 8003410:	b2da      	uxtb	r2, r3
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	691b      	ldr	r3, [r3, #16]
 800341a:	2b01      	cmp	r3, #1
 800341c:	d102      	bne.n	8003424 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003424:	7afb      	ldrb	r3, [r7, #11]
 8003426:	f003 030f 	and.w	r3, r3, #15
 800342a:	2b00      	cmp	r3, #0
 800342c:	d109      	bne.n	8003442 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	6818      	ldr	r0, [r3, #0]
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	691b      	ldr	r3, [r3, #16]
 8003436:	b2db      	uxtb	r3, r3
 8003438:	461a      	mov	r2, r3
 800343a:	6979      	ldr	r1, [r7, #20]
 800343c:	f003 f8e2 	bl	8006604 <USB_EP0StartXfer>
 8003440:	e008      	b.n	8003454 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	6818      	ldr	r0, [r3, #0]
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	b2db      	uxtb	r3, r3
 800344c:	461a      	mov	r2, r3
 800344e:	6979      	ldr	r1, [r7, #20]
 8003450:	f002 fe90 	bl	8006174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003454:	2300      	movs	r3, #0
}
 8003456:	4618      	mov	r0, r3
 8003458:	3718      	adds	r7, #24
 800345a:	46bd      	mov	sp, r7
 800345c:	bd80      	pop	{r7, pc}

0800345e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800345e:	b480      	push	{r7}
 8003460:	b083      	sub	sp, #12
 8003462:	af00      	add	r7, sp, #0
 8003464:	6078      	str	r0, [r7, #4]
 8003466:	460b      	mov	r3, r1
 8003468:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800346a:	78fb      	ldrb	r3, [r7, #3]
 800346c:	f003 020f 	and.w	r2, r3, #15
 8003470:	6879      	ldr	r1, [r7, #4]
 8003472:	4613      	mov	r3, r2
 8003474:	00db      	lsls	r3, r3, #3
 8003476:	4413      	add	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	440b      	add	r3, r1
 800347c:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003480:	681b      	ldr	r3, [r3, #0]
}
 8003482:	4618      	mov	r0, r3
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800348e:	b580      	push	{r7, lr}
 8003490:	b086      	sub	sp, #24
 8003492:	af00      	add	r7, sp, #0
 8003494:	60f8      	str	r0, [r7, #12]
 8003496:	607a      	str	r2, [r7, #4]
 8003498:	603b      	str	r3, [r7, #0]
 800349a:	460b      	mov	r3, r1
 800349c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	7afb      	ldrb	r3, [r7, #11]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	68fa      	ldr	r2, [r7, #12]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	687a      	ldr	r2, [r7, #4]
 80034ba:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	683a      	ldr	r2, [r7, #0]
 80034c0:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80034c2:	697b      	ldr	r3, [r7, #20]
 80034c4:	2200      	movs	r2, #0
 80034c6:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	2201      	movs	r2, #1
 80034cc:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ce:	7afb      	ldrb	r3, [r7, #11]
 80034d0:	f003 030f 	and.w	r3, r3, #15
 80034d4:	b2da      	uxtb	r2, r3
 80034d6:	697b      	ldr	r3, [r7, #20]
 80034d8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	691b      	ldr	r3, [r3, #16]
 80034de:	2b01      	cmp	r3, #1
 80034e0:	d102      	bne.n	80034e8 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	697b      	ldr	r3, [r7, #20]
 80034e6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80034e8:	7afb      	ldrb	r3, [r7, #11]
 80034ea:	f003 030f 	and.w	r3, r3, #15
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d109      	bne.n	8003506 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6818      	ldr	r0, [r3, #0]
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	691b      	ldr	r3, [r3, #16]
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	461a      	mov	r2, r3
 80034fe:	6979      	ldr	r1, [r7, #20]
 8003500:	f003 f880 	bl	8006604 <USB_EP0StartXfer>
 8003504:	e008      	b.n	8003518 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	6818      	ldr	r0, [r3, #0]
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	691b      	ldr	r3, [r3, #16]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	461a      	mov	r2, r3
 8003512:	6979      	ldr	r1, [r7, #20]
 8003514:	f002 fe2e 	bl	8006174 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003518:	2300      	movs	r3, #0
}
 800351a:	4618      	mov	r0, r3
 800351c:	3718      	adds	r7, #24
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}

08003522 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003522:	b580      	push	{r7, lr}
 8003524:	b084      	sub	sp, #16
 8003526:	af00      	add	r7, sp, #0
 8003528:	6078      	str	r0, [r7, #4]
 800352a:	460b      	mov	r3, r1
 800352c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800352e:	78fb      	ldrb	r3, [r7, #3]
 8003530:	f003 020f 	and.w	r2, r3, #15
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	685b      	ldr	r3, [r3, #4]
 8003538:	429a      	cmp	r2, r3
 800353a:	d901      	bls.n	8003540 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	e050      	b.n	80035e2 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003540:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003544:	2b00      	cmp	r3, #0
 8003546:	da0f      	bge.n	8003568 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	f003 020f 	and.w	r2, r3, #15
 800354e:	4613      	mov	r3, r2
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	4413      	add	r3, r2
 8003554:	009b      	lsls	r3, r3, #2
 8003556:	3338      	adds	r3, #56	; 0x38
 8003558:	687a      	ldr	r2, [r7, #4]
 800355a:	4413      	add	r3, r2
 800355c:	3304      	adds	r3, #4
 800355e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	705a      	strb	r2, [r3, #1]
 8003566:	e00d      	b.n	8003584 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003568:	78fa      	ldrb	r2, [r7, #3]
 800356a:	4613      	mov	r3, r2
 800356c:	00db      	lsls	r3, r3, #3
 800356e:	4413      	add	r3, r2
 8003570:	009b      	lsls	r3, r3, #2
 8003572:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003576:	687a      	ldr	r2, [r7, #4]
 8003578:	4413      	add	r3, r2
 800357a:	3304      	adds	r3, #4
 800357c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	2201      	movs	r2, #1
 8003588:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800358a:	78fb      	ldrb	r3, [r7, #3]
 800358c:	f003 030f 	and.w	r3, r3, #15
 8003590:	b2da      	uxtb	r2, r3
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800359c:	2b01      	cmp	r3, #1
 800359e:	d101      	bne.n	80035a4 <HAL_PCD_EP_SetStall+0x82>
 80035a0:	2302      	movs	r3, #2
 80035a2:	e01e      	b.n	80035e2 <HAL_PCD_EP_SetStall+0xc0>
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2201      	movs	r2, #1
 80035a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68f9      	ldr	r1, [r7, #12]
 80035b2:	4618      	mov	r0, r3
 80035b4:	f003 fabe 	bl	8006b34 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035b8:	78fb      	ldrb	r3, [r7, #3]
 80035ba:	f003 030f 	and.w	r3, r3, #15
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d10a      	bne.n	80035d8 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	6818      	ldr	r0, [r3, #0]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	691b      	ldr	r3, [r3, #16]
 80035ca:	b2d9      	uxtb	r1, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80035d2:	461a      	mov	r2, r3
 80035d4:	f003 fcae 	bl	8006f34 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3710      	adds	r7, #16
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}

080035ea <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80035ea:	b580      	push	{r7, lr}
 80035ec:	b084      	sub	sp, #16
 80035ee:	af00      	add	r7, sp, #0
 80035f0:	6078      	str	r0, [r7, #4]
 80035f2:	460b      	mov	r3, r1
 80035f4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035f6:	78fb      	ldrb	r3, [r7, #3]
 80035f8:	f003 020f 	and.w	r2, r3, #15
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	429a      	cmp	r2, r3
 8003602:	d901      	bls.n	8003608 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003604:	2301      	movs	r3, #1
 8003606:	e042      	b.n	800368e <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003608:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800360c:	2b00      	cmp	r3, #0
 800360e:	da0f      	bge.n	8003630 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003610:	78fb      	ldrb	r3, [r7, #3]
 8003612:	f003 020f 	and.w	r2, r3, #15
 8003616:	4613      	mov	r3, r2
 8003618:	00db      	lsls	r3, r3, #3
 800361a:	4413      	add	r3, r2
 800361c:	009b      	lsls	r3, r3, #2
 800361e:	3338      	adds	r3, #56	; 0x38
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	4413      	add	r3, r2
 8003624:	3304      	adds	r3, #4
 8003626:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2201      	movs	r2, #1
 800362c:	705a      	strb	r2, [r3, #1]
 800362e:	e00f      	b.n	8003650 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003630:	78fb      	ldrb	r3, [r7, #3]
 8003632:	f003 020f 	and.w	r2, r3, #15
 8003636:	4613      	mov	r3, r2
 8003638:	00db      	lsls	r3, r3, #3
 800363a:	4413      	add	r3, r2
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003642:	687a      	ldr	r2, [r7, #4]
 8003644:	4413      	add	r3, r2
 8003646:	3304      	adds	r3, #4
 8003648:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	2200      	movs	r2, #0
 800364e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003656:	78fb      	ldrb	r3, [r7, #3]
 8003658:	f003 030f 	and.w	r3, r3, #15
 800365c:	b2da      	uxtb	r2, r3
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003668:	2b01      	cmp	r3, #1
 800366a:	d101      	bne.n	8003670 <HAL_PCD_EP_ClrStall+0x86>
 800366c:	2302      	movs	r3, #2
 800366e:	e00e      	b.n	800368e <HAL_PCD_EP_ClrStall+0xa4>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	2201      	movs	r2, #1
 8003674:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	68f9      	ldr	r1, [r7, #12]
 800367e:	4618      	mov	r0, r3
 8003680:	f003 fac6 	bl	8006c10 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800368c:	2300      	movs	r3, #0
}
 800368e:	4618      	mov	r0, r3
 8003690:	3710      	adds	r7, #16
 8003692:	46bd      	mov	sp, r7
 8003694:	bd80      	pop	{r7, pc}

08003696 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003696:	b580      	push	{r7, lr}
 8003698:	b084      	sub	sp, #16
 800369a:	af00      	add	r7, sp, #0
 800369c:	6078      	str	r0, [r7, #4]
 800369e:	460b      	mov	r3, r1
 80036a0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80036a2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	da0c      	bge.n	80036c4 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036aa:	78fb      	ldrb	r3, [r7, #3]
 80036ac:	f003 020f 	and.w	r2, r3, #15
 80036b0:	4613      	mov	r3, r2
 80036b2:	00db      	lsls	r3, r3, #3
 80036b4:	4413      	add	r3, r2
 80036b6:	009b      	lsls	r3, r3, #2
 80036b8:	3338      	adds	r3, #56	; 0x38
 80036ba:	687a      	ldr	r2, [r7, #4]
 80036bc:	4413      	add	r3, r2
 80036be:	3304      	adds	r3, #4
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	e00c      	b.n	80036de <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80036c4:	78fb      	ldrb	r3, [r7, #3]
 80036c6:	f003 020f 	and.w	r2, r3, #15
 80036ca:	4613      	mov	r3, r2
 80036cc:	00db      	lsls	r3, r3, #3
 80036ce:	4413      	add	r3, r2
 80036d0:	009b      	lsls	r3, r3, #2
 80036d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80036d6:	687a      	ldr	r2, [r7, #4]
 80036d8:	4413      	add	r3, r2
 80036da:	3304      	adds	r3, #4
 80036dc:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68f9      	ldr	r1, [r7, #12]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f003 f8e5 	bl	80068b4 <USB_EPStopXfer>
 80036ea:	4603      	mov	r3, r0
 80036ec:	72fb      	strb	r3, [r7, #11]

  return ret;
 80036ee:	7afb      	ldrb	r3, [r7, #11]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	3710      	adds	r7, #16
 80036f4:	46bd      	mov	sp, r7
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af02      	add	r7, sp, #8
 80036fe:	6078      	str	r0, [r7, #4]
 8003700:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800370c:	683a      	ldr	r2, [r7, #0]
 800370e:	4613      	mov	r3, r2
 8003710:	00db      	lsls	r3, r3, #3
 8003712:	4413      	add	r3, r2
 8003714:	009b      	lsls	r3, r3, #2
 8003716:	3338      	adds	r3, #56	; 0x38
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	4413      	add	r3, r2
 800371c:	3304      	adds	r3, #4
 800371e:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6a1a      	ldr	r2, [r3, #32]
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	699b      	ldr	r3, [r3, #24]
 8003728:	429a      	cmp	r2, r3
 800372a:	d901      	bls.n	8003730 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800372c:	2301      	movs	r3, #1
 800372e:	e06c      	b.n	800380a <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	699a      	ldr	r2, [r3, #24]
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6a1b      	ldr	r3, [r3, #32]
 8003738:	1ad3      	subs	r3, r2, r3
 800373a:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68db      	ldr	r3, [r3, #12]
 8003740:	69fa      	ldr	r2, [r7, #28]
 8003742:	429a      	cmp	r2, r3
 8003744:	d902      	bls.n	800374c <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	68db      	ldr	r3, [r3, #12]
 800374a:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800374c:	69fb      	ldr	r3, [r7, #28]
 800374e:	3303      	adds	r3, #3
 8003750:	089b      	lsrs	r3, r3, #2
 8003752:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003754:	e02b      	b.n	80037ae <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	699a      	ldr	r2, [r3, #24]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	1ad3      	subs	r3, r2, r3
 8003760:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	68db      	ldr	r3, [r3, #12]
 8003766:	69fa      	ldr	r2, [r7, #28]
 8003768:	429a      	cmp	r2, r3
 800376a:	d902      	bls.n	8003772 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003772:	69fb      	ldr	r3, [r7, #28]
 8003774:	3303      	adds	r3, #3
 8003776:	089b      	lsrs	r3, r3, #2
 8003778:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6919      	ldr	r1, [r3, #16]
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	b2da      	uxtb	r2, r3
 8003782:	69fb      	ldr	r3, [r7, #28]
 8003784:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800378a:	b2db      	uxtb	r3, r3
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	4603      	mov	r3, r0
 8003790:	6978      	ldr	r0, [r7, #20]
 8003792:	f003 f939 	bl	8006a08 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	691a      	ldr	r2, [r3, #16]
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	441a      	add	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	6a1a      	ldr	r2, [r3, #32]
 80037a6:	69fb      	ldr	r3, [r7, #28]
 80037a8:	441a      	add	r2, r3
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	015a      	lsls	r2, r3, #5
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	4413      	add	r3, r2
 80037b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80037ba:	699b      	ldr	r3, [r3, #24]
 80037bc:	b29b      	uxth	r3, r3
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037be:	69ba      	ldr	r2, [r7, #24]
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d809      	bhi.n	80037d8 <PCD_WriteEmptyTxFifo+0xe0>
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a1a      	ldr	r2, [r3, #32]
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80037cc:	429a      	cmp	r2, r3
 80037ce:	d203      	bcs.n	80037d8 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	699b      	ldr	r3, [r3, #24]
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1be      	bne.n	8003756 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	699a      	ldr	r2, [r3, #24]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	6a1b      	ldr	r3, [r3, #32]
 80037e0:	429a      	cmp	r2, r3
 80037e2:	d811      	bhi.n	8003808 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	2201      	movs	r2, #1
 80037ec:	fa02 f303 	lsl.w	r3, r2, r3
 80037f0:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037f8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	43db      	mvns	r3, r3
 80037fe:	6939      	ldr	r1, [r7, #16]
 8003800:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003804:	4013      	ands	r3, r2
 8003806:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003808:	2300      	movs	r3, #0
}
 800380a:	4618      	mov	r0, r3
 800380c:	3720      	adds	r7, #32
 800380e:	46bd      	mov	sp, r7
 8003810:	bd80      	pop	{r7, pc}
	...

08003814 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b088      	sub	sp, #32
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
 800381c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	333c      	adds	r3, #60	; 0x3c
 800382c:	3304      	adds	r3, #4
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	015a      	lsls	r2, r3, #5
 8003836:	69bb      	ldr	r3, [r7, #24]
 8003838:	4413      	add	r3, r2
 800383a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800383e:	689b      	ldr	r3, [r3, #8]
 8003840:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	691b      	ldr	r3, [r3, #16]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d17b      	bne.n	8003942 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	f003 0308 	and.w	r3, r3, #8
 8003850:	2b00      	cmp	r3, #0
 8003852:	d015      	beq.n	8003880 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	4a61      	ldr	r2, [pc, #388]	; (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003858:	4293      	cmp	r3, r2
 800385a:	f240 80b9 	bls.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800385e:	693b      	ldr	r3, [r7, #16]
 8003860:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003864:	2b00      	cmp	r3, #0
 8003866:	f000 80b3 	beq.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	015a      	lsls	r2, r3, #5
 800386e:	69bb      	ldr	r3, [r7, #24]
 8003870:	4413      	add	r3, r2
 8003872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003876:	461a      	mov	r2, r3
 8003878:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800387c:	6093      	str	r3, [r2, #8]
 800387e:	e0a7      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f003 0320 	and.w	r3, r3, #32
 8003886:	2b00      	cmp	r3, #0
 8003888:	d009      	beq.n	800389e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	015a      	lsls	r2, r3, #5
 800388e:	69bb      	ldr	r3, [r7, #24]
 8003890:	4413      	add	r3, r2
 8003892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003896:	461a      	mov	r2, r3
 8003898:	2320      	movs	r3, #32
 800389a:	6093      	str	r3, [r2, #8]
 800389c:	e098      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	f040 8093 	bne.w	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	4a4b      	ldr	r2, [pc, #300]	; (80039dc <PCD_EP_OutXfrComplete_int+0x1c8>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d90f      	bls.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b2:	693b      	ldr	r3, [r7, #16]
 80038b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d00a      	beq.n	80038d2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038bc:	683b      	ldr	r3, [r7, #0]
 80038be:	015a      	lsls	r2, r3, #5
 80038c0:	69bb      	ldr	r3, [r7, #24]
 80038c2:	4413      	add	r3, r2
 80038c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038c8:	461a      	mov	r2, r3
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	6093      	str	r3, [r2, #8]
 80038d0:	e07e      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80038d2:	683a      	ldr	r2, [r7, #0]
 80038d4:	4613      	mov	r3, r2
 80038d6:	00db      	lsls	r3, r3, #3
 80038d8:	4413      	add	r3, r2
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	4413      	add	r3, r2
 80038e4:	3304      	adds	r3, #4
 80038e6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	69da      	ldr	r2, [r3, #28]
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	0159      	lsls	r1, r3, #5
 80038f0:	69bb      	ldr	r3, [r7, #24]
 80038f2:	440b      	add	r3, r1
 80038f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	1ad2      	subs	r2, r2, r3
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d114      	bne.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	699b      	ldr	r3, [r3, #24]
 800390e:	2b00      	cmp	r3, #0
 8003910:	d109      	bne.n	8003926 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6818      	ldr	r0, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800391c:	461a      	mov	r2, r3
 800391e:	2101      	movs	r1, #1
 8003920:	f003 fb08 	bl	8006f34 <USB_EP0_OutStart>
 8003924:	e006      	b.n	8003934 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	691a      	ldr	r2, [r3, #16]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	6a1b      	ldr	r3, [r3, #32]
 800392e:	441a      	add	r2, r3
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4619      	mov	r1, r3
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f005 fdec 	bl	8009518 <HAL_PCD_DataOutStageCallback>
 8003940:	e046      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	4a26      	ldr	r2, [pc, #152]	; (80039e0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d124      	bne.n	8003994 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00a      	beq.n	800396a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	015a      	lsls	r2, r3, #5
 8003958:	69bb      	ldr	r3, [r7, #24]
 800395a:	4413      	add	r3, r2
 800395c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003960:	461a      	mov	r2, r3
 8003962:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003966:	6093      	str	r3, [r2, #8]
 8003968:	e032      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800396a:	693b      	ldr	r3, [r7, #16]
 800396c:	f003 0320 	and.w	r3, r3, #32
 8003970:	2b00      	cmp	r3, #0
 8003972:	d008      	beq.n	8003986 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003974:	683b      	ldr	r3, [r7, #0]
 8003976:	015a      	lsls	r2, r3, #5
 8003978:	69bb      	ldr	r3, [r7, #24]
 800397a:	4413      	add	r3, r2
 800397c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003980:	461a      	mov	r2, r3
 8003982:	2320      	movs	r3, #32
 8003984:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	b2db      	uxtb	r3, r3
 800398a:	4619      	mov	r1, r3
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f005 fdc3 	bl	8009518 <HAL_PCD_DataOutStageCallback>
 8003992:	e01d      	b.n	80039d0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003994:	683b      	ldr	r3, [r7, #0]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d114      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	683a      	ldr	r2, [r7, #0]
 800399e:	4613      	mov	r3, r2
 80039a0:	00db      	lsls	r3, r3, #3
 80039a2:	4413      	add	r3, r2
 80039a4:	009b      	lsls	r3, r3, #2
 80039a6:	440b      	add	r3, r1
 80039a8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d108      	bne.n	80039c4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6818      	ldr	r0, [r3, #0]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80039bc:	461a      	mov	r2, r3
 80039be:	2100      	movs	r1, #0
 80039c0:	f003 fab8 	bl	8006f34 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	b2db      	uxtb	r3, r3
 80039c8:	4619      	mov	r1, r3
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f005 fda4 	bl	8009518 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3720      	adds	r7, #32
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	4f54300a 	.word	0x4f54300a
 80039e0:	4f54310a 	.word	0x4f54310a

080039e4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b086      	sub	sp, #24
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	333c      	adds	r3, #60	; 0x3c
 80039fc:	3304      	adds	r3, #4
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a02:	683b      	ldr	r3, [r7, #0]
 8003a04:	015a      	lsls	r2, r3, #5
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	4413      	add	r3, r2
 8003a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a0e:	689b      	ldr	r3, [r3, #8]
 8003a10:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	4a15      	ldr	r2, [pc, #84]	; (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a16:	4293      	cmp	r3, r2
 8003a18:	d90e      	bls.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d009      	beq.n	8003a38 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	693b      	ldr	r3, [r7, #16]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a30:	461a      	mov	r2, r3
 8003a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a36:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003a38:	6878      	ldr	r0, [r7, #4]
 8003a3a:	f005 fd5b 	bl	80094f4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4a0a      	ldr	r2, [pc, #40]	; (8003a6c <PCD_EP_OutSetupPacket_int+0x88>)
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d90c      	bls.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	2b01      	cmp	r3, #1
 8003a4c:	d108      	bne.n	8003a60 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a58:	461a      	mov	r2, r3
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	f003 fa6a 	bl	8006f34 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003a60:	2300      	movs	r3, #0
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	4f54300a 	.word	0x4f54300a

08003a70 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b085      	sub	sp, #20
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	460b      	mov	r3, r1
 8003a7a:	70fb      	strb	r3, [r7, #3]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003a88:	78fb      	ldrb	r3, [r7, #3]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d107      	bne.n	8003a9e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003a8e:	883b      	ldrh	r3, [r7, #0]
 8003a90:	0419      	lsls	r1, r3, #16
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	68ba      	ldr	r2, [r7, #8]
 8003a98:	430a      	orrs	r2, r1
 8003a9a:	629a      	str	r2, [r3, #40]	; 0x28
 8003a9c:	e028      	b.n	8003af0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	0c1b      	lsrs	r3, r3, #16
 8003aa6:	68ba      	ldr	r2, [r7, #8]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003aac:	2300      	movs	r3, #0
 8003aae:	73fb      	strb	r3, [r7, #15]
 8003ab0:	e00d      	b.n	8003ace <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	7bfb      	ldrb	r3, [r7, #15]
 8003ab8:	3340      	adds	r3, #64	; 0x40
 8003aba:	009b      	lsls	r3, r3, #2
 8003abc:	4413      	add	r3, r2
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	0c1b      	lsrs	r3, r3, #16
 8003ac2:	68ba      	ldr	r2, [r7, #8]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	3301      	adds	r3, #1
 8003acc:	73fb      	strb	r3, [r7, #15]
 8003ace:	7bfa      	ldrb	r2, [r7, #15]
 8003ad0:	78fb      	ldrb	r3, [r7, #3]
 8003ad2:	3b01      	subs	r3, #1
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d3ec      	bcc.n	8003ab2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003ad8:	883b      	ldrh	r3, [r7, #0]
 8003ada:	0418      	lsls	r0, r3, #16
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6819      	ldr	r1, [r3, #0]
 8003ae0:	78fb      	ldrb	r3, [r7, #3]
 8003ae2:	3b01      	subs	r3, #1
 8003ae4:	68ba      	ldr	r2, [r7, #8]
 8003ae6:	4302      	orrs	r2, r0
 8003ae8:	3340      	adds	r3, #64	; 0x40
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	440b      	add	r3, r1
 8003aee:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003af0:	2300      	movs	r3, #0
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr

08003afe <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003afe:	b480      	push	{r7}
 8003b00:	b083      	sub	sp, #12
 8003b02:	af00      	add	r7, sp, #0
 8003b04:	6078      	str	r0, [r7, #4]
 8003b06:	460b      	mov	r3, r1
 8003b08:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	887a      	ldrh	r2, [r7, #2]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003b12:	2300      	movs	r3, #0
}
 8003b14:	4618      	mov	r0, r3
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	460b      	mov	r3, r1
 8003b2a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003b2c:	bf00      	nop
 8003b2e:	370c      	adds	r7, #12
 8003b30:	46bd      	mov	sp, r7
 8003b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b36:	4770      	bx	lr

08003b38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b086      	sub	sp, #24
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b46:	2301      	movs	r3, #1
 8003b48:	e267      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d075      	beq.n	8003c42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b56:	4b88      	ldr	r3, [pc, #544]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b58:	689b      	ldr	r3, [r3, #8]
 8003b5a:	f003 030c 	and.w	r3, r3, #12
 8003b5e:	2b04      	cmp	r3, #4
 8003b60:	d00c      	beq.n	8003b7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b62:	4b85      	ldr	r3, [pc, #532]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d112      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b6e:	4b82      	ldr	r3, [pc, #520]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7a:	d10b      	bne.n	8003b94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b7c:	4b7e      	ldr	r3, [pc, #504]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d05b      	beq.n	8003c40 <HAL_RCC_OscConfig+0x108>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d157      	bne.n	8003c40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e242      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b9c:	d106      	bne.n	8003bac <HAL_RCC_OscConfig+0x74>
 8003b9e:	4b76      	ldr	r3, [pc, #472]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a75      	ldr	r2, [pc, #468]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	e01d      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	685b      	ldr	r3, [r3, #4]
 8003bb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb4:	d10c      	bne.n	8003bd0 <HAL_RCC_OscConfig+0x98>
 8003bb6:	4b70      	ldr	r3, [pc, #448]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a6f      	ldr	r2, [pc, #444]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc0:	6013      	str	r3, [r2, #0]
 8003bc2:	4b6d      	ldr	r3, [pc, #436]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a6c      	ldr	r2, [pc, #432]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bcc:	6013      	str	r3, [r2, #0]
 8003bce:	e00b      	b.n	8003be8 <HAL_RCC_OscConfig+0xb0>
 8003bd0:	4b69      	ldr	r3, [pc, #420]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a68      	ldr	r2, [pc, #416]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bda:	6013      	str	r3, [r2, #0]
 8003bdc:	4b66      	ldr	r3, [pc, #408]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a65      	ldr	r2, [pc, #404]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003be2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003be6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	685b      	ldr	r3, [r3, #4]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d013      	beq.n	8003c18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf0:	f7fd fc48 	bl	8001484 <HAL_GetTick>
 8003bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf6:	e008      	b.n	8003c0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bf8:	f7fd fc44 	bl	8001484 <HAL_GetTick>
 8003bfc:	4602      	mov	r2, r0
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	1ad3      	subs	r3, r2, r3
 8003c02:	2b64      	cmp	r3, #100	; 0x64
 8003c04:	d901      	bls.n	8003c0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c06:	2303      	movs	r3, #3
 8003c08:	e207      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0a:	4b5b      	ldr	r3, [pc, #364]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d0f0      	beq.n	8003bf8 <HAL_RCC_OscConfig+0xc0>
 8003c16:	e014      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c18:	f7fd fc34 	bl	8001484 <HAL_GetTick>
 8003c1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1e:	e008      	b.n	8003c32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c20:	f7fd fc30 	bl	8001484 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	693b      	ldr	r3, [r7, #16]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	2b64      	cmp	r3, #100	; 0x64
 8003c2c:	d901      	bls.n	8003c32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c2e:	2303      	movs	r3, #3
 8003c30:	e1f3      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c32:	4b51      	ldr	r3, [pc, #324]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f0      	bne.n	8003c20 <HAL_RCC_OscConfig+0xe8>
 8003c3e:	e000      	b.n	8003c42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0302 	and.w	r3, r3, #2
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d063      	beq.n	8003d16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4e:	4b4a      	ldr	r3, [pc, #296]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 030c 	and.w	r3, r3, #12
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d00b      	beq.n	8003c72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5a:	4b47      	ldr	r3, [pc, #284]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c62:	2b08      	cmp	r3, #8
 8003c64:	d11c      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c66:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c68:	685b      	ldr	r3, [r3, #4]
 8003c6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d116      	bne.n	8003ca0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c72:	4b41      	ldr	r3, [pc, #260]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f003 0302 	and.w	r3, r3, #2
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d005      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	68db      	ldr	r3, [r3, #12]
 8003c82:	2b01      	cmp	r3, #1
 8003c84:	d001      	beq.n	8003c8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e1c7      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8a:	4b3b      	ldr	r3, [pc, #236]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	691b      	ldr	r3, [r3, #16]
 8003c96:	00db      	lsls	r3, r3, #3
 8003c98:	4937      	ldr	r1, [pc, #220]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c9e:	e03a      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	68db      	ldr	r3, [r3, #12]
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d020      	beq.n	8003cea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ca8:	4b34      	ldr	r3, [pc, #208]	; (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003caa:	2201      	movs	r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cae:	f7fd fbe9 	bl	8001484 <HAL_GetTick>
 8003cb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb4:	e008      	b.n	8003cc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cb6:	f7fd fbe5 	bl	8001484 <HAL_GetTick>
 8003cba:	4602      	mov	r2, r0
 8003cbc:	693b      	ldr	r3, [r7, #16]
 8003cbe:	1ad3      	subs	r3, r2, r3
 8003cc0:	2b02      	cmp	r3, #2
 8003cc2:	d901      	bls.n	8003cc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc4:	2303      	movs	r3, #3
 8003cc6:	e1a8      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cc8:	4b2b      	ldr	r3, [pc, #172]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f003 0302 	and.w	r3, r3, #2
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d0f0      	beq.n	8003cb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd4:	4b28      	ldr	r3, [pc, #160]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	691b      	ldr	r3, [r3, #16]
 8003ce0:	00db      	lsls	r3, r3, #3
 8003ce2:	4925      	ldr	r1, [pc, #148]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	600b      	str	r3, [r1, #0]
 8003ce8:	e015      	b.n	8003d16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cea:	4b24      	ldr	r3, [pc, #144]	; (8003d7c <HAL_RCC_OscConfig+0x244>)
 8003cec:	2200      	movs	r2, #0
 8003cee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf0:	f7fd fbc8 	bl	8001484 <HAL_GetTick>
 8003cf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf6:	e008      	b.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cf8:	f7fd fbc4 	bl	8001484 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d901      	bls.n	8003d0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d06:	2303      	movs	r3, #3
 8003d08:	e187      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0a:	4b1b      	ldr	r3, [pc, #108]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	f003 0302 	and.w	r3, r3, #2
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d1f0      	bne.n	8003cf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f003 0308 	and.w	r3, r3, #8
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d036      	beq.n	8003d90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d016      	beq.n	8003d58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2a:	4b15      	ldr	r3, [pc, #84]	; (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d2c:	2201      	movs	r2, #1
 8003d2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d30:	f7fd fba8 	bl	8001484 <HAL_GetTick>
 8003d34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d36:	e008      	b.n	8003d4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d38:	f7fd fba4 	bl	8001484 <HAL_GetTick>
 8003d3c:	4602      	mov	r2, r0
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	1ad3      	subs	r3, r2, r3
 8003d42:	2b02      	cmp	r3, #2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e167      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4a:	4b0b      	ldr	r3, [pc, #44]	; (8003d78 <HAL_RCC_OscConfig+0x240>)
 8003d4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d0f0      	beq.n	8003d38 <HAL_RCC_OscConfig+0x200>
 8003d56:	e01b      	b.n	8003d90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d58:	4b09      	ldr	r3, [pc, #36]	; (8003d80 <HAL_RCC_OscConfig+0x248>)
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d5e:	f7fd fb91 	bl	8001484 <HAL_GetTick>
 8003d62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d64:	e00e      	b.n	8003d84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d66:	f7fd fb8d 	bl	8001484 <HAL_GetTick>
 8003d6a:	4602      	mov	r2, r0
 8003d6c:	693b      	ldr	r3, [r7, #16]
 8003d6e:	1ad3      	subs	r3, r2, r3
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d907      	bls.n	8003d84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d74:	2303      	movs	r3, #3
 8003d76:	e150      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003d78:	40023800 	.word	0x40023800
 8003d7c:	42470000 	.word	0x42470000
 8003d80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d84:	4b88      	ldr	r3, [pc, #544]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003d86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d88:	f003 0302 	and.w	r3, r3, #2
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1ea      	bne.n	8003d66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	f003 0304 	and.w	r3, r3, #4
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	f000 8097 	beq.w	8003ecc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003da2:	4b81      	ldr	r3, [pc, #516]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003da6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d10f      	bne.n	8003dce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003dae:	2300      	movs	r3, #0
 8003db0:	60bb      	str	r3, [r7, #8]
 8003db2:	4b7d      	ldr	r3, [pc, #500]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db6:	4a7c      	ldr	r2, [pc, #496]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003db8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dbc:	6413      	str	r3, [r2, #64]	; 0x40
 8003dbe:	4b7a      	ldr	r3, [pc, #488]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc6:	60bb      	str	r3, [r7, #8]
 8003dc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dce:	4b77      	ldr	r3, [pc, #476]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d118      	bne.n	8003e0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dda:	4b74      	ldr	r3, [pc, #464]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4a73      	ldr	r2, [pc, #460]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003de0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003de4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003de6:	f7fd fb4d 	bl	8001484 <HAL_GetTick>
 8003dea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dec:	e008      	b.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dee:	f7fd fb49 	bl	8001484 <HAL_GetTick>
 8003df2:	4602      	mov	r2, r0
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	1ad3      	subs	r3, r2, r3
 8003df8:	2b02      	cmp	r3, #2
 8003dfa:	d901      	bls.n	8003e00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003dfc:	2303      	movs	r3, #3
 8003dfe:	e10c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e00:	4b6a      	ldr	r3, [pc, #424]	; (8003fac <HAL_RCC_OscConfig+0x474>)
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0f0      	beq.n	8003dee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	2b01      	cmp	r3, #1
 8003e12:	d106      	bne.n	8003e22 <HAL_RCC_OscConfig+0x2ea>
 8003e14:	4b64      	ldr	r3, [pc, #400]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e18:	4a63      	ldr	r2, [pc, #396]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e1a:	f043 0301 	orr.w	r3, r3, #1
 8003e1e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e20:	e01c      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	689b      	ldr	r3, [r3, #8]
 8003e26:	2b05      	cmp	r3, #5
 8003e28:	d10c      	bne.n	8003e44 <HAL_RCC_OscConfig+0x30c>
 8003e2a:	4b5f      	ldr	r3, [pc, #380]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e2e:	4a5e      	ldr	r2, [pc, #376]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e30:	f043 0304 	orr.w	r3, r3, #4
 8003e34:	6713      	str	r3, [r2, #112]	; 0x70
 8003e36:	4b5c      	ldr	r3, [pc, #368]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3a:	4a5b      	ldr	r2, [pc, #364]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e3c:	f043 0301 	orr.w	r3, r3, #1
 8003e40:	6713      	str	r3, [r2, #112]	; 0x70
 8003e42:	e00b      	b.n	8003e5c <HAL_RCC_OscConfig+0x324>
 8003e44:	4b58      	ldr	r3, [pc, #352]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e48:	4a57      	ldr	r2, [pc, #348]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e4a:	f023 0301 	bic.w	r3, r3, #1
 8003e4e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e50:	4b55      	ldr	r3, [pc, #340]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e54:	4a54      	ldr	r2, [pc, #336]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e56:	f023 0304 	bic.w	r3, r3, #4
 8003e5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	689b      	ldr	r3, [r3, #8]
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d015      	beq.n	8003e90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e64:	f7fd fb0e 	bl	8001484 <HAL_GetTick>
 8003e68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	e00a      	b.n	8003e82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e6c:	f7fd fb0a 	bl	8001484 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	693b      	ldr	r3, [r7, #16]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d901      	bls.n	8003e82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e7e:	2303      	movs	r3, #3
 8003e80:	e0cb      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e82:	4b49      	ldr	r3, [pc, #292]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e86:	f003 0302 	and.w	r3, r3, #2
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d0ee      	beq.n	8003e6c <HAL_RCC_OscConfig+0x334>
 8003e8e:	e014      	b.n	8003eba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e90:	f7fd faf8 	bl	8001484 <HAL_GetTick>
 8003e94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	e00a      	b.n	8003eae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e98:	f7fd faf4 	bl	8001484 <HAL_GetTick>
 8003e9c:	4602      	mov	r2, r0
 8003e9e:	693b      	ldr	r3, [r7, #16]
 8003ea0:	1ad3      	subs	r3, r2, r3
 8003ea2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d901      	bls.n	8003eae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e0b5      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eae:	4b3e      	ldr	r3, [pc, #248]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003eb0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003eb2:	f003 0302 	and.w	r3, r3, #2
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d1ee      	bne.n	8003e98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003eba:	7dfb      	ldrb	r3, [r7, #23]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	d105      	bne.n	8003ecc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ec0:	4b39      	ldr	r3, [pc, #228]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec4:	4a38      	ldr	r2, [pc, #224]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ec6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	699b      	ldr	r3, [r3, #24]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	f000 80a1 	beq.w	8004018 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ed6:	4b34      	ldr	r3, [pc, #208]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	f003 030c 	and.w	r3, r3, #12
 8003ede:	2b08      	cmp	r3, #8
 8003ee0:	d05c      	beq.n	8003f9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d141      	bne.n	8003f6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003eea:	4b31      	ldr	r3, [pc, #196]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ef0:	f7fd fac8 	bl	8001484 <HAL_GetTick>
 8003ef4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef6:	e008      	b.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ef8:	f7fd fac4 	bl	8001484 <HAL_GetTick>
 8003efc:	4602      	mov	r2, r0
 8003efe:	693b      	ldr	r3, [r7, #16]
 8003f00:	1ad3      	subs	r3, r2, r3
 8003f02:	2b02      	cmp	r3, #2
 8003f04:	d901      	bls.n	8003f0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003f06:	2303      	movs	r3, #3
 8003f08:	e087      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f0a:	4b27      	ldr	r3, [pc, #156]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d1f0      	bne.n	8003ef8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	69da      	ldr	r2, [r3, #28]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f24:	019b      	lsls	r3, r3, #6
 8003f26:	431a      	orrs	r2, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f2c:	085b      	lsrs	r3, r3, #1
 8003f2e:	3b01      	subs	r3, #1
 8003f30:	041b      	lsls	r3, r3, #16
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f38:	061b      	lsls	r3, r3, #24
 8003f3a:	491b      	ldr	r1, [pc, #108]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f3c:	4313      	orrs	r3, r2
 8003f3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f40:	4b1b      	ldr	r3, [pc, #108]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f46:	f7fd fa9d 	bl	8001484 <HAL_GetTick>
 8003f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f4c:	e008      	b.n	8003f60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f4e:	f7fd fa99 	bl	8001484 <HAL_GetTick>
 8003f52:	4602      	mov	r2, r0
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	1ad3      	subs	r3, r2, r3
 8003f58:	2b02      	cmp	r3, #2
 8003f5a:	d901      	bls.n	8003f60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e05c      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f60:	4b11      	ldr	r3, [pc, #68]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d0f0      	beq.n	8003f4e <HAL_RCC_OscConfig+0x416>
 8003f6c:	e054      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f6e:	4b10      	ldr	r3, [pc, #64]	; (8003fb0 <HAL_RCC_OscConfig+0x478>)
 8003f70:	2200      	movs	r2, #0
 8003f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f74:	f7fd fa86 	bl	8001484 <HAL_GetTick>
 8003f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f7a:	e008      	b.n	8003f8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f7c:	f7fd fa82 	bl	8001484 <HAL_GetTick>
 8003f80:	4602      	mov	r2, r0
 8003f82:	693b      	ldr	r3, [r7, #16]
 8003f84:	1ad3      	subs	r3, r2, r3
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d901      	bls.n	8003f8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e045      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f8e:	4b06      	ldr	r3, [pc, #24]	; (8003fa8 <HAL_RCC_OscConfig+0x470>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d1f0      	bne.n	8003f7c <HAL_RCC_OscConfig+0x444>
 8003f9a:	e03d      	b.n	8004018 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	699b      	ldr	r3, [r3, #24]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d107      	bne.n	8003fb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003fa4:	2301      	movs	r3, #1
 8003fa6:	e038      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
 8003fa8:	40023800 	.word	0x40023800
 8003fac:	40007000 	.word	0x40007000
 8003fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb4:	4b1b      	ldr	r3, [pc, #108]	; (8004024 <HAL_RCC_OscConfig+0x4ec>)
 8003fb6:	685b      	ldr	r3, [r3, #4]
 8003fb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	2b01      	cmp	r3, #1
 8003fc0:	d028      	beq.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fcc:	429a      	cmp	r2, r3
 8003fce:	d121      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fda:	429a      	cmp	r2, r3
 8003fdc:	d11a      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fde:	68fa      	ldr	r2, [r7, #12]
 8003fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe4:	4013      	ands	r3, r2
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d111      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ffa:	085b      	lsrs	r3, r3, #1
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004000:	429a      	cmp	r2, r3
 8004002:	d107      	bne.n	8004014 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e000      	b.n	800401a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004018:	2300      	movs	r3, #0
}
 800401a:	4618      	mov	r0, r3
 800401c:	3718      	adds	r7, #24
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}
 8004022:	bf00      	nop
 8004024:	40023800 	.word	0x40023800

08004028 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d101      	bne.n	800403c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004038:	2301      	movs	r3, #1
 800403a:	e0cc      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800403c:	4b68      	ldr	r3, [pc, #416]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f003 0307 	and.w	r3, r3, #7
 8004044:	683a      	ldr	r2, [r7, #0]
 8004046:	429a      	cmp	r2, r3
 8004048:	d90c      	bls.n	8004064 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404a:	4b65      	ldr	r3, [pc, #404]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800404c:	683a      	ldr	r2, [r7, #0]
 800404e:	b2d2      	uxtb	r2, r2
 8004050:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004052:	4b63      	ldr	r3, [pc, #396]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0307 	and.w	r3, r3, #7
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d001      	beq.n	8004064 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e0b8      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f003 0302 	and.w	r3, r3, #2
 800406c:	2b00      	cmp	r3, #0
 800406e:	d020      	beq.n	80040b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800407c:	4b59      	ldr	r3, [pc, #356]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a58      	ldr	r2, [pc, #352]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004086:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0308 	and.w	r3, r3, #8
 8004090:	2b00      	cmp	r3, #0
 8004092:	d005      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004094:	4b53      	ldr	r3, [pc, #332]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	4a52      	ldr	r2, [pc, #328]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800409e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a0:	4b50      	ldr	r3, [pc, #320]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040a2:	689b      	ldr	r3, [r3, #8]
 80040a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	494d      	ldr	r1, [pc, #308]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040ae:	4313      	orrs	r3, r2
 80040b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0301 	and.w	r3, r3, #1
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d044      	beq.n	8004148 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d107      	bne.n	80040d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040c6:	4b47      	ldr	r3, [pc, #284]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d119      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d2:	2301      	movs	r3, #1
 80040d4:	e07f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2b02      	cmp	r3, #2
 80040dc:	d003      	beq.n	80040e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e2:	2b03      	cmp	r3, #3
 80040e4:	d107      	bne.n	80040f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040e6:	4b3f      	ldr	r3, [pc, #252]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d109      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e06f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f6:	4b3b      	ldr	r3, [pc, #236]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f003 0302 	and.w	r3, r3, #2
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d101      	bne.n	8004106 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004102:	2301      	movs	r3, #1
 8004104:	e067      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004106:	4b37      	ldr	r3, [pc, #220]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f023 0203 	bic.w	r2, r3, #3
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	4934      	ldr	r1, [pc, #208]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004114:	4313      	orrs	r3, r2
 8004116:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004118:	f7fd f9b4 	bl	8001484 <HAL_GetTick>
 800411c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	e00a      	b.n	8004136 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004120:	f7fd f9b0 	bl	8001484 <HAL_GetTick>
 8004124:	4602      	mov	r2, r0
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	1ad3      	subs	r3, r2, r3
 800412a:	f241 3288 	movw	r2, #5000	; 0x1388
 800412e:	4293      	cmp	r3, r2
 8004130:	d901      	bls.n	8004136 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004132:	2303      	movs	r3, #3
 8004134:	e04f      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004136:	4b2b      	ldr	r3, [pc, #172]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 020c 	and.w	r2, r3, #12
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	009b      	lsls	r3, r3, #2
 8004144:	429a      	cmp	r2, r3
 8004146:	d1eb      	bne.n	8004120 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004148:	4b25      	ldr	r3, [pc, #148]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0307 	and.w	r3, r3, #7
 8004150:	683a      	ldr	r2, [r7, #0]
 8004152:	429a      	cmp	r2, r3
 8004154:	d20c      	bcs.n	8004170 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004156:	4b22      	ldr	r3, [pc, #136]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004158:	683a      	ldr	r2, [r7, #0]
 800415a:	b2d2      	uxtb	r2, r2
 800415c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800415e:	4b20      	ldr	r3, [pc, #128]	; (80041e0 <HAL_RCC_ClockConfig+0x1b8>)
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0307 	and.w	r3, r3, #7
 8004166:	683a      	ldr	r2, [r7, #0]
 8004168:	429a      	cmp	r2, r3
 800416a:	d001      	beq.n	8004170 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800416c:	2301      	movs	r3, #1
 800416e:	e032      	b.n	80041d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f003 0304 	and.w	r3, r3, #4
 8004178:	2b00      	cmp	r3, #0
 800417a:	d008      	beq.n	800418e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800417c:	4b19      	ldr	r3, [pc, #100]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800417e:	689b      	ldr	r3, [r3, #8]
 8004180:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	68db      	ldr	r3, [r3, #12]
 8004188:	4916      	ldr	r1, [pc, #88]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800418a:	4313      	orrs	r3, r2
 800418c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f003 0308 	and.w	r3, r3, #8
 8004196:	2b00      	cmp	r3, #0
 8004198:	d009      	beq.n	80041ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 800419c:	689b      	ldr	r3, [r3, #8]
 800419e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	00db      	lsls	r3, r3, #3
 80041a8:	490e      	ldr	r1, [pc, #56]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041aa:	4313      	orrs	r3, r2
 80041ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041ae:	f000 f821 	bl	80041f4 <HAL_RCC_GetSysClockFreq>
 80041b2:	4602      	mov	r2, r0
 80041b4:	4b0b      	ldr	r3, [pc, #44]	; (80041e4 <HAL_RCC_ClockConfig+0x1bc>)
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	091b      	lsrs	r3, r3, #4
 80041ba:	f003 030f 	and.w	r3, r3, #15
 80041be:	490a      	ldr	r1, [pc, #40]	; (80041e8 <HAL_RCC_ClockConfig+0x1c0>)
 80041c0:	5ccb      	ldrb	r3, [r1, r3]
 80041c2:	fa22 f303 	lsr.w	r3, r2, r3
 80041c6:	4a09      	ldr	r2, [pc, #36]	; (80041ec <HAL_RCC_ClockConfig+0x1c4>)
 80041c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ca:	4b09      	ldr	r3, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4618      	mov	r0, r3
 80041d0:	f7fd f914 	bl	80013fc <HAL_InitTick>

  return HAL_OK;
 80041d4:	2300      	movs	r3, #0
}
 80041d6:	4618      	mov	r0, r3
 80041d8:	3710      	adds	r7, #16
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop
 80041e0:	40023c00 	.word	0x40023c00
 80041e4:	40023800 	.word	0x40023800
 80041e8:	0800a430 	.word	0x0800a430
 80041ec:	20000000 	.word	0x20000000
 80041f0:	20000004 	.word	0x20000004

080041f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041f8:	b094      	sub	sp, #80	; 0x50
 80041fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041fc:	2300      	movs	r3, #0
 80041fe:	647b      	str	r3, [r7, #68]	; 0x44
 8004200:	2300      	movs	r3, #0
 8004202:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004204:	2300      	movs	r3, #0
 8004206:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004208:	2300      	movs	r3, #0
 800420a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800420c:	4b79      	ldr	r3, [pc, #484]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800420e:	689b      	ldr	r3, [r3, #8]
 8004210:	f003 030c 	and.w	r3, r3, #12
 8004214:	2b08      	cmp	r3, #8
 8004216:	d00d      	beq.n	8004234 <HAL_RCC_GetSysClockFreq+0x40>
 8004218:	2b08      	cmp	r3, #8
 800421a:	f200 80e1 	bhi.w	80043e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800421e:	2b00      	cmp	r3, #0
 8004220:	d002      	beq.n	8004228 <HAL_RCC_GetSysClockFreq+0x34>
 8004222:	2b04      	cmp	r3, #4
 8004224:	d003      	beq.n	800422e <HAL_RCC_GetSysClockFreq+0x3a>
 8004226:	e0db      	b.n	80043e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004228:	4b73      	ldr	r3, [pc, #460]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800422a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800422c:	e0db      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800422e:	4b73      	ldr	r3, [pc, #460]	; (80043fc <HAL_RCC_GetSysClockFreq+0x208>)
 8004230:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004232:	e0d8      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004234:	4b6f      	ldr	r3, [pc, #444]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800423c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800423e:	4b6d      	ldr	r3, [pc, #436]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004246:	2b00      	cmp	r3, #0
 8004248:	d063      	beq.n	8004312 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424a:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	099b      	lsrs	r3, r3, #6
 8004250:	2200      	movs	r2, #0
 8004252:	63bb      	str	r3, [r7, #56]	; 0x38
 8004254:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004256:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800425c:	633b      	str	r3, [r7, #48]	; 0x30
 800425e:	2300      	movs	r3, #0
 8004260:	637b      	str	r3, [r7, #52]	; 0x34
 8004262:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004266:	4622      	mov	r2, r4
 8004268:	462b      	mov	r3, r5
 800426a:	f04f 0000 	mov.w	r0, #0
 800426e:	f04f 0100 	mov.w	r1, #0
 8004272:	0159      	lsls	r1, r3, #5
 8004274:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004278:	0150      	lsls	r0, r2, #5
 800427a:	4602      	mov	r2, r0
 800427c:	460b      	mov	r3, r1
 800427e:	4621      	mov	r1, r4
 8004280:	1a51      	subs	r1, r2, r1
 8004282:	6139      	str	r1, [r7, #16]
 8004284:	4629      	mov	r1, r5
 8004286:	eb63 0301 	sbc.w	r3, r3, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004298:	4659      	mov	r1, fp
 800429a:	018b      	lsls	r3, r1, #6
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80042a2:	4651      	mov	r1, sl
 80042a4:	018a      	lsls	r2, r1, #6
 80042a6:	4651      	mov	r1, sl
 80042a8:	ebb2 0801 	subs.w	r8, r2, r1
 80042ac:	4659      	mov	r1, fp
 80042ae:	eb63 0901 	sbc.w	r9, r3, r1
 80042b2:	f04f 0200 	mov.w	r2, #0
 80042b6:	f04f 0300 	mov.w	r3, #0
 80042ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042c6:	4690      	mov	r8, r2
 80042c8:	4699      	mov	r9, r3
 80042ca:	4623      	mov	r3, r4
 80042cc:	eb18 0303 	adds.w	r3, r8, r3
 80042d0:	60bb      	str	r3, [r7, #8]
 80042d2:	462b      	mov	r3, r5
 80042d4:	eb49 0303 	adc.w	r3, r9, r3
 80042d8:	60fb      	str	r3, [r7, #12]
 80042da:	f04f 0200 	mov.w	r2, #0
 80042de:	f04f 0300 	mov.w	r3, #0
 80042e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042e6:	4629      	mov	r1, r5
 80042e8:	024b      	lsls	r3, r1, #9
 80042ea:	4621      	mov	r1, r4
 80042ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042f0:	4621      	mov	r1, r4
 80042f2:	024a      	lsls	r2, r1, #9
 80042f4:	4610      	mov	r0, r2
 80042f6:	4619      	mov	r1, r3
 80042f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042fa:	2200      	movs	r2, #0
 80042fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80042fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004300:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004304:	f7fc f978 	bl	80005f8 <__aeabi_uldivmod>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4613      	mov	r3, r2
 800430e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004310:	e058      	b.n	80043c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004312:	4b38      	ldr	r3, [pc, #224]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8004314:	685b      	ldr	r3, [r3, #4]
 8004316:	099b      	lsrs	r3, r3, #6
 8004318:	2200      	movs	r2, #0
 800431a:	4618      	mov	r0, r3
 800431c:	4611      	mov	r1, r2
 800431e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	2300      	movs	r3, #0
 8004326:	627b      	str	r3, [r7, #36]	; 0x24
 8004328:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800432c:	4642      	mov	r2, r8
 800432e:	464b      	mov	r3, r9
 8004330:	f04f 0000 	mov.w	r0, #0
 8004334:	f04f 0100 	mov.w	r1, #0
 8004338:	0159      	lsls	r1, r3, #5
 800433a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800433e:	0150      	lsls	r0, r2, #5
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	4641      	mov	r1, r8
 8004346:	ebb2 0a01 	subs.w	sl, r2, r1
 800434a:	4649      	mov	r1, r9
 800434c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004350:	f04f 0200 	mov.w	r2, #0
 8004354:	f04f 0300 	mov.w	r3, #0
 8004358:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800435c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004360:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004364:	ebb2 040a 	subs.w	r4, r2, sl
 8004368:	eb63 050b 	sbc.w	r5, r3, fp
 800436c:	f04f 0200 	mov.w	r2, #0
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	00eb      	lsls	r3, r5, #3
 8004376:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800437a:	00e2      	lsls	r2, r4, #3
 800437c:	4614      	mov	r4, r2
 800437e:	461d      	mov	r5, r3
 8004380:	4643      	mov	r3, r8
 8004382:	18e3      	adds	r3, r4, r3
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	464b      	mov	r3, r9
 8004388:	eb45 0303 	adc.w	r3, r5, r3
 800438c:	607b      	str	r3, [r7, #4]
 800438e:	f04f 0200 	mov.w	r2, #0
 8004392:	f04f 0300 	mov.w	r3, #0
 8004396:	e9d7 4500 	ldrd	r4, r5, [r7]
 800439a:	4629      	mov	r1, r5
 800439c:	028b      	lsls	r3, r1, #10
 800439e:	4621      	mov	r1, r4
 80043a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80043a4:	4621      	mov	r1, r4
 80043a6:	028a      	lsls	r2, r1, #10
 80043a8:	4610      	mov	r0, r2
 80043aa:	4619      	mov	r1, r3
 80043ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043ae:	2200      	movs	r2, #0
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	61fa      	str	r2, [r7, #28]
 80043b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043b8:	f7fc f91e 	bl	80005f8 <__aeabi_uldivmod>
 80043bc:	4602      	mov	r2, r0
 80043be:	460b      	mov	r3, r1
 80043c0:	4613      	mov	r3, r2
 80043c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043c4:	4b0b      	ldr	r3, [pc, #44]	; (80043f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	0c1b      	lsrs	r3, r3, #16
 80043ca:	f003 0303 	and.w	r3, r3, #3
 80043ce:	3301      	adds	r3, #1
 80043d0:	005b      	lsls	r3, r3, #1
 80043d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80043dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043de:	e002      	b.n	80043e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043e0:	4b05      	ldr	r3, [pc, #20]	; (80043f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80043e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043e8:	4618      	mov	r0, r3
 80043ea:	3750      	adds	r7, #80	; 0x50
 80043ec:	46bd      	mov	sp, r7
 80043ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043f2:	bf00      	nop
 80043f4:	40023800 	.word	0x40023800
 80043f8:	00f42400 	.word	0x00f42400
 80043fc:	007a1200 	.word	0x007a1200

08004400 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004400:	b480      	push	{r7}
 8004402:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004404:	4b03      	ldr	r3, [pc, #12]	; (8004414 <HAL_RCC_GetHCLKFreq+0x14>)
 8004406:	681b      	ldr	r3, [r3, #0]
}
 8004408:	4618      	mov	r0, r3
 800440a:	46bd      	mov	sp, r7
 800440c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	20000000 	.word	0x20000000

08004418 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004418:	b580      	push	{r7, lr}
 800441a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800441c:	f7ff fff0 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004420:	4602      	mov	r2, r0
 8004422:	4b05      	ldr	r3, [pc, #20]	; (8004438 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004424:	689b      	ldr	r3, [r3, #8]
 8004426:	0a9b      	lsrs	r3, r3, #10
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	4903      	ldr	r1, [pc, #12]	; (800443c <HAL_RCC_GetPCLK1Freq+0x24>)
 800442e:	5ccb      	ldrb	r3, [r1, r3]
 8004430:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004434:	4618      	mov	r0, r3
 8004436:	bd80      	pop	{r7, pc}
 8004438:	40023800 	.word	0x40023800
 800443c:	0800a440 	.word	0x0800a440

08004440 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004444:	f7ff ffdc 	bl	8004400 <HAL_RCC_GetHCLKFreq>
 8004448:	4602      	mov	r2, r0
 800444a:	4b05      	ldr	r3, [pc, #20]	; (8004460 <HAL_RCC_GetPCLK2Freq+0x20>)
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	0b5b      	lsrs	r3, r3, #13
 8004450:	f003 0307 	and.w	r3, r3, #7
 8004454:	4903      	ldr	r1, [pc, #12]	; (8004464 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004456:	5ccb      	ldrb	r3, [r1, r3]
 8004458:	fa22 f303 	lsr.w	r3, r2, r3
}
 800445c:	4618      	mov	r0, r3
 800445e:	bd80      	pop	{r7, pc}
 8004460:	40023800 	.word	0x40023800
 8004464:	0800a440 	.word	0x0800a440

08004468 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004470:	2300      	movs	r3, #0
 8004472:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0301 	and.w	r3, r3, #1
 8004480:	2b00      	cmp	r3, #0
 8004482:	d105      	bne.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800448c:	2b00      	cmp	r3, #0
 800448e:	d035      	beq.n	80044fc <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004490:	4b62      	ldr	r3, [pc, #392]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8004492:	2200      	movs	r2, #0
 8004494:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8004496:	f7fc fff5 	bl	8001484 <HAL_GetTick>
 800449a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800449c:	e008      	b.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 800449e:	f7fc fff1 	bl	8001484 <HAL_GetTick>
 80044a2:	4602      	mov	r2, r0
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	1ad3      	subs	r3, r2, r3
 80044a8:	2b02      	cmp	r3, #2
 80044aa:	d901      	bls.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ac:	2303      	movs	r3, #3
 80044ae:	e0b0      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80044b0:	4b5b      	ldr	r3, [pc, #364]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d1f0      	bne.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	019a      	lsls	r2, r3, #6
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	689b      	ldr	r3, [r3, #8]
 80044c6:	071b      	lsls	r3, r3, #28
 80044c8:	4955      	ldr	r1, [pc, #340]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044ca:	4313      	orrs	r3, r2
 80044cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80044d0:	4b52      	ldr	r3, [pc, #328]	; (800461c <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80044d2:	2201      	movs	r2, #1
 80044d4:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80044d6:	f7fc ffd5 	bl	8001484 <HAL_GetTick>
 80044da:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044dc:	e008      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80044de:	f7fc ffd1 	bl	8001484 <HAL_GetTick>
 80044e2:	4602      	mov	r2, r0
 80044e4:	697b      	ldr	r3, [r7, #20]
 80044e6:	1ad3      	subs	r3, r2, r3
 80044e8:	2b02      	cmp	r3, #2
 80044ea:	d901      	bls.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80044ec:	2303      	movs	r3, #3
 80044ee:	e090      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80044f0:	4b4b      	ldr	r3, [pc, #300]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d0f0      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f003 0302 	and.w	r3, r3, #2
 8004504:	2b00      	cmp	r3, #0
 8004506:	f000 8083 	beq.w	8004610 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]
 800450e:	4b44      	ldr	r3, [pc, #272]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004512:	4a43      	ldr	r2, [pc, #268]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004514:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004518:	6413      	str	r3, [r2, #64]	; 0x40
 800451a:	4b41      	ldr	r3, [pc, #260]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800451c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800451e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004522:	60fb      	str	r3, [r7, #12]
 8004524:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8004526:	4b3f      	ldr	r3, [pc, #252]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a3e      	ldr	r2, [pc, #248]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800452c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004530:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8004532:	f7fc ffa7 	bl	8001484 <HAL_GetTick>
 8004536:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8004538:	e008      	b.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800453a:	f7fc ffa3 	bl	8001484 <HAL_GetTick>
 800453e:	4602      	mov	r2, r0
 8004540:	697b      	ldr	r3, [r7, #20]
 8004542:	1ad3      	subs	r3, r2, r3
 8004544:	2b02      	cmp	r3, #2
 8004546:	d901      	bls.n	800454c <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8004548:	2303      	movs	r3, #3
 800454a:	e062      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800454c:	4b35      	ldr	r3, [pc, #212]	; (8004624 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004554:	2b00      	cmp	r3, #0
 8004556:	d0f0      	beq.n	800453a <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004558:	4b31      	ldr	r3, [pc, #196]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800455a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004560:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004562:	693b      	ldr	r3, [r7, #16]
 8004564:	2b00      	cmp	r3, #0
 8004566:	d02f      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	68db      	ldr	r3, [r3, #12]
 800456c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004570:	693a      	ldr	r2, [r7, #16]
 8004572:	429a      	cmp	r2, r3
 8004574:	d028      	beq.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004576:	4b2a      	ldr	r3, [pc, #168]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800457a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800457e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004580:	4b29      	ldr	r3, [pc, #164]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004582:	2201      	movs	r2, #1
 8004584:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004586:	4b28      	ldr	r3, [pc, #160]	; (8004628 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8004588:	2200      	movs	r2, #0
 800458a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800458c:	4a24      	ldr	r2, [pc, #144]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800458e:	693b      	ldr	r3, [r7, #16]
 8004590:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8004592:	4b23      	ldr	r3, [pc, #140]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004594:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004596:	f003 0301 	and.w	r3, r3, #1
 800459a:	2b01      	cmp	r3, #1
 800459c:	d114      	bne.n	80045c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800459e:	f7fc ff71 	bl	8001484 <HAL_GetTick>
 80045a2:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045a4:	e00a      	b.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80045a6:	f7fc ff6d 	bl	8001484 <HAL_GetTick>
 80045aa:	4602      	mov	r2, r0
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	1ad3      	subs	r3, r2, r3
 80045b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d901      	bls.n	80045bc <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80045b8:	2303      	movs	r3, #3
 80045ba:	e02a      	b.n	8004612 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045bc:	4b18      	ldr	r3, [pc, #96]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045c0:	f003 0302 	and.w	r3, r3, #2
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d0ee      	beq.n	80045a6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045d4:	d10d      	bne.n	80045f2 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80045e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80045ea:	490d      	ldr	r1, [pc, #52]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	608b      	str	r3, [r1, #8]
 80045f0:	e005      	b.n	80045fe <HAL_RCCEx_PeriphCLKConfig+0x196>
 80045f2:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	4a0a      	ldr	r2, [pc, #40]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80045f8:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80045fc:	6093      	str	r3, [r2, #8]
 80045fe:	4b08      	ldr	r3, [pc, #32]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8004600:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	68db      	ldr	r3, [r3, #12]
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	4905      	ldr	r1, [pc, #20]	; (8004620 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800460c:	4313      	orrs	r3, r2
 800460e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3718      	adds	r7, #24
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	42470068 	.word	0x42470068
 8004620:	40023800 	.word	0x40023800
 8004624:	40007000 	.word	0x40007000
 8004628:	42470e40 	.word	0x42470e40

0800462c <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800462c:	b480      	push	{r7}
 800462e:	b087      	sub	sp, #28
 8004630:	af00      	add	r7, sp, #0
 8004632:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8004634:	2300      	movs	r3, #0
 8004636:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8004640:	2300      	movs	r3, #0
 8004642:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	2b01      	cmp	r3, #1
 8004648:	d13e      	bne.n	80046c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800464a:	4b23      	ldr	r3, [pc, #140]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004652:	60fb      	str	r3, [r7, #12]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d005      	beq.n	8004666 <HAL_RCCEx_GetPeriphCLKFreq+0x3a>
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	2b01      	cmp	r3, #1
 800465e:	d12f      	bne.n	80046c0 <HAL_RCCEx_GetPeriphCLKFreq+0x94>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8004660:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8004662:	617b      	str	r3, [r7, #20]
          break;
 8004664:	e02f      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8004666:	4b1c      	ldr	r3, [pc, #112]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800466e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004672:	d108      	bne.n	8004686 <HAL_RCCEx_GetPeriphCLKFreq+0x5a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004674:	4b18      	ldr	r3, [pc, #96]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800467c:	4a18      	ldr	r2, [pc, #96]	; (80046e0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 800467e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	e007      	b.n	8004696 <HAL_RCCEx_GetPeriphCLKFreq+0x6a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8004686:	4b14      	ldr	r3, [pc, #80]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 8004690:	fbb2 f3f3 	udiv	r3, r2, r3
 8004694:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8004696:	4b10      	ldr	r3, [pc, #64]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8004698:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800469c:	099b      	lsrs	r3, r3, #6
 800469e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80046a2:	693b      	ldr	r3, [r7, #16]
 80046a4:	fb02 f303 	mul.w	r3, r2, r3
 80046a8:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80046aa:	4b0b      	ldr	r3, [pc, #44]	; (80046d8 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 80046ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80046b0:	0f1b      	lsrs	r3, r3, #28
 80046b2:	f003 0307 	and.w	r3, r3, #7
 80046b6:	68ba      	ldr	r2, [r7, #8]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	617b      	str	r3, [r7, #20]
          break;
 80046be:	e002      	b.n	80046c6 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	617b      	str	r3, [r7, #20]
          break;
 80046c4:	bf00      	nop
        }
      }
      break;
 80046c6:	bf00      	nop
    }
  }
  return frequency;
 80046c8:	697b      	ldr	r3, [r7, #20]
}
 80046ca:	4618      	mov	r0, r3
 80046cc:	371c      	adds	r7, #28
 80046ce:	46bd      	mov	sp, r7
 80046d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d4:	4770      	bx	lr
 80046d6:	bf00      	nop
 80046d8:	40023800 	.word	0x40023800
 80046dc:	00bb8000 	.word	0x00bb8000
 80046e0:	007a1200 	.word	0x007a1200
 80046e4:	00f42400 	.word	0x00f42400

080046e8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b082      	sub	sp, #8
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d101      	bne.n	80046fa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e07b      	b.n	80047f2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d108      	bne.n	8004714 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	685b      	ldr	r3, [r3, #4]
 8004706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800470a:	d009      	beq.n	8004720 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2200      	movs	r2, #0
 8004710:	61da      	str	r2, [r3, #28]
 8004712:	e005      	b.n	8004720 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2200      	movs	r2, #0
 800471e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2200      	movs	r2, #0
 8004724:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b00      	cmp	r3, #0
 8004730:	d106      	bne.n	8004740 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7fc fd06 	bl	800114c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2202      	movs	r2, #2
 8004744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	681a      	ldr	r2, [r3, #0]
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004756:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004768:	431a      	orrs	r2, r3
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	68db      	ldr	r3, [r3, #12]
 800476e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004772:	431a      	orrs	r2, r3
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	f003 0302 	and.w	r3, r3, #2
 800477c:	431a      	orrs	r2, r3
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f003 0301 	and.w	r3, r3, #1
 8004786:	431a      	orrs	r2, r3
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004790:	431a      	orrs	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	69db      	ldr	r3, [r3, #28]
 8004796:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800479a:	431a      	orrs	r2, r3
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6a1b      	ldr	r3, [r3, #32]
 80047a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80047a4:	ea42 0103 	orr.w	r1, r2, r3
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ac:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	430a      	orrs	r2, r1
 80047b6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	0c1b      	lsrs	r3, r3, #16
 80047be:	f003 0104 	and.w	r1, r3, #4
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047c6:	f003 0210 	and.w	r2, r3, #16
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	69da      	ldr	r2, [r3, #28]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047e0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}

080047fa <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80047fa:	b580      	push	{r7, lr}
 80047fc:	b088      	sub	sp, #32
 80047fe:	af00      	add	r7, sp, #0
 8004800:	60f8      	str	r0, [r7, #12]
 8004802:	60b9      	str	r1, [r7, #8]
 8004804:	603b      	str	r3, [r7, #0]
 8004806:	4613      	mov	r3, r2
 8004808:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800480a:	2300      	movs	r3, #0
 800480c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004814:	2b01      	cmp	r3, #1
 8004816:	d101      	bne.n	800481c <HAL_SPI_Transmit+0x22>
 8004818:	2302      	movs	r3, #2
 800481a:	e126      	b.n	8004a6a <HAL_SPI_Transmit+0x270>
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2201      	movs	r2, #1
 8004820:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004824:	f7fc fe2e 	bl	8001484 <HAL_GetTick>
 8004828:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800482a:	88fb      	ldrh	r3, [r7, #6]
 800482c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b01      	cmp	r3, #1
 8004838:	d002      	beq.n	8004840 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800483a:	2302      	movs	r3, #2
 800483c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800483e:	e10b      	b.n	8004a58 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004840:	68bb      	ldr	r3, [r7, #8]
 8004842:	2b00      	cmp	r3, #0
 8004844:	d002      	beq.n	800484c <HAL_SPI_Transmit+0x52>
 8004846:	88fb      	ldrh	r3, [r7, #6]
 8004848:	2b00      	cmp	r3, #0
 800484a:	d102      	bne.n	8004852 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004850:	e102      	b.n	8004a58 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	2203      	movs	r2, #3
 8004856:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	2200      	movs	r2, #0
 800485e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2200      	movs	r2, #0
 800487c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	2200      	movs	r2, #0
 8004882:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	2200      	movs	r2, #0
 8004888:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	689b      	ldr	r3, [r3, #8]
 8004894:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004898:	d10f      	bne.n	80048ba <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	681a      	ldr	r2, [r3, #0]
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048a8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	681a      	ldr	r2, [r3, #0]
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048b8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048c4:	2b40      	cmp	r3, #64	; 0x40
 80048c6:	d007      	beq.n	80048d8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048d6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048e0:	d14b      	bne.n	800497a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d002      	beq.n	80048f0 <HAL_SPI_Transmit+0xf6>
 80048ea:	8afb      	ldrh	r3, [r7, #22]
 80048ec:	2b01      	cmp	r3, #1
 80048ee:	d13e      	bne.n	800496e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048f4:	881a      	ldrh	r2, [r3, #0]
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004900:	1c9a      	adds	r2, r3, #2
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800490a:	b29b      	uxth	r3, r3
 800490c:	3b01      	subs	r3, #1
 800490e:	b29a      	uxth	r2, r3
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004914:	e02b      	b.n	800496e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0302 	and.w	r3, r3, #2
 8004920:	2b02      	cmp	r3, #2
 8004922:	d112      	bne.n	800494a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004924:	68fb      	ldr	r3, [r7, #12]
 8004926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004928:	881a      	ldrh	r2, [r3, #0]
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004934:	1c9a      	adds	r2, r3, #2
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800493e:	b29b      	uxth	r3, r3
 8004940:	3b01      	subs	r3, #1
 8004942:	b29a      	uxth	r2, r3
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	86da      	strh	r2, [r3, #54]	; 0x36
 8004948:	e011      	b.n	800496e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800494a:	f7fc fd9b 	bl	8001484 <HAL_GetTick>
 800494e:	4602      	mov	r2, r0
 8004950:	69bb      	ldr	r3, [r7, #24]
 8004952:	1ad3      	subs	r3, r2, r3
 8004954:	683a      	ldr	r2, [r7, #0]
 8004956:	429a      	cmp	r2, r3
 8004958:	d803      	bhi.n	8004962 <HAL_SPI_Transmit+0x168>
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004960:	d102      	bne.n	8004968 <HAL_SPI_Transmit+0x16e>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	2b00      	cmp	r3, #0
 8004966:	d102      	bne.n	800496e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004968:	2303      	movs	r3, #3
 800496a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800496c:	e074      	b.n	8004a58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004972:	b29b      	uxth	r3, r3
 8004974:	2b00      	cmp	r3, #0
 8004976:	d1ce      	bne.n	8004916 <HAL_SPI_Transmit+0x11c>
 8004978:	e04c      	b.n	8004a14 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	685b      	ldr	r3, [r3, #4]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d002      	beq.n	8004988 <HAL_SPI_Transmit+0x18e>
 8004982:	8afb      	ldrh	r3, [r7, #22]
 8004984:	2b01      	cmp	r3, #1
 8004986:	d140      	bne.n	8004a0a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	330c      	adds	r3, #12
 8004992:	7812      	ldrb	r2, [r2, #0]
 8004994:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800499a:	1c5a      	adds	r2, r3, #1
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049a4:	b29b      	uxth	r3, r3
 80049a6:	3b01      	subs	r3, #1
 80049a8:	b29a      	uxth	r2, r3
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80049ae:	e02c      	b.n	8004a0a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 0302 	and.w	r3, r3, #2
 80049ba:	2b02      	cmp	r3, #2
 80049bc:	d113      	bne.n	80049e6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	330c      	adds	r3, #12
 80049c8:	7812      	ldrb	r2, [r2, #0]
 80049ca:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d0:	1c5a      	adds	r2, r3, #1
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80049da:	b29b      	uxth	r3, r3
 80049dc:	3b01      	subs	r3, #1
 80049de:	b29a      	uxth	r2, r3
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	86da      	strh	r2, [r3, #54]	; 0x36
 80049e4:	e011      	b.n	8004a0a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80049e6:	f7fc fd4d 	bl	8001484 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	683a      	ldr	r2, [r7, #0]
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d803      	bhi.n	80049fe <HAL_SPI_Transmit+0x204>
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049fc:	d102      	bne.n	8004a04 <HAL_SPI_Transmit+0x20a>
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d102      	bne.n	8004a0a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004a04:	2303      	movs	r3, #3
 8004a06:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004a08:	e026      	b.n	8004a58 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d1cd      	bne.n	80049b0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004a14:	69ba      	ldr	r2, [r7, #24]
 8004a16:	6839      	ldr	r1, [r7, #0]
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 fbcb 	bl	80051b4 <SPI_EndRxTxTransaction>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d002      	beq.n	8004a2a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	689b      	ldr	r3, [r3, #8]
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d10a      	bne.n	8004a48 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	68db      	ldr	r3, [r3, #12]
 8004a3c:	613b      	str	r3, [r7, #16]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	613b      	str	r3, [r7, #16]
 8004a46:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d002      	beq.n	8004a56 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004a50:	2301      	movs	r3, #1
 8004a52:	77fb      	strb	r3, [r7, #31]
 8004a54:	e000      	b.n	8004a58 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004a56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	2201      	movs	r2, #1
 8004a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	2200      	movs	r2, #0
 8004a64:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004a68:	7ffb      	ldrb	r3, [r7, #31]
}
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	3720      	adds	r7, #32
 8004a6e:	46bd      	mov	sp, r7
 8004a70:	bd80      	pop	{r7, pc}

08004a72 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a72:	b580      	push	{r7, lr}
 8004a74:	b088      	sub	sp, #32
 8004a76:	af02      	add	r7, sp, #8
 8004a78:	60f8      	str	r0, [r7, #12]
 8004a7a:	60b9      	str	r1, [r7, #8]
 8004a7c:	603b      	str	r3, [r7, #0]
 8004a7e:	4613      	mov	r3, r2
 8004a80:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a82:	2300      	movs	r3, #0
 8004a84:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	685b      	ldr	r3, [r3, #4]
 8004a8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a8e:	d112      	bne.n	8004ab6 <HAL_SPI_Receive+0x44>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	689b      	ldr	r3, [r3, #8]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d10e      	bne.n	8004ab6 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	2204      	movs	r2, #4
 8004a9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4613      	mov	r3, r2
 8004aa8:	68ba      	ldr	r2, [r7, #8]
 8004aaa:	68b9      	ldr	r1, [r7, #8]
 8004aac:	68f8      	ldr	r0, [r7, #12]
 8004aae:	f000 f8f1 	bl	8004c94 <HAL_SPI_TransmitReceive>
 8004ab2:	4603      	mov	r3, r0
 8004ab4:	e0ea      	b.n	8004c8c <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004abc:	2b01      	cmp	r3, #1
 8004abe:	d101      	bne.n	8004ac4 <HAL_SPI_Receive+0x52>
 8004ac0:	2302      	movs	r3, #2
 8004ac2:	e0e3      	b.n	8004c8c <HAL_SPI_Receive+0x21a>
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004acc:	f7fc fcda 	bl	8001484 <HAL_GetTick>
 8004ad0:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d002      	beq.n	8004ae4 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004ade:	2302      	movs	r3, #2
 8004ae0:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004ae2:	e0ca      	b.n	8004c7a <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d002      	beq.n	8004af0 <HAL_SPI_Receive+0x7e>
 8004aea:	88fb      	ldrh	r3, [r7, #6]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004af4:	e0c1      	b.n	8004c7a <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2204      	movs	r2, #4
 8004afa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	2200      	movs	r2, #0
 8004b02:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	68ba      	ldr	r2, [r7, #8]
 8004b08:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	88fa      	ldrh	r2, [r7, #6]
 8004b0e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004b10:	68fb      	ldr	r3, [r7, #12]
 8004b12:	88fa      	ldrh	r2, [r7, #6]
 8004b14:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	2200      	movs	r2, #0
 8004b1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	2200      	movs	r2, #0
 8004b20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	2200      	movs	r2, #0
 8004b2c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2200      	movs	r2, #0
 8004b32:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	689b      	ldr	r3, [r3, #8]
 8004b38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b3c:	d10f      	bne.n	8004b5e <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681a      	ldr	r2, [r3, #0]
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b4c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681a      	ldr	r2, [r3, #0]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004b5c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b68:	2b40      	cmp	r3, #64	; 0x40
 8004b6a:	d007      	beq.n	8004b7c <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	681a      	ldr	r2, [r3, #0]
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b7a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	68db      	ldr	r3, [r3, #12]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d162      	bne.n	8004c4a <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8004b84:	e02e      	b.n	8004be4 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	689b      	ldr	r3, [r3, #8]
 8004b8c:	f003 0301 	and.w	r3, r3, #1
 8004b90:	2b01      	cmp	r3, #1
 8004b92:	d115      	bne.n	8004bc0 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f103 020c 	add.w	r2, r3, #12
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ba0:	7812      	ldrb	r2, [r2, #0]
 8004ba2:	b2d2      	uxtb	r2, r2
 8004ba4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004baa:	1c5a      	adds	r2, r3, #1
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004bb4:	b29b      	uxth	r3, r3
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004bbe:	e011      	b.n	8004be4 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bc0:	f7fc fc60 	bl	8001484 <HAL_GetTick>
 8004bc4:	4602      	mov	r2, r0
 8004bc6:	693b      	ldr	r3, [r7, #16]
 8004bc8:	1ad3      	subs	r3, r2, r3
 8004bca:	683a      	ldr	r2, [r7, #0]
 8004bcc:	429a      	cmp	r2, r3
 8004bce:	d803      	bhi.n	8004bd8 <HAL_SPI_Receive+0x166>
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bd6:	d102      	bne.n	8004bde <HAL_SPI_Receive+0x16c>
 8004bd8:	683b      	ldr	r3, [r7, #0]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d102      	bne.n	8004be4 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 8004bde:	2303      	movs	r3, #3
 8004be0:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004be2:	e04a      	b.n	8004c7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004be8:	b29b      	uxth	r3, r3
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d1cb      	bne.n	8004b86 <HAL_SPI_Receive+0x114>
 8004bee:	e031      	b.n	8004c54 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	f003 0301 	and.w	r3, r3, #1
 8004bfa:	2b01      	cmp	r3, #1
 8004bfc:	d113      	bne.n	8004c26 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68da      	ldr	r2, [r3, #12]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c08:	b292      	uxth	r2, r2
 8004c0a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c10:	1c9a      	adds	r2, r3, #2
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c1a:	b29b      	uxth	r3, r3
 8004c1c:	3b01      	subs	r3, #1
 8004c1e:	b29a      	uxth	r2, r3
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004c24:	e011      	b.n	8004c4a <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c26:	f7fc fc2d 	bl	8001484 <HAL_GetTick>
 8004c2a:	4602      	mov	r2, r0
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	1ad3      	subs	r3, r2, r3
 8004c30:	683a      	ldr	r2, [r7, #0]
 8004c32:	429a      	cmp	r2, r3
 8004c34:	d803      	bhi.n	8004c3e <HAL_SPI_Receive+0x1cc>
 8004c36:	683b      	ldr	r3, [r7, #0]
 8004c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c3c:	d102      	bne.n	8004c44 <HAL_SPI_Receive+0x1d2>
 8004c3e:	683b      	ldr	r3, [r7, #0]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d102      	bne.n	8004c4a <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8004c44:	2303      	movs	r3, #3
 8004c46:	75fb      	strb	r3, [r7, #23]
          goto error;
 8004c48:	e017      	b.n	8004c7a <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004c4e:	b29b      	uxth	r3, r3
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d1cd      	bne.n	8004bf0 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c54:	693a      	ldr	r2, [r7, #16]
 8004c56:	6839      	ldr	r1, [r7, #0]
 8004c58:	68f8      	ldr	r0, [r7, #12]
 8004c5a:	f000 fa45 	bl	80050e8 <SPI_EndRxTransaction>
 8004c5e:	4603      	mov	r3, r0
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d002      	beq.n	8004c6a <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2220      	movs	r2, #32
 8004c68:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d002      	beq.n	8004c78 <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	75fb      	strb	r3, [r7, #23]
 8004c76:	e000      	b.n	8004c7a <HAL_SPI_Receive+0x208>
  }

error :
 8004c78:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	2201      	movs	r2, #1
 8004c7e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c8a:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	3718      	adds	r7, #24
 8004c90:	46bd      	mov	sp, r7
 8004c92:	bd80      	pop	{r7, pc}

08004c94 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b08c      	sub	sp, #48	; 0x30
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
 8004ca0:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004ca2:	2301      	movs	r3, #1
 8004ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8004ca6:	2300      	movs	r3, #0
 8004ca8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004cb2:	2b01      	cmp	r3, #1
 8004cb4:	d101      	bne.n	8004cba <HAL_SPI_TransmitReceive+0x26>
 8004cb6:	2302      	movs	r3, #2
 8004cb8:	e18a      	b.n	8004fd0 <HAL_SPI_TransmitReceive+0x33c>
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	2201      	movs	r2, #1
 8004cbe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004cc2:	f7fc fbdf 	bl	8001484 <HAL_GetTick>
 8004cc6:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004cce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	685b      	ldr	r3, [r3, #4]
 8004cd6:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8004cd8:	887b      	ldrh	r3, [r7, #2]
 8004cda:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004cdc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d00f      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x70>
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cea:	d107      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	689b      	ldr	r3, [r3, #8]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d103      	bne.n	8004cfc <HAL_SPI_TransmitReceive+0x68>
 8004cf4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004cf8:	2b04      	cmp	r3, #4
 8004cfa:	d003      	beq.n	8004d04 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8004cfc:	2302      	movs	r3, #2
 8004cfe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d02:	e15b      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d005      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x82>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d002      	beq.n	8004d16 <HAL_SPI_TransmitReceive+0x82>
 8004d10:	887b      	ldrh	r3, [r7, #2]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d103      	bne.n	8004d1e <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004d16:	2301      	movs	r3, #1
 8004d18:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004d1c:	e14e      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004d24:	b2db      	uxtb	r3, r3
 8004d26:	2b04      	cmp	r3, #4
 8004d28:	d003      	beq.n	8004d32 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	2205      	movs	r2, #5
 8004d2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	687a      	ldr	r2, [r7, #4]
 8004d3c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	887a      	ldrh	r2, [r7, #2]
 8004d42:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	887a      	ldrh	r2, [r7, #2]
 8004d48:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	68ba      	ldr	r2, [r7, #8]
 8004d4e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	887a      	ldrh	r2, [r7, #2]
 8004d54:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	887a      	ldrh	r2, [r7, #2]
 8004d5a:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	2200      	movs	r2, #0
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d72:	2b40      	cmp	r3, #64	; 0x40
 8004d74:	d007      	beq.n	8004d86 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	681a      	ldr	r2, [r3, #0]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004d84:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d8e:	d178      	bne.n	8004e82 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	685b      	ldr	r3, [r3, #4]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d002      	beq.n	8004d9e <HAL_SPI_TransmitReceive+0x10a>
 8004d98:	8b7b      	ldrh	r3, [r7, #26]
 8004d9a:	2b01      	cmp	r3, #1
 8004d9c:	d166      	bne.n	8004e6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004da2:	881a      	ldrh	r2, [r3, #0]
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	1c9a      	adds	r2, r3, #2
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004db8:	b29b      	uxth	r3, r3
 8004dba:	3b01      	subs	r3, #1
 8004dbc:	b29a      	uxth	r2, r3
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004dc2:	e053      	b.n	8004e6c <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	689b      	ldr	r3, [r3, #8]
 8004dca:	f003 0302 	and.w	r3, r3, #2
 8004dce:	2b02      	cmp	r3, #2
 8004dd0:	d11b      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x176>
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dd6:	b29b      	uxth	r3, r3
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d016      	beq.n	8004e0a <HAL_SPI_TransmitReceive+0x176>
 8004ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d113      	bne.n	8004e0a <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004de6:	881a      	ldrh	r2, [r3, #0]
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004df2:	1c9a      	adds	r2, r3, #2
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004dfc:	b29b      	uxth	r3, r3
 8004dfe:	3b01      	subs	r3, #1
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689b      	ldr	r3, [r3, #8]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d119      	bne.n	8004e4c <HAL_SPI_TransmitReceive+0x1b8>
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d014      	beq.n	8004e4c <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	68da      	ldr	r2, [r3, #12]
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	b292      	uxth	r2, r2
 8004e2e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e34:	1c9a      	adds	r2, r3, #2
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e3e:	b29b      	uxth	r3, r3
 8004e40:	3b01      	subs	r3, #1
 8004e42:	b29a      	uxth	r2, r3
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004e48:	2301      	movs	r3, #1
 8004e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8004e4c:	f7fc fb1a 	bl	8001484 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d807      	bhi.n	8004e6c <HAL_SPI_TransmitReceive+0x1d8>
 8004e5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e62:	d003      	beq.n	8004e6c <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004e6a:	e0a7      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004e70:	b29b      	uxth	r3, r3
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d1a6      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x130>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e7a:	b29b      	uxth	r3, r3
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d1a1      	bne.n	8004dc4 <HAL_SPI_TransmitReceive+0x130>
 8004e80:	e07c      	b.n	8004f7c <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	685b      	ldr	r3, [r3, #4]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_SPI_TransmitReceive+0x1fc>
 8004e8a:	8b7b      	ldrh	r3, [r7, #26]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d16b      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	330c      	adds	r3, #12
 8004e9a:	7812      	ldrb	r2, [r2, #0]
 8004e9c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea2:	1c5a      	adds	r2, r3, #1
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eac:	b29b      	uxth	r3, r3
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b29a      	uxth	r2, r3
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004eb6:	e057      	b.n	8004f68 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 0302 	and.w	r3, r3, #2
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d11c      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x26c>
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004eca:	b29b      	uxth	r3, r3
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d017      	beq.n	8004f00 <HAL_SPI_TransmitReceive+0x26c>
 8004ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d114      	bne.n	8004f00 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	330c      	adds	r3, #12
 8004ee0:	7812      	ldrb	r2, [r2, #0]
 8004ee2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ee8:	1c5a      	adds	r2, r3, #1
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ef2:	b29b      	uxth	r3, r3
 8004ef4:	3b01      	subs	r3, #1
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004efc:	2300      	movs	r3, #0
 8004efe:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	689b      	ldr	r3, [r3, #8]
 8004f06:	f003 0301 	and.w	r3, r3, #1
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d119      	bne.n	8004f42 <HAL_SPI_TransmitReceive+0x2ae>
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f12:	b29b      	uxth	r3, r3
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d014      	beq.n	8004f42 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	68da      	ldr	r2, [r3, #12]
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f22:	b2d2      	uxtb	r2, r2
 8004f24:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2a:	1c5a      	adds	r2, r3, #1
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f34:	b29b      	uxth	r3, r3
 8004f36:	3b01      	subs	r3, #1
 8004f38:	b29a      	uxth	r2, r3
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004f3e:	2301      	movs	r3, #1
 8004f40:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004f42:	f7fc fa9f 	bl	8001484 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d803      	bhi.n	8004f5a <HAL_SPI_TransmitReceive+0x2c6>
 8004f52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f58:	d102      	bne.n	8004f60 <HAL_SPI_TransmitReceive+0x2cc>
 8004f5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d103      	bne.n	8004f68 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8004f60:	2303      	movs	r3, #3
 8004f62:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8004f66:	e029      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004f6c:	b29b      	uxth	r3, r3
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d1a2      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x224>
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d19d      	bne.n	8004eb8 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004f7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004f7e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8004f80:	68f8      	ldr	r0, [r7, #12]
 8004f82:	f000 f917 	bl	80051b4 <SPI_EndRxTxTransaction>
 8004f86:	4603      	mov	r3, r0
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8004f8c:	2301      	movs	r3, #1
 8004f8e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	2220      	movs	r2, #32
 8004f96:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8004f98:	e010      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	689b      	ldr	r3, [r3, #8]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10b      	bne.n	8004fba <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	617b      	str	r3, [r7, #20]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68db      	ldr	r3, [r3, #12]
 8004fac:	617b      	str	r3, [r7, #20]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	689b      	ldr	r3, [r3, #8]
 8004fb4:	617b      	str	r3, [r7, #20]
 8004fb6:	697b      	ldr	r3, [r7, #20]
 8004fb8:	e000      	b.n	8004fbc <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8004fba:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004fcc:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8004fd0:	4618      	mov	r0, r3
 8004fd2:	3730      	adds	r7, #48	; 0x30
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	bd80      	pop	{r7, pc}

08004fd8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b088      	sub	sp, #32
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	60f8      	str	r0, [r7, #12]
 8004fe0:	60b9      	str	r1, [r7, #8]
 8004fe2:	603b      	str	r3, [r7, #0]
 8004fe4:	4613      	mov	r3, r2
 8004fe6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004fe8:	f7fc fa4c 	bl	8001484 <HAL_GetTick>
 8004fec:	4602      	mov	r2, r0
 8004fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ff0:	1a9b      	subs	r3, r3, r2
 8004ff2:	683a      	ldr	r2, [r7, #0]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004ff8:	f7fc fa44 	bl	8001484 <HAL_GetTick>
 8004ffc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004ffe:	4b39      	ldr	r3, [pc, #228]	; (80050e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	015b      	lsls	r3, r3, #5
 8005004:	0d1b      	lsrs	r3, r3, #20
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	fb02 f303 	mul.w	r3, r2, r3
 800500c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800500e:	e054      	b.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005010:	683b      	ldr	r3, [r7, #0]
 8005012:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005016:	d050      	beq.n	80050ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005018:	f7fc fa34 	bl	8001484 <HAL_GetTick>
 800501c:	4602      	mov	r2, r0
 800501e:	69bb      	ldr	r3, [r7, #24]
 8005020:	1ad3      	subs	r3, r2, r3
 8005022:	69fa      	ldr	r2, [r7, #28]
 8005024:	429a      	cmp	r2, r3
 8005026:	d902      	bls.n	800502e <SPI_WaitFlagStateUntilTimeout+0x56>
 8005028:	69fb      	ldr	r3, [r7, #28]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d13d      	bne.n	80050aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	685a      	ldr	r2, [r3, #4]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800503c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005046:	d111      	bne.n	800506c <SPI_WaitFlagStateUntilTimeout+0x94>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005050:	d004      	beq.n	800505c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800505a:	d107      	bne.n	800506c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	681a      	ldr	r2, [r3, #0]
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800506a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005070:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005074:	d10f      	bne.n	8005096 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	681a      	ldr	r2, [r3, #0]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	681a      	ldr	r2, [r3, #0]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005094:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	2201      	movs	r2, #1
 800509a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	2200      	movs	r2, #0
 80050a2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80050a6:	2303      	movs	r3, #3
 80050a8:	e017      	b.n	80050da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d101      	bne.n	80050b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80050b0:	2300      	movs	r3, #0
 80050b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	3b01      	subs	r3, #1
 80050b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	689a      	ldr	r2, [r3, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	4013      	ands	r3, r2
 80050c4:	68ba      	ldr	r2, [r7, #8]
 80050c6:	429a      	cmp	r2, r3
 80050c8:	bf0c      	ite	eq
 80050ca:	2301      	moveq	r3, #1
 80050cc:	2300      	movne	r3, #0
 80050ce:	b2db      	uxtb	r3, r3
 80050d0:	461a      	mov	r2, r3
 80050d2:	79fb      	ldrb	r3, [r7, #7]
 80050d4:	429a      	cmp	r2, r3
 80050d6:	d19b      	bne.n	8005010 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3720      	adds	r7, #32
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	20000000 	.word	0x20000000

080050e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af02      	add	r7, sp, #8
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	685b      	ldr	r3, [r3, #4]
 80050f8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80050fc:	d111      	bne.n	8005122 <SPI_EndRxTransaction+0x3a>
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	689b      	ldr	r3, [r3, #8]
 8005102:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005106:	d004      	beq.n	8005112 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	689b      	ldr	r3, [r3, #8]
 800510c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005110:	d107      	bne.n	8005122 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005120:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800512a:	d12a      	bne.n	8005182 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	689b      	ldr	r3, [r3, #8]
 8005130:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005134:	d012      	beq.n	800515c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	9300      	str	r3, [sp, #0]
 800513a:	68bb      	ldr	r3, [r7, #8]
 800513c:	2200      	movs	r2, #0
 800513e:	2180      	movs	r1, #128	; 0x80
 8005140:	68f8      	ldr	r0, [r7, #12]
 8005142:	f7ff ff49 	bl	8004fd8 <SPI_WaitFlagStateUntilTimeout>
 8005146:	4603      	mov	r3, r0
 8005148:	2b00      	cmp	r3, #0
 800514a:	d02d      	beq.n	80051a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005150:	f043 0220 	orr.w	r2, r3, #32
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8005158:	2303      	movs	r3, #3
 800515a:	e026      	b.n	80051aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	9300      	str	r3, [sp, #0]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2200      	movs	r2, #0
 8005164:	2101      	movs	r1, #1
 8005166:	68f8      	ldr	r0, [r7, #12]
 8005168:	f7ff ff36 	bl	8004fd8 <SPI_WaitFlagStateUntilTimeout>
 800516c:	4603      	mov	r3, r0
 800516e:	2b00      	cmp	r3, #0
 8005170:	d01a      	beq.n	80051a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005176:	f043 0220 	orr.w	r2, r3, #32
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800517e:	2303      	movs	r3, #3
 8005180:	e013      	b.n	80051aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	9300      	str	r3, [sp, #0]
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	2200      	movs	r2, #0
 800518a:	2101      	movs	r1, #1
 800518c:	68f8      	ldr	r0, [r7, #12]
 800518e:	f7ff ff23 	bl	8004fd8 <SPI_WaitFlagStateUntilTimeout>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d007      	beq.n	80051a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800519c:	f043 0220 	orr.w	r2, r3, #32
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e000      	b.n	80051aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80051a8:	2300      	movs	r3, #0
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
	...

080051b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af02      	add	r7, sp, #8
 80051ba:	60f8      	str	r0, [r7, #12]
 80051bc:	60b9      	str	r1, [r7, #8]
 80051be:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80051c0:	4b1b      	ldr	r3, [pc, #108]	; (8005230 <SPI_EndRxTxTransaction+0x7c>)
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	4a1b      	ldr	r2, [pc, #108]	; (8005234 <SPI_EndRxTxTransaction+0x80>)
 80051c6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ca:	0d5b      	lsrs	r3, r3, #21
 80051cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80051d0:	fb02 f303 	mul.w	r3, r2, r3
 80051d4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	685b      	ldr	r3, [r3, #4]
 80051da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80051de:	d112      	bne.n	8005206 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	68bb      	ldr	r3, [r7, #8]
 80051e6:	2200      	movs	r2, #0
 80051e8:	2180      	movs	r1, #128	; 0x80
 80051ea:	68f8      	ldr	r0, [r7, #12]
 80051ec:	f7ff fef4 	bl	8004fd8 <SPI_WaitFlagStateUntilTimeout>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d016      	beq.n	8005224 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051fa:	f043 0220 	orr.w	r2, r3, #32
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005202:	2303      	movs	r3, #3
 8005204:	e00f      	b.n	8005226 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00a      	beq.n	8005222 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800520c:	697b      	ldr	r3, [r7, #20]
 800520e:	3b01      	subs	r3, #1
 8005210:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	689b      	ldr	r3, [r3, #8]
 8005218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800521c:	2b80      	cmp	r3, #128	; 0x80
 800521e:	d0f2      	beq.n	8005206 <SPI_EndRxTxTransaction+0x52>
 8005220:	e000      	b.n	8005224 <SPI_EndRxTxTransaction+0x70>
        break;
 8005222:	bf00      	nop
  }

  return HAL_OK;
 8005224:	2300      	movs	r3, #0
}
 8005226:	4618      	mov	r0, r3
 8005228:	3718      	adds	r7, #24
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	20000000 	.word	0x20000000
 8005234:	165e9f81 	.word	0x165e9f81

08005238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b082      	sub	sp, #8
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005246:	2301      	movs	r3, #1
 8005248:	e03f      	b.n	80052ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d106      	bne.n	8005264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800525e:	6878      	ldr	r0, [r7, #4]
 8005260:	f7fb ffbc 	bl	80011dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2224      	movs	r2, #36	; 0x24
 8005268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	68da      	ldr	r2, [r3, #12]
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800527a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800527c:	6878      	ldr	r0, [r7, #4]
 800527e:	f000 f829 	bl	80052d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	691a      	ldr	r2, [r3, #16]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	695a      	ldr	r2, [r3, #20]
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80052a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	68da      	ldr	r2, [r3, #12]
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80052b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2220      	movs	r2, #32
 80052bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80052c8:	2300      	movs	r3, #0
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
	...

080052d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80052d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80052d8:	b0c0      	sub	sp, #256	; 0x100
 80052da:	af00      	add	r7, sp, #0
 80052dc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80052e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	691b      	ldr	r3, [r3, #16]
 80052e8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80052ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f0:	68d9      	ldr	r1, [r3, #12]
 80052f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052f6:	681a      	ldr	r2, [r3, #0]
 80052f8:	ea40 0301 	orr.w	r3, r0, r1
 80052fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80052fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005302:	689a      	ldr	r2, [r3, #8]
 8005304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005308:	691b      	ldr	r3, [r3, #16]
 800530a:	431a      	orrs	r2, r3
 800530c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005310:	695b      	ldr	r3, [r3, #20]
 8005312:	431a      	orrs	r2, r3
 8005314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	4313      	orrs	r3, r2
 800531c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005320:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800532c:	f021 010c 	bic.w	r1, r1, #12
 8005330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005334:	681a      	ldr	r2, [r3, #0]
 8005336:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800533a:	430b      	orrs	r3, r1
 800533c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800533e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	695b      	ldr	r3, [r3, #20]
 8005346:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800534a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800534e:	6999      	ldr	r1, [r3, #24]
 8005350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005354:	681a      	ldr	r2, [r3, #0]
 8005356:	ea40 0301 	orr.w	r3, r0, r1
 800535a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800535c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	4b8f      	ldr	r3, [pc, #572]	; (80055a0 <UART_SetConfig+0x2cc>)
 8005364:	429a      	cmp	r2, r3
 8005366:	d005      	beq.n	8005374 <UART_SetConfig+0xa0>
 8005368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	4b8d      	ldr	r3, [pc, #564]	; (80055a4 <UART_SetConfig+0x2d0>)
 8005370:	429a      	cmp	r2, r3
 8005372:	d104      	bne.n	800537e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005374:	f7ff f864 	bl	8004440 <HAL_RCC_GetPCLK2Freq>
 8005378:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800537c:	e003      	b.n	8005386 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800537e:	f7ff f84b 	bl	8004418 <HAL_RCC_GetPCLK1Freq>
 8005382:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800538a:	69db      	ldr	r3, [r3, #28]
 800538c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005390:	f040 810c 	bne.w	80055ac <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005394:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005398:	2200      	movs	r2, #0
 800539a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800539e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80053a2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80053a6:	4622      	mov	r2, r4
 80053a8:	462b      	mov	r3, r5
 80053aa:	1891      	adds	r1, r2, r2
 80053ac:	65b9      	str	r1, [r7, #88]	; 0x58
 80053ae:	415b      	adcs	r3, r3
 80053b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80053b2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80053b6:	4621      	mov	r1, r4
 80053b8:	eb12 0801 	adds.w	r8, r2, r1
 80053bc:	4629      	mov	r1, r5
 80053be:	eb43 0901 	adc.w	r9, r3, r1
 80053c2:	f04f 0200 	mov.w	r2, #0
 80053c6:	f04f 0300 	mov.w	r3, #0
 80053ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80053ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80053d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80053d6:	4690      	mov	r8, r2
 80053d8:	4699      	mov	r9, r3
 80053da:	4623      	mov	r3, r4
 80053dc:	eb18 0303 	adds.w	r3, r8, r3
 80053e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80053e4:	462b      	mov	r3, r5
 80053e6:	eb49 0303 	adc.w	r3, r9, r3
 80053ea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80053ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	2200      	movs	r2, #0
 80053f6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80053fa:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80053fe:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005402:	460b      	mov	r3, r1
 8005404:	18db      	adds	r3, r3, r3
 8005406:	653b      	str	r3, [r7, #80]	; 0x50
 8005408:	4613      	mov	r3, r2
 800540a:	eb42 0303 	adc.w	r3, r2, r3
 800540e:	657b      	str	r3, [r7, #84]	; 0x54
 8005410:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005414:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005418:	f7fb f8ee 	bl	80005f8 <__aeabi_uldivmod>
 800541c:	4602      	mov	r2, r0
 800541e:	460b      	mov	r3, r1
 8005420:	4b61      	ldr	r3, [pc, #388]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005422:	fba3 2302 	umull	r2, r3, r3, r2
 8005426:	095b      	lsrs	r3, r3, #5
 8005428:	011c      	lsls	r4, r3, #4
 800542a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800542e:	2200      	movs	r2, #0
 8005430:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005434:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005438:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800543c:	4642      	mov	r2, r8
 800543e:	464b      	mov	r3, r9
 8005440:	1891      	adds	r1, r2, r2
 8005442:	64b9      	str	r1, [r7, #72]	; 0x48
 8005444:	415b      	adcs	r3, r3
 8005446:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005448:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800544c:	4641      	mov	r1, r8
 800544e:	eb12 0a01 	adds.w	sl, r2, r1
 8005452:	4649      	mov	r1, r9
 8005454:	eb43 0b01 	adc.w	fp, r3, r1
 8005458:	f04f 0200 	mov.w	r2, #0
 800545c:	f04f 0300 	mov.w	r3, #0
 8005460:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005464:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005468:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800546c:	4692      	mov	sl, r2
 800546e:	469b      	mov	fp, r3
 8005470:	4643      	mov	r3, r8
 8005472:	eb1a 0303 	adds.w	r3, sl, r3
 8005476:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800547a:	464b      	mov	r3, r9
 800547c:	eb4b 0303 	adc.w	r3, fp, r3
 8005480:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	685b      	ldr	r3, [r3, #4]
 800548a:	2200      	movs	r2, #0
 800548c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005490:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005494:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005498:	460b      	mov	r3, r1
 800549a:	18db      	adds	r3, r3, r3
 800549c:	643b      	str	r3, [r7, #64]	; 0x40
 800549e:	4613      	mov	r3, r2
 80054a0:	eb42 0303 	adc.w	r3, r2, r3
 80054a4:	647b      	str	r3, [r7, #68]	; 0x44
 80054a6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80054aa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80054ae:	f7fb f8a3 	bl	80005f8 <__aeabi_uldivmod>
 80054b2:	4602      	mov	r2, r0
 80054b4:	460b      	mov	r3, r1
 80054b6:	4611      	mov	r1, r2
 80054b8:	4b3b      	ldr	r3, [pc, #236]	; (80055a8 <UART_SetConfig+0x2d4>)
 80054ba:	fba3 2301 	umull	r2, r3, r3, r1
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2264      	movs	r2, #100	; 0x64
 80054c2:	fb02 f303 	mul.w	r3, r2, r3
 80054c6:	1acb      	subs	r3, r1, r3
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80054ce:	4b36      	ldr	r3, [pc, #216]	; (80055a8 <UART_SetConfig+0x2d4>)
 80054d0:	fba3 2302 	umull	r2, r3, r3, r2
 80054d4:	095b      	lsrs	r3, r3, #5
 80054d6:	005b      	lsls	r3, r3, #1
 80054d8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80054dc:	441c      	add	r4, r3
 80054de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054e2:	2200      	movs	r2, #0
 80054e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80054e8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80054ec:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80054f0:	4642      	mov	r2, r8
 80054f2:	464b      	mov	r3, r9
 80054f4:	1891      	adds	r1, r2, r2
 80054f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80054f8:	415b      	adcs	r3, r3
 80054fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80054fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005500:	4641      	mov	r1, r8
 8005502:	1851      	adds	r1, r2, r1
 8005504:	6339      	str	r1, [r7, #48]	; 0x30
 8005506:	4649      	mov	r1, r9
 8005508:	414b      	adcs	r3, r1
 800550a:	637b      	str	r3, [r7, #52]	; 0x34
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	f04f 0300 	mov.w	r3, #0
 8005514:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005518:	4659      	mov	r1, fp
 800551a:	00cb      	lsls	r3, r1, #3
 800551c:	4651      	mov	r1, sl
 800551e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005522:	4651      	mov	r1, sl
 8005524:	00ca      	lsls	r2, r1, #3
 8005526:	4610      	mov	r0, r2
 8005528:	4619      	mov	r1, r3
 800552a:	4603      	mov	r3, r0
 800552c:	4642      	mov	r2, r8
 800552e:	189b      	adds	r3, r3, r2
 8005530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005534:	464b      	mov	r3, r9
 8005536:	460a      	mov	r2, r1
 8005538:	eb42 0303 	adc.w	r3, r2, r3
 800553c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005540:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005544:	685b      	ldr	r3, [r3, #4]
 8005546:	2200      	movs	r2, #0
 8005548:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800554c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005550:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005554:	460b      	mov	r3, r1
 8005556:	18db      	adds	r3, r3, r3
 8005558:	62bb      	str	r3, [r7, #40]	; 0x28
 800555a:	4613      	mov	r3, r2
 800555c:	eb42 0303 	adc.w	r3, r2, r3
 8005560:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005562:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005566:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800556a:	f7fb f845 	bl	80005f8 <__aeabi_uldivmod>
 800556e:	4602      	mov	r2, r0
 8005570:	460b      	mov	r3, r1
 8005572:	4b0d      	ldr	r3, [pc, #52]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005574:	fba3 1302 	umull	r1, r3, r3, r2
 8005578:	095b      	lsrs	r3, r3, #5
 800557a:	2164      	movs	r1, #100	; 0x64
 800557c:	fb01 f303 	mul.w	r3, r1, r3
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	00db      	lsls	r3, r3, #3
 8005584:	3332      	adds	r3, #50	; 0x32
 8005586:	4a08      	ldr	r2, [pc, #32]	; (80055a8 <UART_SetConfig+0x2d4>)
 8005588:	fba2 2303 	umull	r2, r3, r2, r3
 800558c:	095b      	lsrs	r3, r3, #5
 800558e:	f003 0207 	and.w	r2, r3, #7
 8005592:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4422      	add	r2, r4
 800559a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800559c:	e106      	b.n	80057ac <UART_SetConfig+0x4d8>
 800559e:	bf00      	nop
 80055a0:	40011000 	.word	0x40011000
 80055a4:	40011400 	.word	0x40011400
 80055a8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80055ac:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055b0:	2200      	movs	r2, #0
 80055b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80055b6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80055ba:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80055be:	4642      	mov	r2, r8
 80055c0:	464b      	mov	r3, r9
 80055c2:	1891      	adds	r1, r2, r2
 80055c4:	6239      	str	r1, [r7, #32]
 80055c6:	415b      	adcs	r3, r3
 80055c8:	627b      	str	r3, [r7, #36]	; 0x24
 80055ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80055ce:	4641      	mov	r1, r8
 80055d0:	1854      	adds	r4, r2, r1
 80055d2:	4649      	mov	r1, r9
 80055d4:	eb43 0501 	adc.w	r5, r3, r1
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	00eb      	lsls	r3, r5, #3
 80055e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e6:	00e2      	lsls	r2, r4, #3
 80055e8:	4614      	mov	r4, r2
 80055ea:	461d      	mov	r5, r3
 80055ec:	4643      	mov	r3, r8
 80055ee:	18e3      	adds	r3, r4, r3
 80055f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80055f4:	464b      	mov	r3, r9
 80055f6:	eb45 0303 	adc.w	r3, r5, r3
 80055fa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80055fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005602:	685b      	ldr	r3, [r3, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800560a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800560e:	f04f 0200 	mov.w	r2, #0
 8005612:	f04f 0300 	mov.w	r3, #0
 8005616:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800561a:	4629      	mov	r1, r5
 800561c:	008b      	lsls	r3, r1, #2
 800561e:	4621      	mov	r1, r4
 8005620:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005624:	4621      	mov	r1, r4
 8005626:	008a      	lsls	r2, r1, #2
 8005628:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800562c:	f7fa ffe4 	bl	80005f8 <__aeabi_uldivmod>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4b60      	ldr	r3, [pc, #384]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005636:	fba3 2302 	umull	r2, r3, r3, r2
 800563a:	095b      	lsrs	r3, r3, #5
 800563c:	011c      	lsls	r4, r3, #4
 800563e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005642:	2200      	movs	r2, #0
 8005644:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005648:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800564c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005650:	4642      	mov	r2, r8
 8005652:	464b      	mov	r3, r9
 8005654:	1891      	adds	r1, r2, r2
 8005656:	61b9      	str	r1, [r7, #24]
 8005658:	415b      	adcs	r3, r3
 800565a:	61fb      	str	r3, [r7, #28]
 800565c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005660:	4641      	mov	r1, r8
 8005662:	1851      	adds	r1, r2, r1
 8005664:	6139      	str	r1, [r7, #16]
 8005666:	4649      	mov	r1, r9
 8005668:	414b      	adcs	r3, r1
 800566a:	617b      	str	r3, [r7, #20]
 800566c:	f04f 0200 	mov.w	r2, #0
 8005670:	f04f 0300 	mov.w	r3, #0
 8005674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005678:	4659      	mov	r1, fp
 800567a:	00cb      	lsls	r3, r1, #3
 800567c:	4651      	mov	r1, sl
 800567e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005682:	4651      	mov	r1, sl
 8005684:	00ca      	lsls	r2, r1, #3
 8005686:	4610      	mov	r0, r2
 8005688:	4619      	mov	r1, r3
 800568a:	4603      	mov	r3, r0
 800568c:	4642      	mov	r2, r8
 800568e:	189b      	adds	r3, r3, r2
 8005690:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005694:	464b      	mov	r3, r9
 8005696:	460a      	mov	r2, r1
 8005698:	eb42 0303 	adc.w	r3, r2, r3
 800569c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	67bb      	str	r3, [r7, #120]	; 0x78
 80056aa:	67fa      	str	r2, [r7, #124]	; 0x7c
 80056ac:	f04f 0200 	mov.w	r2, #0
 80056b0:	f04f 0300 	mov.w	r3, #0
 80056b4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80056b8:	4649      	mov	r1, r9
 80056ba:	008b      	lsls	r3, r1, #2
 80056bc:	4641      	mov	r1, r8
 80056be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056c2:	4641      	mov	r1, r8
 80056c4:	008a      	lsls	r2, r1, #2
 80056c6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80056ca:	f7fa ff95 	bl	80005f8 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	4b38      	ldr	r3, [pc, #224]	; (80057b8 <UART_SetConfig+0x4e4>)
 80056d6:	fba3 2301 	umull	r2, r3, r3, r1
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2264      	movs	r2, #100	; 0x64
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	1acb      	subs	r3, r1, r3
 80056e4:	011b      	lsls	r3, r3, #4
 80056e6:	3332      	adds	r3, #50	; 0x32
 80056e8:	4a33      	ldr	r2, [pc, #204]	; (80057b8 <UART_SetConfig+0x4e4>)
 80056ea:	fba2 2303 	umull	r2, r3, r2, r3
 80056ee:	095b      	lsrs	r3, r3, #5
 80056f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056f4:	441c      	add	r4, r3
 80056f6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056fa:	2200      	movs	r2, #0
 80056fc:	673b      	str	r3, [r7, #112]	; 0x70
 80056fe:	677a      	str	r2, [r7, #116]	; 0x74
 8005700:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005704:	4642      	mov	r2, r8
 8005706:	464b      	mov	r3, r9
 8005708:	1891      	adds	r1, r2, r2
 800570a:	60b9      	str	r1, [r7, #8]
 800570c:	415b      	adcs	r3, r3
 800570e:	60fb      	str	r3, [r7, #12]
 8005710:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005714:	4641      	mov	r1, r8
 8005716:	1851      	adds	r1, r2, r1
 8005718:	6039      	str	r1, [r7, #0]
 800571a:	4649      	mov	r1, r9
 800571c:	414b      	adcs	r3, r1
 800571e:	607b      	str	r3, [r7, #4]
 8005720:	f04f 0200 	mov.w	r2, #0
 8005724:	f04f 0300 	mov.w	r3, #0
 8005728:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800572c:	4659      	mov	r1, fp
 800572e:	00cb      	lsls	r3, r1, #3
 8005730:	4651      	mov	r1, sl
 8005732:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005736:	4651      	mov	r1, sl
 8005738:	00ca      	lsls	r2, r1, #3
 800573a:	4610      	mov	r0, r2
 800573c:	4619      	mov	r1, r3
 800573e:	4603      	mov	r3, r0
 8005740:	4642      	mov	r2, r8
 8005742:	189b      	adds	r3, r3, r2
 8005744:	66bb      	str	r3, [r7, #104]	; 0x68
 8005746:	464b      	mov	r3, r9
 8005748:	460a      	mov	r2, r1
 800574a:	eb42 0303 	adc.w	r3, r2, r3
 800574e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	663b      	str	r3, [r7, #96]	; 0x60
 800575a:	667a      	str	r2, [r7, #100]	; 0x64
 800575c:	f04f 0200 	mov.w	r2, #0
 8005760:	f04f 0300 	mov.w	r3, #0
 8005764:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005768:	4649      	mov	r1, r9
 800576a:	008b      	lsls	r3, r1, #2
 800576c:	4641      	mov	r1, r8
 800576e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005772:	4641      	mov	r1, r8
 8005774:	008a      	lsls	r2, r1, #2
 8005776:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800577a:	f7fa ff3d 	bl	80005f8 <__aeabi_uldivmod>
 800577e:	4602      	mov	r2, r0
 8005780:	460b      	mov	r3, r1
 8005782:	4b0d      	ldr	r3, [pc, #52]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005784:	fba3 1302 	umull	r1, r3, r3, r2
 8005788:	095b      	lsrs	r3, r3, #5
 800578a:	2164      	movs	r1, #100	; 0x64
 800578c:	fb01 f303 	mul.w	r3, r1, r3
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	011b      	lsls	r3, r3, #4
 8005794:	3332      	adds	r3, #50	; 0x32
 8005796:	4a08      	ldr	r2, [pc, #32]	; (80057b8 <UART_SetConfig+0x4e4>)
 8005798:	fba2 2303 	umull	r2, r3, r2, r3
 800579c:	095b      	lsrs	r3, r3, #5
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	4422      	add	r2, r4
 80057aa:	609a      	str	r2, [r3, #8]
}
 80057ac:	bf00      	nop
 80057ae:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80057b2:	46bd      	mov	sp, r7
 80057b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80057b8:	51eb851f 	.word	0x51eb851f

080057bc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80057bc:	b084      	sub	sp, #16
 80057be:	b580      	push	{r7, lr}
 80057c0:	b084      	sub	sp, #16
 80057c2:	af00      	add	r7, sp, #0
 80057c4:	6078      	str	r0, [r7, #4]
 80057c6:	f107 001c 	add.w	r0, r7, #28
 80057ca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80057ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d122      	bne.n	800581a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057d8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	68db      	ldr	r3, [r3, #12]
 80057e4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80057e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80057ec:	687a      	ldr	r2, [r7, #4]
 80057ee:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80057fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80057fe:	2b01      	cmp	r3, #1
 8005800:	d105      	bne.n	800580e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800580e:	6878      	ldr	r0, [r7, #4]
 8005810:	f001 fbee 	bl	8006ff0 <USB_CoreReset>
 8005814:	4603      	mov	r3, r0
 8005816:	73fb      	strb	r3, [r7, #15]
 8005818:	e01a      	b.n	8005850 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005826:	6878      	ldr	r0, [r7, #4]
 8005828:	f001 fbe2 	bl	8006ff0 <USB_CoreReset>
 800582c:	4603      	mov	r3, r0
 800582e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005830:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005832:	2b00      	cmp	r3, #0
 8005834:	d106      	bne.n	8005844 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800583a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	639a      	str	r2, [r3, #56]	; 0x38
 8005842:	e005      	b.n	8005850 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005848:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	2b01      	cmp	r3, #1
 8005854:	d10b      	bne.n	800586e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	f043 0206 	orr.w	r2, r3, #6
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f043 0220 	orr.w	r2, r3, #32
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800586e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005870:	4618      	mov	r0, r3
 8005872:	3710      	adds	r7, #16
 8005874:	46bd      	mov	sp, r7
 8005876:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800587a:	b004      	add	sp, #16
 800587c:	4770      	bx	lr
	...

08005880 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8005880:	b480      	push	{r7}
 8005882:	b087      	sub	sp, #28
 8005884:	af00      	add	r7, sp, #0
 8005886:	60f8      	str	r0, [r7, #12]
 8005888:	60b9      	str	r1, [r7, #8]
 800588a:	4613      	mov	r3, r2
 800588c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800588e:	79fb      	ldrb	r3, [r7, #7]
 8005890:	2b02      	cmp	r3, #2
 8005892:	d165      	bne.n	8005960 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8005894:	68bb      	ldr	r3, [r7, #8]
 8005896:	4a41      	ldr	r2, [pc, #260]	; (800599c <USB_SetTurnaroundTime+0x11c>)
 8005898:	4293      	cmp	r3, r2
 800589a:	d906      	bls.n	80058aa <USB_SetTurnaroundTime+0x2a>
 800589c:	68bb      	ldr	r3, [r7, #8]
 800589e:	4a40      	ldr	r2, [pc, #256]	; (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d202      	bcs.n	80058aa <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80058a4:	230f      	movs	r3, #15
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	e062      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	4a3c      	ldr	r2, [pc, #240]	; (80059a0 <USB_SetTurnaroundTime+0x120>)
 80058ae:	4293      	cmp	r3, r2
 80058b0:	d306      	bcc.n	80058c0 <USB_SetTurnaroundTime+0x40>
 80058b2:	68bb      	ldr	r3, [r7, #8]
 80058b4:	4a3b      	ldr	r2, [pc, #236]	; (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d202      	bcs.n	80058c0 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80058ba:	230e      	movs	r3, #14
 80058bc:	617b      	str	r3, [r7, #20]
 80058be:	e057      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80058c0:	68bb      	ldr	r3, [r7, #8]
 80058c2:	4a38      	ldr	r2, [pc, #224]	; (80059a4 <USB_SetTurnaroundTime+0x124>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d306      	bcc.n	80058d6 <USB_SetTurnaroundTime+0x56>
 80058c8:	68bb      	ldr	r3, [r7, #8]
 80058ca:	4a37      	ldr	r2, [pc, #220]	; (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d202      	bcs.n	80058d6 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80058d0:	230d      	movs	r3, #13
 80058d2:	617b      	str	r3, [r7, #20]
 80058d4:	e04c      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80058d6:	68bb      	ldr	r3, [r7, #8]
 80058d8:	4a33      	ldr	r2, [pc, #204]	; (80059a8 <USB_SetTurnaroundTime+0x128>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d306      	bcc.n	80058ec <USB_SetTurnaroundTime+0x6c>
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	4a32      	ldr	r2, [pc, #200]	; (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d802      	bhi.n	80058ec <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80058e6:	230c      	movs	r3, #12
 80058e8:	617b      	str	r3, [r7, #20]
 80058ea:	e041      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80058ec:	68bb      	ldr	r3, [r7, #8]
 80058ee:	4a2f      	ldr	r2, [pc, #188]	; (80059ac <USB_SetTurnaroundTime+0x12c>)
 80058f0:	4293      	cmp	r3, r2
 80058f2:	d906      	bls.n	8005902 <USB_SetTurnaroundTime+0x82>
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4a2e      	ldr	r2, [pc, #184]	; (80059b0 <USB_SetTurnaroundTime+0x130>)
 80058f8:	4293      	cmp	r3, r2
 80058fa:	d802      	bhi.n	8005902 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80058fc:	230b      	movs	r3, #11
 80058fe:	617b      	str	r3, [r7, #20]
 8005900:	e036      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	4a2a      	ldr	r2, [pc, #168]	; (80059b0 <USB_SetTurnaroundTime+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d906      	bls.n	8005918 <USB_SetTurnaroundTime+0x98>
 800590a:	68bb      	ldr	r3, [r7, #8]
 800590c:	4a29      	ldr	r2, [pc, #164]	; (80059b4 <USB_SetTurnaroundTime+0x134>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d802      	bhi.n	8005918 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8005912:	230a      	movs	r3, #10
 8005914:	617b      	str	r3, [r7, #20]
 8005916:	e02b      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	4a26      	ldr	r2, [pc, #152]	; (80059b4 <USB_SetTurnaroundTime+0x134>)
 800591c:	4293      	cmp	r3, r2
 800591e:	d906      	bls.n	800592e <USB_SetTurnaroundTime+0xae>
 8005920:	68bb      	ldr	r3, [r7, #8]
 8005922:	4a25      	ldr	r2, [pc, #148]	; (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005924:	4293      	cmp	r3, r2
 8005926:	d202      	bcs.n	800592e <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8005928:	2309      	movs	r3, #9
 800592a:	617b      	str	r3, [r7, #20]
 800592c:	e020      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	4a21      	ldr	r2, [pc, #132]	; (80059b8 <USB_SetTurnaroundTime+0x138>)
 8005932:	4293      	cmp	r3, r2
 8005934:	d306      	bcc.n	8005944 <USB_SetTurnaroundTime+0xc4>
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	4a20      	ldr	r2, [pc, #128]	; (80059bc <USB_SetTurnaroundTime+0x13c>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d802      	bhi.n	8005944 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800593e:	2308      	movs	r3, #8
 8005940:	617b      	str	r3, [r7, #20]
 8005942:	e015      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	4a1d      	ldr	r2, [pc, #116]	; (80059bc <USB_SetTurnaroundTime+0x13c>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d906      	bls.n	800595a <USB_SetTurnaroundTime+0xda>
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4a1c      	ldr	r2, [pc, #112]	; (80059c0 <USB_SetTurnaroundTime+0x140>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d202      	bcs.n	800595a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8005954:	2307      	movs	r3, #7
 8005956:	617b      	str	r3, [r7, #20]
 8005958:	e00a      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800595a:	2306      	movs	r3, #6
 800595c:	617b      	str	r3, [r7, #20]
 800595e:	e007      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8005960:	79fb      	ldrb	r3, [r7, #7]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d102      	bne.n	800596c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8005966:	2309      	movs	r3, #9
 8005968:	617b      	str	r3, [r7, #20]
 800596a:	e001      	b.n	8005970 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800596c:	2309      	movs	r3, #9
 800596e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	68db      	ldr	r3, [r3, #12]
 8005974:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	68da      	ldr	r2, [r3, #12]
 8005980:	697b      	ldr	r3, [r7, #20]
 8005982:	029b      	lsls	r3, r3, #10
 8005984:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8005988:	431a      	orrs	r2, r3
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800598e:	2300      	movs	r3, #0
}
 8005990:	4618      	mov	r0, r3
 8005992:	371c      	adds	r7, #28
 8005994:	46bd      	mov	sp, r7
 8005996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599a:	4770      	bx	lr
 800599c:	00d8acbf 	.word	0x00d8acbf
 80059a0:	00e4e1c0 	.word	0x00e4e1c0
 80059a4:	00f42400 	.word	0x00f42400
 80059a8:	01067380 	.word	0x01067380
 80059ac:	011a499f 	.word	0x011a499f
 80059b0:	01312cff 	.word	0x01312cff
 80059b4:	014ca43f 	.word	0x014ca43f
 80059b8:	016e3600 	.word	0x016e3600
 80059bc:	01a6ab1f 	.word	0x01a6ab1f
 80059c0:	01e84800 	.word	0x01e84800

080059c4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059c4:	b480      	push	{r7}
 80059c6:	b083      	sub	sp, #12
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	689b      	ldr	r3, [r3, #8]
 80059d0:	f043 0201 	orr.w	r2, r3, #1
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059d8:	2300      	movs	r3, #0
}
 80059da:	4618      	mov	r0, r3
 80059dc:	370c      	adds	r7, #12
 80059de:	46bd      	mov	sp, r7
 80059e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e4:	4770      	bx	lr

080059e6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80059e6:	b480      	push	{r7}
 80059e8:	b083      	sub	sp, #12
 80059ea:	af00      	add	r7, sp, #0
 80059ec:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	689b      	ldr	r3, [r3, #8]
 80059f2:	f023 0201 	bic.w	r2, r3, #1
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80059fa:	2300      	movs	r3, #0
}
 80059fc:	4618      	mov	r0, r3
 80059fe:	370c      	adds	r7, #12
 8005a00:	46bd      	mov	sp, r7
 8005a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a06:	4770      	bx	lr

08005a08 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
 8005a10:	460b      	mov	r3, r1
 8005a12:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005a14:	2300      	movs	r3, #0
 8005a16:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	68db      	ldr	r3, [r3, #12]
 8005a1c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005a24:	78fb      	ldrb	r3, [r7, #3]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d115      	bne.n	8005a56 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	68db      	ldr	r3, [r3, #12]
 8005a2e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a36:	2001      	movs	r0, #1
 8005a38:	f7fb fd30 	bl	800149c <HAL_Delay>
      ms++;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	3301      	adds	r3, #1
 8005a40:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005a42:	6878      	ldr	r0, [r7, #4]
 8005a44:	f001 fa45 	bl	8006ed2 <USB_GetMode>
 8005a48:	4603      	mov	r3, r0
 8005a4a:	2b01      	cmp	r3, #1
 8005a4c:	d01e      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2b31      	cmp	r3, #49	; 0x31
 8005a52:	d9f0      	bls.n	8005a36 <USB_SetCurrentMode+0x2e>
 8005a54:	e01a      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005a56:	78fb      	ldrb	r3, [r7, #3]
 8005a58:	2b00      	cmp	r3, #0
 8005a5a:	d115      	bne.n	8005a88 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	68db      	ldr	r3, [r3, #12]
 8005a60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005a68:	2001      	movs	r0, #1
 8005a6a:	f7fb fd17 	bl	800149c <HAL_Delay>
      ms++;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	3301      	adds	r3, #1
 8005a72:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005a74:	6878      	ldr	r0, [r7, #4]
 8005a76:	f001 fa2c 	bl	8006ed2 <USB_GetMode>
 8005a7a:	4603      	mov	r3, r0
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d005      	beq.n	8005a8c <USB_SetCurrentMode+0x84>
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	2b31      	cmp	r3, #49	; 0x31
 8005a84:	d9f0      	bls.n	8005a68 <USB_SetCurrentMode+0x60>
 8005a86:	e001      	b.n	8005a8c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005a88:	2301      	movs	r3, #1
 8005a8a:	e005      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	2b32      	cmp	r3, #50	; 0x32
 8005a90:	d101      	bne.n	8005a96 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e000      	b.n	8005a98 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aa0:	b084      	sub	sp, #16
 8005aa2:	b580      	push	{r7, lr}
 8005aa4:	b086      	sub	sp, #24
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
 8005aaa:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005aae:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005ab2:	2300      	movs	r3, #0
 8005ab4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005aba:	2300      	movs	r3, #0
 8005abc:	613b      	str	r3, [r7, #16]
 8005abe:	e009      	b.n	8005ad4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005ac0:	687a      	ldr	r2, [r7, #4]
 8005ac2:	693b      	ldr	r3, [r7, #16]
 8005ac4:	3340      	adds	r3, #64	; 0x40
 8005ac6:	009b      	lsls	r3, r3, #2
 8005ac8:	4413      	add	r3, r2
 8005aca:	2200      	movs	r2, #0
 8005acc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005ace:	693b      	ldr	r3, [r7, #16]
 8005ad0:	3301      	adds	r3, #1
 8005ad2:	613b      	str	r3, [r7, #16]
 8005ad4:	693b      	ldr	r3, [r7, #16]
 8005ad6:	2b0e      	cmp	r3, #14
 8005ad8:	d9f2      	bls.n	8005ac0 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d11c      	bne.n	8005b1a <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ae6:	685b      	ldr	r3, [r3, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aee:	f043 0302 	orr.w	r3, r3, #2
 8005af2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b04:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b10:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38
 8005b18:	e00b      	b.n	8005b32 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b1e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b38:	461a      	mov	r2, r3
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b44:	4619      	mov	r1, r3
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	680b      	ldr	r3, [r1, #0]
 8005b50:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	2b01      	cmp	r3, #1
 8005b56:	d10c      	bne.n	8005b72 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d104      	bne.n	8005b68 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005b5e:	2100      	movs	r1, #0
 8005b60:	6878      	ldr	r0, [r7, #4]
 8005b62:	f000 f965 	bl	8005e30 <USB_SetDevSpeed>
 8005b66:	e008      	b.n	8005b7a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005b68:	2101      	movs	r1, #1
 8005b6a:	6878      	ldr	r0, [r7, #4]
 8005b6c:	f000 f960 	bl	8005e30 <USB_SetDevSpeed>
 8005b70:	e003      	b.n	8005b7a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005b72:	2103      	movs	r1, #3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f000 f95b 	bl	8005e30 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	6878      	ldr	r0, [r7, #4]
 8005b7e:	f000 f8f3 	bl	8005d68 <USB_FlushTxFifo>
 8005b82:	4603      	mov	r3, r0
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d001      	beq.n	8005b8c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	f000 f91f 	bl	8005dd0 <USB_FlushRxFifo>
 8005b92:	4603      	mov	r3, r0
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d001      	beq.n	8005b9c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005b98:	2301      	movs	r3, #1
 8005b9a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba2:	461a      	mov	r2, r3
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	461a      	mov	r2, r3
 8005bb0:	2300      	movs	r3, #0
 8005bb2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bba:	461a      	mov	r2, r3
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005bc0:	2300      	movs	r3, #0
 8005bc2:	613b      	str	r3, [r7, #16]
 8005bc4:	e043      	b.n	8005c4e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005bc6:	693b      	ldr	r3, [r7, #16]
 8005bc8:	015a      	lsls	r2, r3, #5
 8005bca:	68fb      	ldr	r3, [r7, #12]
 8005bcc:	4413      	add	r3, r2
 8005bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bd8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005bdc:	d118      	bne.n	8005c10 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005bde:	693b      	ldr	r3, [r7, #16]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d10a      	bne.n	8005bfa <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005be4:	693b      	ldr	r3, [r7, #16]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005bf6:	6013      	str	r3, [r2, #0]
 8005bf8:	e013      	b.n	8005c22 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	015a      	lsls	r2, r3, #5
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c06:	461a      	mov	r2, r3
 8005c08:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005c0c:	6013      	str	r3, [r2, #0]
 8005c0e:	e008      	b.n	8005c22 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005c10:	693b      	ldr	r3, [r7, #16]
 8005c12:	015a      	lsls	r2, r3, #5
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	4413      	add	r3, r2
 8005c18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c1c:	461a      	mov	r2, r3
 8005c1e:	2300      	movs	r3, #0
 8005c20:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005c22:	693b      	ldr	r3, [r7, #16]
 8005c24:	015a      	lsls	r2, r3, #5
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	4413      	add	r3, r2
 8005c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c2e:	461a      	mov	r2, r3
 8005c30:	2300      	movs	r3, #0
 8005c32:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	015a      	lsls	r2, r3, #5
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	4413      	add	r3, r2
 8005c3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c40:	461a      	mov	r2, r3
 8005c42:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005c46:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	3301      	adds	r3, #1
 8005c4c:	613b      	str	r3, [r7, #16]
 8005c4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c50:	693a      	ldr	r2, [r7, #16]
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d3b7      	bcc.n	8005bc6 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	613b      	str	r3, [r7, #16]
 8005c5a:	e043      	b.n	8005ce4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	015a      	lsls	r2, r3, #5
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	4413      	add	r3, r2
 8005c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005c72:	d118      	bne.n	8005ca6 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005c74:	693b      	ldr	r3, [r7, #16]
 8005c76:	2b00      	cmp	r3, #0
 8005c78:	d10a      	bne.n	8005c90 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005c7a:	693b      	ldr	r3, [r7, #16]
 8005c7c:	015a      	lsls	r2, r3, #5
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	4413      	add	r3, r2
 8005c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c86:	461a      	mov	r2, r3
 8005c88:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005c8c:	6013      	str	r3, [r2, #0]
 8005c8e:	e013      	b.n	8005cb8 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005c90:	693b      	ldr	r3, [r7, #16]
 8005c92:	015a      	lsls	r2, r3, #5
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	4413      	add	r3, r2
 8005c98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c9c:	461a      	mov	r2, r3
 8005c9e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005ca2:	6013      	str	r3, [r2, #0]
 8005ca4:	e008      	b.n	8005cb8 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	015a      	lsls	r2, r3, #5
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	4413      	add	r3, r2
 8005cae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cb2:	461a      	mov	r2, r3
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	015a      	lsls	r2, r3, #5
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	4413      	add	r3, r2
 8005cc0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc4:	461a      	mov	r2, r3
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	015a      	lsls	r2, r3, #5
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	4413      	add	r3, r2
 8005cd2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005cdc:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	3301      	adds	r3, #1
 8005ce2:	613b      	str	r3, [r7, #16]
 8005ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce6:	693a      	ldr	r2, [r7, #16]
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d3b7      	bcc.n	8005c5c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	68fa      	ldr	r2, [r7, #12]
 8005cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005cfa:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005cfe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2200      	movs	r2, #0
 8005d04:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005d0c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d105      	bne.n	8005d20 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	699b      	ldr	r3, [r3, #24]
 8005d18:	f043 0210 	orr.w	r2, r3, #16
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	699a      	ldr	r2, [r3, #24]
 8005d24:	4b0f      	ldr	r3, [pc, #60]	; (8005d64 <USB_DevInit+0x2c4>)
 8005d26:	4313      	orrs	r3, r2
 8005d28:	687a      	ldr	r2, [r7, #4]
 8005d2a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005d2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d005      	beq.n	8005d3e <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	699b      	ldr	r3, [r3, #24]
 8005d36:	f043 0208 	orr.w	r2, r3, #8
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d40:	2b01      	cmp	r3, #1
 8005d42:	d107      	bne.n	8005d54 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005d4c:	f043 0304 	orr.w	r3, r3, #4
 8005d50:	687a      	ldr	r2, [r7, #4]
 8005d52:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d56:	4618      	mov	r0, r3
 8005d58:	3718      	adds	r7, #24
 8005d5a:	46bd      	mov	sp, r7
 8005d5c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005d60:	b004      	add	sp, #16
 8005d62:	4770      	bx	lr
 8005d64:	803c3800 	.word	0x803c3800

08005d68 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005d68:	b480      	push	{r7}
 8005d6a:	b085      	sub	sp, #20
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005d72:	2300      	movs	r3, #0
 8005d74:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	3301      	adds	r3, #1
 8005d7a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	4a13      	ldr	r2, [pc, #76]	; (8005dcc <USB_FlushTxFifo+0x64>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d901      	bls.n	8005d88 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005d84:	2303      	movs	r3, #3
 8005d86:	e01b      	b.n	8005dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	691b      	ldr	r3, [r3, #16]
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	daf2      	bge.n	8005d76 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005d90:	2300      	movs	r3, #0
 8005d92:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005d94:	683b      	ldr	r3, [r7, #0]
 8005d96:	019b      	lsls	r3, r3, #6
 8005d98:	f043 0220 	orr.w	r2, r3, #32
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	3301      	adds	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	4a08      	ldr	r2, [pc, #32]	; (8005dcc <USB_FlushTxFifo+0x64>)
 8005daa:	4293      	cmp	r3, r2
 8005dac:	d901      	bls.n	8005db2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005dae:	2303      	movs	r3, #3
 8005db0:	e006      	b.n	8005dc0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	f003 0320 	and.w	r3, r3, #32
 8005dba:	2b20      	cmp	r3, #32
 8005dbc:	d0f0      	beq.n	8005da0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3714      	adds	r7, #20
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr
 8005dcc:	00030d40 	.word	0x00030d40

08005dd0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005dd0:	b480      	push	{r7}
 8005dd2:	b085      	sub	sp, #20
 8005dd4:	af00      	add	r7, sp, #0
 8005dd6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005dd8:	2300      	movs	r3, #0
 8005dda:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	3301      	adds	r3, #1
 8005de0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	4a11      	ldr	r2, [pc, #68]	; (8005e2c <USB_FlushRxFifo+0x5c>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d901      	bls.n	8005dee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e018      	b.n	8005e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	691b      	ldr	r3, [r3, #16]
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	daf2      	bge.n	8005ddc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005df6:	2300      	movs	r3, #0
 8005df8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2210      	movs	r2, #16
 8005dfe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	3301      	adds	r3, #1
 8005e04:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4a08      	ldr	r2, [pc, #32]	; (8005e2c <USB_FlushRxFifo+0x5c>)
 8005e0a:	4293      	cmp	r3, r2
 8005e0c:	d901      	bls.n	8005e12 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	e006      	b.n	8005e20 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	691b      	ldr	r3, [r3, #16]
 8005e16:	f003 0310 	and.w	r3, r3, #16
 8005e1a:	2b10      	cmp	r3, #16
 8005e1c:	d0f0      	beq.n	8005e00 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr
 8005e2c:	00030d40 	.word	0x00030d40

08005e30 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005e30:	b480      	push	{r7}
 8005e32:	b085      	sub	sp, #20
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	6078      	str	r0, [r7, #4]
 8005e38:	460b      	mov	r3, r1
 8005e3a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e46:	681a      	ldr	r2, [r3, #0]
 8005e48:	78fb      	ldrb	r3, [r7, #3]
 8005e4a:	68f9      	ldr	r1, [r7, #12]
 8005e4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005e50:	4313      	orrs	r3, r2
 8005e52:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b087      	sub	sp, #28
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e74:	689b      	ldr	r3, [r3, #8]
 8005e76:	f003 0306 	and.w	r3, r3, #6
 8005e7a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8005e82:	2300      	movs	r3, #0
 8005e84:	75fb      	strb	r3, [r7, #23]
 8005e86:	e00a      	b.n	8005e9e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2b02      	cmp	r3, #2
 8005e8c:	d002      	beq.n	8005e94 <USB_GetDevSpeed+0x32>
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b06      	cmp	r3, #6
 8005e92:	d102      	bne.n	8005e9a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8005e94:	2302      	movs	r3, #2
 8005e96:	75fb      	strb	r3, [r7, #23]
 8005e98:	e001      	b.n	8005e9e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8005e9a:	230f      	movs	r3, #15
 8005e9c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8005e9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b085      	sub	sp, #20
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	6078      	str	r0, [r7, #4]
 8005eb4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	785b      	ldrb	r3, [r3, #1]
 8005ec4:	2b01      	cmp	r3, #1
 8005ec6:	d13a      	bne.n	8005f3e <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ece:	69da      	ldr	r2, [r3, #28]
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	781b      	ldrb	r3, [r3, #0]
 8005ed4:	f003 030f 	and.w	r3, r3, #15
 8005ed8:	2101      	movs	r1, #1
 8005eda:	fa01 f303 	lsl.w	r3, r1, r3
 8005ede:	b29b      	uxth	r3, r3
 8005ee0:	68f9      	ldr	r1, [r7, #12]
 8005ee2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8005eea:	68bb      	ldr	r3, [r7, #8]
 8005eec:	015a      	lsls	r2, r3, #5
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	4413      	add	r3, r2
 8005ef2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d155      	bne.n	8005fac <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	015a      	lsls	r2, r3, #5
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4413      	add	r3, r2
 8005f08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f0c:	681a      	ldr	r2, [r3, #0]
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	68db      	ldr	r3, [r3, #12]
 8005f12:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	791b      	ldrb	r3, [r3, #4]
 8005f1a:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f1c:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8005f1e:	68bb      	ldr	r3, [r7, #8]
 8005f20:	059b      	lsls	r3, r3, #22
 8005f22:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8005f24:	4313      	orrs	r3, r2
 8005f26:	68ba      	ldr	r2, [r7, #8]
 8005f28:	0151      	lsls	r1, r2, #5
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	440a      	add	r2, r1
 8005f2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f3a:	6013      	str	r3, [r2, #0]
 8005f3c:	e036      	b.n	8005fac <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f44:	69da      	ldr	r2, [r3, #28]
 8005f46:	683b      	ldr	r3, [r7, #0]
 8005f48:	781b      	ldrb	r3, [r3, #0]
 8005f4a:	f003 030f 	and.w	r3, r3, #15
 8005f4e:	2101      	movs	r1, #1
 8005f50:	fa01 f303 	lsl.w	r3, r1, r3
 8005f54:	041b      	lsls	r3, r3, #16
 8005f56:	68f9      	ldr	r1, [r7, #12]
 8005f58:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	015a      	lsls	r2, r3, #5
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	4413      	add	r3, r2
 8005f68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d11a      	bne.n	8005fac <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	015a      	lsls	r2, r3, #5
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	4413      	add	r3, r2
 8005f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005f82:	681a      	ldr	r2, [r3, #0]
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	791b      	ldrb	r3, [r3, #4]
 8005f90:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005f92:	430b      	orrs	r3, r1
 8005f94:	4313      	orrs	r3, r2
 8005f96:	68ba      	ldr	r2, [r7, #8]
 8005f98:	0151      	lsls	r1, r2, #5
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	440a      	add	r2, r1
 8005f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005fa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005faa:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005fac:	2300      	movs	r3, #0
}
 8005fae:	4618      	mov	r0, r3
 8005fb0:	3714      	adds	r7, #20
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005fbc:	b480      	push	{r7}
 8005fbe:	b085      	sub	sp, #20
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005fd0:	683b      	ldr	r3, [r7, #0]
 8005fd2:	785b      	ldrb	r3, [r3, #1]
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	d161      	bne.n	800609c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005fd8:	68bb      	ldr	r3, [r7, #8]
 8005fda:	015a      	lsls	r2, r3, #5
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	4413      	add	r3, r2
 8005fe0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005fea:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005fee:	d11f      	bne.n	8006030 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	015a      	lsls	r2, r3, #5
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	4413      	add	r3, r2
 8005ff8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68ba      	ldr	r2, [r7, #8]
 8006000:	0151      	lsls	r1, r2, #5
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	440a      	add	r2, r1
 8006006:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800600a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800600e:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8006010:	68bb      	ldr	r3, [r7, #8]
 8006012:	015a      	lsls	r2, r3, #5
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	4413      	add	r3, r2
 8006018:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	68ba      	ldr	r2, [r7, #8]
 8006020:	0151      	lsls	r1, r2, #5
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	440a      	add	r2, r1
 8006026:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800602a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800602e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006036:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006038:	683b      	ldr	r3, [r7, #0]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	f003 030f 	and.w	r3, r3, #15
 8006040:	2101      	movs	r1, #1
 8006042:	fa01 f303 	lsl.w	r3, r1, r3
 8006046:	b29b      	uxth	r3, r3
 8006048:	43db      	mvns	r3, r3
 800604a:	68f9      	ldr	r1, [r7, #12]
 800604c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006050:	4013      	ands	r3, r2
 8006052:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800605a:	69da      	ldr	r2, [r3, #28]
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	f003 030f 	and.w	r3, r3, #15
 8006064:	2101      	movs	r1, #1
 8006066:	fa01 f303 	lsl.w	r3, r1, r3
 800606a:	b29b      	uxth	r3, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	68f9      	ldr	r1, [r7, #12]
 8006070:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006074:	4013      	ands	r3, r2
 8006076:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8006078:	68bb      	ldr	r3, [r7, #8]
 800607a:	015a      	lsls	r2, r3, #5
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	4413      	add	r3, r2
 8006080:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006084:	681a      	ldr	r2, [r3, #0]
 8006086:	68bb      	ldr	r3, [r7, #8]
 8006088:	0159      	lsls	r1, r3, #5
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	440b      	add	r3, r1
 800608e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006092:	4619      	mov	r1, r3
 8006094:	4b35      	ldr	r3, [pc, #212]	; (800616c <USB_DeactivateEndpoint+0x1b0>)
 8006096:	4013      	ands	r3, r2
 8006098:	600b      	str	r3, [r1, #0]
 800609a:	e060      	b.n	800615e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	015a      	lsls	r2, r3, #5
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	4413      	add	r3, r2
 80060a4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060b2:	d11f      	bne.n	80060f4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80060b4:	68bb      	ldr	r3, [r7, #8]
 80060b6:	015a      	lsls	r2, r3, #5
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	4413      	add	r3, r2
 80060bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68ba      	ldr	r2, [r7, #8]
 80060c4:	0151      	lsls	r1, r2, #5
 80060c6:	68fa      	ldr	r2, [r7, #12]
 80060c8:	440a      	add	r2, r1
 80060ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ce:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80060d2:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	015a      	lsls	r2, r3, #5
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	4413      	add	r3, r2
 80060dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68ba      	ldr	r2, [r7, #8]
 80060e4:	0151      	lsls	r1, r2, #5
 80060e6:	68fa      	ldr	r2, [r7, #12]
 80060e8:	440a      	add	r2, r1
 80060ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80060ee:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80060f2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80060fa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060fc:	683b      	ldr	r3, [r7, #0]
 80060fe:	781b      	ldrb	r3, [r3, #0]
 8006100:	f003 030f 	and.w	r3, r3, #15
 8006104:	2101      	movs	r1, #1
 8006106:	fa01 f303 	lsl.w	r3, r1, r3
 800610a:	041b      	lsls	r3, r3, #16
 800610c:	43db      	mvns	r3, r3
 800610e:	68f9      	ldr	r1, [r7, #12]
 8006110:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006114:	4013      	ands	r3, r2
 8006116:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	781b      	ldrb	r3, [r3, #0]
 8006124:	f003 030f 	and.w	r3, r3, #15
 8006128:	2101      	movs	r1, #1
 800612a:	fa01 f303 	lsl.w	r3, r1, r3
 800612e:	041b      	lsls	r3, r3, #16
 8006130:	43db      	mvns	r3, r3
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006138:	4013      	ands	r3, r2
 800613a:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	015a      	lsls	r2, r3, #5
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	4413      	add	r3, r2
 8006144:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006148:	681a      	ldr	r2, [r3, #0]
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	0159      	lsls	r1, r3, #5
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	440b      	add	r3, r1
 8006152:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006156:	4619      	mov	r1, r3
 8006158:	4b05      	ldr	r3, [pc, #20]	; (8006170 <USB_DeactivateEndpoint+0x1b4>)
 800615a:	4013      	ands	r3, r2
 800615c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800615e:	2300      	movs	r3, #0
}
 8006160:	4618      	mov	r0, r3
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616a:	4770      	bx	lr
 800616c:	ec337800 	.word	0xec337800
 8006170:	eff37800 	.word	0xeff37800

08006174 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08a      	sub	sp, #40	; 0x28
 8006178:	af02      	add	r7, sp, #8
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	4613      	mov	r3, r2
 8006180:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 800618c:	68bb      	ldr	r3, [r7, #8]
 800618e:	785b      	ldrb	r3, [r3, #1]
 8006190:	2b01      	cmp	r3, #1
 8006192:	f040 815c 	bne.w	800644e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006196:	68bb      	ldr	r3, [r7, #8]
 8006198:	699b      	ldr	r3, [r3, #24]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d132      	bne.n	8006204 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	015a      	lsls	r2, r3, #5
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	4413      	add	r3, r2
 80061a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061aa:	691b      	ldr	r3, [r3, #16]
 80061ac:	69ba      	ldr	r2, [r7, #24]
 80061ae:	0151      	lsls	r1, r2, #5
 80061b0:	69fa      	ldr	r2, [r7, #28]
 80061b2:	440a      	add	r2, r1
 80061b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061b8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80061bc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80061c0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80061c2:	69bb      	ldr	r3, [r7, #24]
 80061c4:	015a      	lsls	r2, r3, #5
 80061c6:	69fb      	ldr	r3, [r7, #28]
 80061c8:	4413      	add	r3, r2
 80061ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ce:	691b      	ldr	r3, [r3, #16]
 80061d0:	69ba      	ldr	r2, [r7, #24]
 80061d2:	0151      	lsls	r1, r2, #5
 80061d4:	69fa      	ldr	r2, [r7, #28]
 80061d6:	440a      	add	r2, r1
 80061d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061dc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80061e0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80061e2:	69bb      	ldr	r3, [r7, #24]
 80061e4:	015a      	lsls	r2, r3, #5
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	4413      	add	r3, r2
 80061ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80061ee:	691b      	ldr	r3, [r3, #16]
 80061f0:	69ba      	ldr	r2, [r7, #24]
 80061f2:	0151      	lsls	r1, r2, #5
 80061f4:	69fa      	ldr	r2, [r7, #28]
 80061f6:	440a      	add	r2, r1
 80061f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80061fc:	0cdb      	lsrs	r3, r3, #19
 80061fe:	04db      	lsls	r3, r3, #19
 8006200:	6113      	str	r3, [r2, #16]
 8006202:	e074      	b.n	80062ee <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	015a      	lsls	r2, r3, #5
 8006208:	69fb      	ldr	r3, [r7, #28]
 800620a:	4413      	add	r3, r2
 800620c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	69ba      	ldr	r2, [r7, #24]
 8006214:	0151      	lsls	r1, r2, #5
 8006216:	69fa      	ldr	r2, [r7, #28]
 8006218:	440a      	add	r2, r1
 800621a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800621e:	0cdb      	lsrs	r3, r3, #19
 8006220:	04db      	lsls	r3, r3, #19
 8006222:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8006224:	69bb      	ldr	r3, [r7, #24]
 8006226:	015a      	lsls	r2, r3, #5
 8006228:	69fb      	ldr	r3, [r7, #28]
 800622a:	4413      	add	r3, r2
 800622c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	0151      	lsls	r1, r2, #5
 8006236:	69fa      	ldr	r2, [r7, #28]
 8006238:	440a      	add	r2, r1
 800623a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800623e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006242:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006246:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8006248:	69bb      	ldr	r3, [r7, #24]
 800624a:	015a      	lsls	r2, r3, #5
 800624c:	69fb      	ldr	r3, [r7, #28]
 800624e:	4413      	add	r3, r2
 8006250:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006254:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8006256:	68bb      	ldr	r3, [r7, #8]
 8006258:	6999      	ldr	r1, [r3, #24]
 800625a:	68bb      	ldr	r3, [r7, #8]
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	440b      	add	r3, r1
 8006260:	1e59      	subs	r1, r3, #1
 8006262:	68bb      	ldr	r3, [r7, #8]
 8006264:	68db      	ldr	r3, [r3, #12]
 8006266:	fbb1 f3f3 	udiv	r3, r1, r3
 800626a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800626c:	4b9d      	ldr	r3, [pc, #628]	; (80064e4 <USB_EPStartXfer+0x370>)
 800626e:	400b      	ands	r3, r1
 8006270:	69b9      	ldr	r1, [r7, #24]
 8006272:	0148      	lsls	r0, r1, #5
 8006274:	69f9      	ldr	r1, [r7, #28]
 8006276:	4401      	add	r1, r0
 8006278:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800627c:	4313      	orrs	r3, r2
 800627e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8006280:	69bb      	ldr	r3, [r7, #24]
 8006282:	015a      	lsls	r2, r3, #5
 8006284:	69fb      	ldr	r3, [r7, #28]
 8006286:	4413      	add	r3, r2
 8006288:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800628c:	691a      	ldr	r2, [r3, #16]
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	699b      	ldr	r3, [r3, #24]
 8006292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006296:	69b9      	ldr	r1, [r7, #24]
 8006298:	0148      	lsls	r0, r1, #5
 800629a:	69f9      	ldr	r1, [r7, #28]
 800629c:	4401      	add	r1, r0
 800629e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80062a2:	4313      	orrs	r3, r2
 80062a4:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80062a6:	68bb      	ldr	r3, [r7, #8]
 80062a8:	791b      	ldrb	r3, [r3, #4]
 80062aa:	2b01      	cmp	r3, #1
 80062ac:	d11f      	bne.n	80062ee <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	015a      	lsls	r2, r3, #5
 80062b2:	69fb      	ldr	r3, [r7, #28]
 80062b4:	4413      	add	r3, r2
 80062b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ba:	691b      	ldr	r3, [r3, #16]
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	0151      	lsls	r1, r2, #5
 80062c0:	69fa      	ldr	r2, [r7, #28]
 80062c2:	440a      	add	r2, r1
 80062c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062c8:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 80062cc:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 80062ce:	69bb      	ldr	r3, [r7, #24]
 80062d0:	015a      	lsls	r2, r3, #5
 80062d2:	69fb      	ldr	r3, [r7, #28]
 80062d4:	4413      	add	r3, r2
 80062d6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062da:	691b      	ldr	r3, [r3, #16]
 80062dc:	69ba      	ldr	r2, [r7, #24]
 80062de:	0151      	lsls	r1, r2, #5
 80062e0:	69fa      	ldr	r2, [r7, #28]
 80062e2:	440a      	add	r2, r1
 80062e4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80062e8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80062ec:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80062ee:	79fb      	ldrb	r3, [r7, #7]
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d14b      	bne.n	800638c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d009      	beq.n	8006310 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80062fc:	69bb      	ldr	r3, [r7, #24]
 80062fe:	015a      	lsls	r2, r3, #5
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	4413      	add	r3, r2
 8006304:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006308:	461a      	mov	r2, r3
 800630a:	68bb      	ldr	r3, [r7, #8]
 800630c:	695b      	ldr	r3, [r3, #20]
 800630e:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	791b      	ldrb	r3, [r3, #4]
 8006314:	2b01      	cmp	r3, #1
 8006316:	d128      	bne.n	800636a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006318:	69fb      	ldr	r3, [r7, #28]
 800631a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800631e:	689b      	ldr	r3, [r3, #8]
 8006320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006324:	2b00      	cmp	r3, #0
 8006326:	d110      	bne.n	800634a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	015a      	lsls	r2, r3, #5
 800632c:	69fb      	ldr	r3, [r7, #28]
 800632e:	4413      	add	r3, r2
 8006330:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	69ba      	ldr	r2, [r7, #24]
 8006338:	0151      	lsls	r1, r2, #5
 800633a:	69fa      	ldr	r2, [r7, #28]
 800633c:	440a      	add	r2, r1
 800633e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006342:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006346:	6013      	str	r3, [r2, #0]
 8006348:	e00f      	b.n	800636a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800634a:	69bb      	ldr	r3, [r7, #24]
 800634c:	015a      	lsls	r2, r3, #5
 800634e:	69fb      	ldr	r3, [r7, #28]
 8006350:	4413      	add	r3, r2
 8006352:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	69ba      	ldr	r2, [r7, #24]
 800635a:	0151      	lsls	r1, r2, #5
 800635c:	69fa      	ldr	r2, [r7, #28]
 800635e:	440a      	add	r2, r1
 8006360:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006364:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006368:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800636a:	69bb      	ldr	r3, [r7, #24]
 800636c:	015a      	lsls	r2, r3, #5
 800636e:	69fb      	ldr	r3, [r7, #28]
 8006370:	4413      	add	r3, r2
 8006372:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	69ba      	ldr	r2, [r7, #24]
 800637a:	0151      	lsls	r1, r2, #5
 800637c:	69fa      	ldr	r2, [r7, #28]
 800637e:	440a      	add	r2, r1
 8006380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006384:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006388:	6013      	str	r3, [r2, #0]
 800638a:	e133      	b.n	80065f4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	015a      	lsls	r2, r3, #5
 8006390:	69fb      	ldr	r3, [r7, #28]
 8006392:	4413      	add	r3, r2
 8006394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	69ba      	ldr	r2, [r7, #24]
 800639c:	0151      	lsls	r1, r2, #5
 800639e:	69fa      	ldr	r2, [r7, #28]
 80063a0:	440a      	add	r2, r1
 80063a2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80063a6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80063aa:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	791b      	ldrb	r3, [r3, #4]
 80063b0:	2b01      	cmp	r3, #1
 80063b2:	d015      	beq.n	80063e0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	699b      	ldr	r3, [r3, #24]
 80063b8:	2b00      	cmp	r3, #0
 80063ba:	f000 811b 	beq.w	80065f4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80063be:	69fb      	ldr	r3, [r7, #28]
 80063c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063c4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	f003 030f 	and.w	r3, r3, #15
 80063ce:	2101      	movs	r1, #1
 80063d0:	fa01 f303 	lsl.w	r3, r1, r3
 80063d4:	69f9      	ldr	r1, [r7, #28]
 80063d6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80063da:	4313      	orrs	r3, r2
 80063dc:	634b      	str	r3, [r1, #52]	; 0x34
 80063de:	e109      	b.n	80065f4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80063e0:	69fb      	ldr	r3, [r7, #28]
 80063e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063e6:	689b      	ldr	r3, [r3, #8]
 80063e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d110      	bne.n	8006412 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80063f0:	69bb      	ldr	r3, [r7, #24]
 80063f2:	015a      	lsls	r2, r3, #5
 80063f4:	69fb      	ldr	r3, [r7, #28]
 80063f6:	4413      	add	r3, r2
 80063f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	69ba      	ldr	r2, [r7, #24]
 8006400:	0151      	lsls	r1, r2, #5
 8006402:	69fa      	ldr	r2, [r7, #28]
 8006404:	440a      	add	r2, r1
 8006406:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800640a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800640e:	6013      	str	r3, [r2, #0]
 8006410:	e00f      	b.n	8006432 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8006412:	69bb      	ldr	r3, [r7, #24]
 8006414:	015a      	lsls	r2, r3, #5
 8006416:	69fb      	ldr	r3, [r7, #28]
 8006418:	4413      	add	r3, r2
 800641a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	69ba      	ldr	r2, [r7, #24]
 8006422:	0151      	lsls	r1, r2, #5
 8006424:	69fa      	ldr	r2, [r7, #28]
 8006426:	440a      	add	r2, r1
 8006428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800642c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006430:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	6919      	ldr	r1, [r3, #16]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	781a      	ldrb	r2, [r3, #0]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	699b      	ldr	r3, [r3, #24]
 800643e:	b298      	uxth	r0, r3
 8006440:	79fb      	ldrb	r3, [r7, #7]
 8006442:	9300      	str	r3, [sp, #0]
 8006444:	4603      	mov	r3, r0
 8006446:	68f8      	ldr	r0, [r7, #12]
 8006448:	f000 fade 	bl	8006a08 <USB_WritePacket>
 800644c:	e0d2      	b.n	80065f4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800644e:	69bb      	ldr	r3, [r7, #24]
 8006450:	015a      	lsls	r2, r3, #5
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	4413      	add	r3, r2
 8006456:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	69ba      	ldr	r2, [r7, #24]
 800645e:	0151      	lsls	r1, r2, #5
 8006460:	69fa      	ldr	r2, [r7, #28]
 8006462:	440a      	add	r2, r1
 8006464:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006468:	0cdb      	lsrs	r3, r3, #19
 800646a:	04db      	lsls	r3, r3, #19
 800646c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800646e:	69bb      	ldr	r3, [r7, #24]
 8006470:	015a      	lsls	r2, r3, #5
 8006472:	69fb      	ldr	r3, [r7, #28]
 8006474:	4413      	add	r3, r2
 8006476:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800647a:	691b      	ldr	r3, [r3, #16]
 800647c:	69ba      	ldr	r2, [r7, #24]
 800647e:	0151      	lsls	r1, r2, #5
 8006480:	69fa      	ldr	r2, [r7, #28]
 8006482:	440a      	add	r2, r1
 8006484:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006488:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800648c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006490:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	2b00      	cmp	r3, #0
 8006498:	d126      	bne.n	80064e8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800649a:	69bb      	ldr	r3, [r7, #24]
 800649c:	015a      	lsls	r2, r3, #5
 800649e:	69fb      	ldr	r3, [r7, #28]
 80064a0:	4413      	add	r3, r2
 80064a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064a6:	691a      	ldr	r2, [r3, #16]
 80064a8:	68bb      	ldr	r3, [r7, #8]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80064b0:	69b9      	ldr	r1, [r7, #24]
 80064b2:	0148      	lsls	r0, r1, #5
 80064b4:	69f9      	ldr	r1, [r7, #28]
 80064b6:	4401      	add	r1, r0
 80064b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80064bc:	4313      	orrs	r3, r2
 80064be:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	015a      	lsls	r2, r3, #5
 80064c4:	69fb      	ldr	r3, [r7, #28]
 80064c6:	4413      	add	r3, r2
 80064c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80064cc:	691b      	ldr	r3, [r3, #16]
 80064ce:	69ba      	ldr	r2, [r7, #24]
 80064d0:	0151      	lsls	r1, r2, #5
 80064d2:	69fa      	ldr	r2, [r7, #28]
 80064d4:	440a      	add	r2, r1
 80064d6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80064da:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80064de:	6113      	str	r3, [r2, #16]
 80064e0:	e03a      	b.n	8006558 <USB_EPStartXfer+0x3e4>
 80064e2:	bf00      	nop
 80064e4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	699a      	ldr	r2, [r3, #24]
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	4413      	add	r3, r2
 80064f2:	1e5a      	subs	r2, r3, #1
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80064fc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	68db      	ldr	r3, [r3, #12]
 8006502:	8afa      	ldrh	r2, [r7, #22]
 8006504:	fb03 f202 	mul.w	r2, r3, r2
 8006508:	68bb      	ldr	r3, [r7, #8]
 800650a:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 800650c:	69bb      	ldr	r3, [r7, #24]
 800650e:	015a      	lsls	r2, r3, #5
 8006510:	69fb      	ldr	r3, [r7, #28]
 8006512:	4413      	add	r3, r2
 8006514:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006518:	691a      	ldr	r2, [r3, #16]
 800651a:	8afb      	ldrh	r3, [r7, #22]
 800651c:	04d9      	lsls	r1, r3, #19
 800651e:	4b38      	ldr	r3, [pc, #224]	; (8006600 <USB_EPStartXfer+0x48c>)
 8006520:	400b      	ands	r3, r1
 8006522:	69b9      	ldr	r1, [r7, #24]
 8006524:	0148      	lsls	r0, r1, #5
 8006526:	69f9      	ldr	r1, [r7, #28]
 8006528:	4401      	add	r1, r0
 800652a:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800652e:	4313      	orrs	r3, r2
 8006530:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8006532:	69bb      	ldr	r3, [r7, #24]
 8006534:	015a      	lsls	r2, r3, #5
 8006536:	69fb      	ldr	r3, [r7, #28]
 8006538:	4413      	add	r3, r2
 800653a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800653e:	691a      	ldr	r2, [r3, #16]
 8006540:	68bb      	ldr	r3, [r7, #8]
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006548:	69b9      	ldr	r1, [r7, #24]
 800654a:	0148      	lsls	r0, r1, #5
 800654c:	69f9      	ldr	r1, [r7, #28]
 800654e:	4401      	add	r1, r0
 8006550:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006554:	4313      	orrs	r3, r2
 8006556:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006558:	79fb      	ldrb	r3, [r7, #7]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10d      	bne.n	800657a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800655e:	68bb      	ldr	r3, [r7, #8]
 8006560:	691b      	ldr	r3, [r3, #16]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d009      	beq.n	800657a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	6919      	ldr	r1, [r3, #16]
 800656a:	69bb      	ldr	r3, [r7, #24]
 800656c:	015a      	lsls	r2, r3, #5
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	4413      	add	r3, r2
 8006572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006576:	460a      	mov	r2, r1
 8006578:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800657a:	68bb      	ldr	r3, [r7, #8]
 800657c:	791b      	ldrb	r3, [r3, #4]
 800657e:	2b01      	cmp	r3, #1
 8006580:	d128      	bne.n	80065d4 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800658e:	2b00      	cmp	r3, #0
 8006590:	d110      	bne.n	80065b4 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8006592:	69bb      	ldr	r3, [r7, #24]
 8006594:	015a      	lsls	r2, r3, #5
 8006596:	69fb      	ldr	r3, [r7, #28]
 8006598:	4413      	add	r3, r2
 800659a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	69ba      	ldr	r2, [r7, #24]
 80065a2:	0151      	lsls	r1, r2, #5
 80065a4:	69fa      	ldr	r2, [r7, #28]
 80065a6:	440a      	add	r2, r1
 80065a8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80065b0:	6013      	str	r3, [r2, #0]
 80065b2:	e00f      	b.n	80065d4 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	015a      	lsls	r2, r3, #5
 80065b8:	69fb      	ldr	r3, [r7, #28]
 80065ba:	4413      	add	r3, r2
 80065bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	69ba      	ldr	r2, [r7, #24]
 80065c4:	0151      	lsls	r1, r2, #5
 80065c6:	69fa      	ldr	r2, [r7, #28]
 80065c8:	440a      	add	r2, r1
 80065ca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065d2:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80065d4:	69bb      	ldr	r3, [r7, #24]
 80065d6:	015a      	lsls	r2, r3, #5
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	69ba      	ldr	r2, [r7, #24]
 80065e4:	0151      	lsls	r1, r2, #5
 80065e6:	69fa      	ldr	r2, [r7, #28]
 80065e8:	440a      	add	r2, r1
 80065ea:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80065ee:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80065f2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3720      	adds	r7, #32
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	1ff80000 	.word	0x1ff80000

08006604 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8006604:	b480      	push	{r7}
 8006606:	b087      	sub	sp, #28
 8006608:	af00      	add	r7, sp, #0
 800660a:	60f8      	str	r0, [r7, #12]
 800660c:	60b9      	str	r1, [r7, #8]
 800660e:	4613      	mov	r3, r2
 8006610:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8006616:	68bb      	ldr	r3, [r7, #8]
 8006618:	781b      	ldrb	r3, [r3, #0]
 800661a:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800661c:	68bb      	ldr	r3, [r7, #8]
 800661e:	785b      	ldrb	r3, [r3, #1]
 8006620:	2b01      	cmp	r3, #1
 8006622:	f040 80ce 	bne.w	80067c2 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	699b      	ldr	r3, [r3, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d132      	bne.n	8006694 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800662e:	693b      	ldr	r3, [r7, #16]
 8006630:	015a      	lsls	r2, r3, #5
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	4413      	add	r3, r2
 8006636:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800663a:	691b      	ldr	r3, [r3, #16]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	0151      	lsls	r1, r2, #5
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	440a      	add	r2, r1
 8006644:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006648:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800664c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006650:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8006652:	693b      	ldr	r3, [r7, #16]
 8006654:	015a      	lsls	r2, r3, #5
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	4413      	add	r3, r2
 800665a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800665e:	691b      	ldr	r3, [r3, #16]
 8006660:	693a      	ldr	r2, [r7, #16]
 8006662:	0151      	lsls	r1, r2, #5
 8006664:	697a      	ldr	r2, [r7, #20]
 8006666:	440a      	add	r2, r1
 8006668:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800666c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006670:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	015a      	lsls	r2, r3, #5
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	4413      	add	r3, r2
 800667a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	0151      	lsls	r1, r2, #5
 8006684:	697a      	ldr	r2, [r7, #20]
 8006686:	440a      	add	r2, r1
 8006688:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800668c:	0cdb      	lsrs	r3, r3, #19
 800668e:	04db      	lsls	r3, r3, #19
 8006690:	6113      	str	r3, [r2, #16]
 8006692:	e04e      	b.n	8006732 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8006694:	693b      	ldr	r3, [r7, #16]
 8006696:	015a      	lsls	r2, r3, #5
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	4413      	add	r3, r2
 800669c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066a0:	691b      	ldr	r3, [r3, #16]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	0151      	lsls	r1, r2, #5
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	440a      	add	r2, r1
 80066aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ae:	0cdb      	lsrs	r3, r3, #19
 80066b0:	04db      	lsls	r3, r3, #19
 80066b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	015a      	lsls	r2, r3, #5
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	4413      	add	r3, r2
 80066bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066c0:	691b      	ldr	r3, [r3, #16]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	0151      	lsls	r1, r2, #5
 80066c6:	697a      	ldr	r2, [r7, #20]
 80066c8:	440a      	add	r2, r1
 80066ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80066ce:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80066d2:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80066d6:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80066d8:	68bb      	ldr	r3, [r7, #8]
 80066da:	699a      	ldr	r2, [r3, #24]
 80066dc:	68bb      	ldr	r3, [r7, #8]
 80066de:	68db      	ldr	r3, [r3, #12]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80066e4:	68bb      	ldr	r3, [r7, #8]
 80066e6:	68da      	ldr	r2, [r3, #12]
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	015a      	lsls	r2, r3, #5
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	4413      	add	r3, r2
 80066f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80066f8:	691b      	ldr	r3, [r3, #16]
 80066fa:	693a      	ldr	r2, [r7, #16]
 80066fc:	0151      	lsls	r1, r2, #5
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	440a      	add	r2, r1
 8006702:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006706:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800670a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800670c:	693b      	ldr	r3, [r7, #16]
 800670e:	015a      	lsls	r2, r3, #5
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	4413      	add	r3, r2
 8006714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006718:	691a      	ldr	r2, [r3, #16]
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006722:	6939      	ldr	r1, [r7, #16]
 8006724:	0148      	lsls	r0, r1, #5
 8006726:	6979      	ldr	r1, [r7, #20]
 8006728:	4401      	add	r1, r0
 800672a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800672e:	4313      	orrs	r3, r2
 8006730:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8006732:	79fb      	ldrb	r3, [r7, #7]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d11e      	bne.n	8006776 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d009      	beq.n	8006754 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8006740:	693b      	ldr	r3, [r7, #16]
 8006742:	015a      	lsls	r2, r3, #5
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	4413      	add	r3, r2
 8006748:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800674c:	461a      	mov	r2, r3
 800674e:	68bb      	ldr	r3, [r7, #8]
 8006750:	695b      	ldr	r3, [r3, #20]
 8006752:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006754:	693b      	ldr	r3, [r7, #16]
 8006756:	015a      	lsls	r2, r3, #5
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	4413      	add	r3, r2
 800675c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	693a      	ldr	r2, [r7, #16]
 8006764:	0151      	lsls	r1, r2, #5
 8006766:	697a      	ldr	r2, [r7, #20]
 8006768:	440a      	add	r2, r1
 800676a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800676e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	e097      	b.n	80068a6 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8006776:	693b      	ldr	r3, [r7, #16]
 8006778:	015a      	lsls	r2, r3, #5
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	4413      	add	r3, r2
 800677e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	693a      	ldr	r2, [r7, #16]
 8006786:	0151      	lsls	r1, r2, #5
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	440a      	add	r2, r1
 800678c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006790:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8006794:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8006796:	68bb      	ldr	r3, [r7, #8]
 8006798:	699b      	ldr	r3, [r3, #24]
 800679a:	2b00      	cmp	r3, #0
 800679c:	f000 8083 	beq.w	80068a6 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80067a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	781b      	ldrb	r3, [r3, #0]
 80067ac:	f003 030f 	and.w	r3, r3, #15
 80067b0:	2101      	movs	r1, #1
 80067b2:	fa01 f303 	lsl.w	r3, r1, r3
 80067b6:	6979      	ldr	r1, [r7, #20]
 80067b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80067bc:	4313      	orrs	r3, r2
 80067be:	634b      	str	r3, [r1, #52]	; 0x34
 80067c0:	e071      	b.n	80068a6 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80067c2:	693b      	ldr	r3, [r7, #16]
 80067c4:	015a      	lsls	r2, r3, #5
 80067c6:	697b      	ldr	r3, [r7, #20]
 80067c8:	4413      	add	r3, r2
 80067ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ce:	691b      	ldr	r3, [r3, #16]
 80067d0:	693a      	ldr	r2, [r7, #16]
 80067d2:	0151      	lsls	r1, r2, #5
 80067d4:	697a      	ldr	r2, [r7, #20]
 80067d6:	440a      	add	r2, r1
 80067d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067dc:	0cdb      	lsrs	r3, r3, #19
 80067de:	04db      	lsls	r3, r3, #19
 80067e0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	015a      	lsls	r2, r3, #5
 80067e6:	697b      	ldr	r3, [r7, #20]
 80067e8:	4413      	add	r3, r2
 80067ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80067ee:	691b      	ldr	r3, [r3, #16]
 80067f0:	693a      	ldr	r2, [r7, #16]
 80067f2:	0151      	lsls	r1, r2, #5
 80067f4:	697a      	ldr	r2, [r7, #20]
 80067f6:	440a      	add	r2, r1
 80067f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80067fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8006800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8006804:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8006806:	68bb      	ldr	r3, [r7, #8]
 8006808:	699b      	ldr	r3, [r3, #24]
 800680a:	2b00      	cmp	r3, #0
 800680c:	d003      	beq.n	8006816 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800680e:	68bb      	ldr	r3, [r7, #8]
 8006810:	68da      	ldr	r2, [r3, #12]
 8006812:	68bb      	ldr	r3, [r7, #8]
 8006814:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8006816:	68bb      	ldr	r3, [r7, #8]
 8006818:	68da      	ldr	r2, [r3, #12]
 800681a:	68bb      	ldr	r3, [r7, #8]
 800681c:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800681e:	693b      	ldr	r3, [r7, #16]
 8006820:	015a      	lsls	r2, r3, #5
 8006822:	697b      	ldr	r3, [r7, #20]
 8006824:	4413      	add	r3, r2
 8006826:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800682a:	691b      	ldr	r3, [r3, #16]
 800682c:	693a      	ldr	r2, [r7, #16]
 800682e:	0151      	lsls	r1, r2, #5
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	440a      	add	r2, r1
 8006834:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006838:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800683c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800683e:	693b      	ldr	r3, [r7, #16]
 8006840:	015a      	lsls	r2, r3, #5
 8006842:	697b      	ldr	r3, [r7, #20]
 8006844:	4413      	add	r3, r2
 8006846:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	68bb      	ldr	r3, [r7, #8]
 800684e:	69db      	ldr	r3, [r3, #28]
 8006850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006854:	6939      	ldr	r1, [r7, #16]
 8006856:	0148      	lsls	r0, r1, #5
 8006858:	6979      	ldr	r1, [r7, #20]
 800685a:	4401      	add	r1, r0
 800685c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8006860:	4313      	orrs	r3, r2
 8006862:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8006864:	79fb      	ldrb	r3, [r7, #7]
 8006866:	2b01      	cmp	r3, #1
 8006868:	d10d      	bne.n	8006886 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800686a:	68bb      	ldr	r3, [r7, #8]
 800686c:	691b      	ldr	r3, [r3, #16]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d009      	beq.n	8006886 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8006872:	68bb      	ldr	r3, [r7, #8]
 8006874:	6919      	ldr	r1, [r3, #16]
 8006876:	693b      	ldr	r3, [r7, #16]
 8006878:	015a      	lsls	r2, r3, #5
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	4413      	add	r3, r2
 800687e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006882:	460a      	mov	r2, r1
 8006884:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8006886:	693b      	ldr	r3, [r7, #16]
 8006888:	015a      	lsls	r2, r3, #5
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	4413      	add	r3, r2
 800688e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	693a      	ldr	r2, [r7, #16]
 8006896:	0151      	lsls	r1, r2, #5
 8006898:	697a      	ldr	r2, [r7, #20]
 800689a:	440a      	add	r2, r1
 800689c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80068a0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80068a4:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80068a6:	2300      	movs	r3, #0
}
 80068a8:	4618      	mov	r0, r3
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b087      	sub	sp, #28
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
 80068bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068be:	2300      	movs	r3, #0
 80068c0:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80068c2:	2300      	movs	r3, #0
 80068c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80068ca:	683b      	ldr	r3, [r7, #0]
 80068cc:	785b      	ldrb	r3, [r3, #1]
 80068ce:	2b01      	cmp	r3, #1
 80068d0:	d14a      	bne.n	8006968 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	781b      	ldrb	r3, [r3, #0]
 80068d6:	015a      	lsls	r2, r3, #5
 80068d8:	693b      	ldr	r3, [r7, #16]
 80068da:	4413      	add	r3, r2
 80068dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80068e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80068ea:	f040 8086 	bne.w	80069fa <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	781b      	ldrb	r3, [r3, #0]
 80068f2:	015a      	lsls	r2, r3, #5
 80068f4:	693b      	ldr	r3, [r7, #16]
 80068f6:	4413      	add	r3, r2
 80068f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	683a      	ldr	r2, [r7, #0]
 8006900:	7812      	ldrb	r2, [r2, #0]
 8006902:	0151      	lsls	r1, r2, #5
 8006904:	693a      	ldr	r2, [r7, #16]
 8006906:	440a      	add	r2, r1
 8006908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800690c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8006910:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	781b      	ldrb	r3, [r3, #0]
 8006916:	015a      	lsls	r2, r3, #5
 8006918:	693b      	ldr	r3, [r7, #16]
 800691a:	4413      	add	r3, r2
 800691c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	683a      	ldr	r2, [r7, #0]
 8006924:	7812      	ldrb	r2, [r2, #0]
 8006926:	0151      	lsls	r1, r2, #5
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	440a      	add	r2, r1
 800692c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006930:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8006934:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	3301      	adds	r3, #1
 800693a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	f242 7210 	movw	r2, #10000	; 0x2710
 8006942:	4293      	cmp	r3, r2
 8006944:	d902      	bls.n	800694c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8006946:	2301      	movs	r3, #1
 8006948:	75fb      	strb	r3, [r7, #23]
          break;
 800694a:	e056      	b.n	80069fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	781b      	ldrb	r3, [r3, #0]
 8006950:	015a      	lsls	r2, r3, #5
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	4413      	add	r3, r2
 8006956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006960:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006964:	d0e7      	beq.n	8006936 <USB_EPStopXfer+0x82>
 8006966:	e048      	b.n	80069fa <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	781b      	ldrb	r3, [r3, #0]
 800696c:	015a      	lsls	r2, r3, #5
 800696e:	693b      	ldr	r3, [r7, #16]
 8006970:	4413      	add	r3, r2
 8006972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800697c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006980:	d13b      	bne.n	80069fa <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	781b      	ldrb	r3, [r3, #0]
 8006986:	015a      	lsls	r2, r3, #5
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	4413      	add	r3, r2
 800698c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	683a      	ldr	r2, [r7, #0]
 8006994:	7812      	ldrb	r2, [r2, #0]
 8006996:	0151      	lsls	r1, r2, #5
 8006998:	693a      	ldr	r2, [r7, #16]
 800699a:	440a      	add	r2, r1
 800699c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80069a4:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	015a      	lsls	r2, r3, #5
 80069ac:	693b      	ldr	r3, [r7, #16]
 80069ae:	4413      	add	r3, r2
 80069b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	683a      	ldr	r2, [r7, #0]
 80069b8:	7812      	ldrb	r2, [r2, #0]
 80069ba:	0151      	lsls	r1, r2, #5
 80069bc:	693a      	ldr	r2, [r7, #16]
 80069be:	440a      	add	r2, r1
 80069c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80069c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80069c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	3301      	adds	r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80069d6:	4293      	cmp	r3, r2
 80069d8:	d902      	bls.n	80069e0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80069da:	2301      	movs	r3, #1
 80069dc:	75fb      	strb	r3, [r7, #23]
          break;
 80069de:	e00c      	b.n	80069fa <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	015a      	lsls	r2, r3, #5
 80069e6:	693b      	ldr	r3, [r7, #16]
 80069e8:	4413      	add	r3, r2
 80069ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80069f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80069f8:	d0e7      	beq.n	80069ca <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80069fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b089      	sub	sp, #36	; 0x24
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4611      	mov	r1, r2
 8006a14:	461a      	mov	r2, r3
 8006a16:	460b      	mov	r3, r1
 8006a18:	71fb      	strb	r3, [r7, #7]
 8006a1a:	4613      	mov	r3, r2
 8006a1c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006a26:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d123      	bne.n	8006a76 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006a2e:	88bb      	ldrh	r3, [r7, #4]
 8006a30:	3303      	adds	r3, #3
 8006a32:	089b      	lsrs	r3, r3, #2
 8006a34:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006a36:	2300      	movs	r3, #0
 8006a38:	61bb      	str	r3, [r7, #24]
 8006a3a:	e018      	b.n	8006a6e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006a3c:	79fb      	ldrb	r3, [r7, #7]
 8006a3e:	031a      	lsls	r2, r3, #12
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	4413      	add	r3, r2
 8006a44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a48:	461a      	mov	r2, r3
 8006a4a:	69fb      	ldr	r3, [r7, #28]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006a50:	69fb      	ldr	r3, [r7, #28]
 8006a52:	3301      	adds	r3, #1
 8006a54:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	3301      	adds	r3, #1
 8006a60:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006a62:	69fb      	ldr	r3, [r7, #28]
 8006a64:	3301      	adds	r3, #1
 8006a66:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	3301      	adds	r3, #1
 8006a6c:	61bb      	str	r3, [r7, #24]
 8006a6e:	69ba      	ldr	r2, [r7, #24]
 8006a70:	693b      	ldr	r3, [r7, #16]
 8006a72:	429a      	cmp	r2, r3
 8006a74:	d3e2      	bcc.n	8006a3c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006a76:	2300      	movs	r3, #0
}
 8006a78:	4618      	mov	r0, r3
 8006a7a:	3724      	adds	r7, #36	; 0x24
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr

08006a84 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a84:	b480      	push	{r7}
 8006a86:	b08b      	sub	sp, #44	; 0x2c
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	60f8      	str	r0, [r7, #12]
 8006a8c:	60b9      	str	r1, [r7, #8]
 8006a8e:	4613      	mov	r3, r2
 8006a90:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a9a:	88fb      	ldrh	r3, [r7, #6]
 8006a9c:	089b      	lsrs	r3, r3, #2
 8006a9e:	b29b      	uxth	r3, r3
 8006aa0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006aa2:	88fb      	ldrh	r3, [r7, #6]
 8006aa4:	f003 0303 	and.w	r3, r3, #3
 8006aa8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006aaa:	2300      	movs	r3, #0
 8006aac:	623b      	str	r3, [r7, #32]
 8006aae:	e014      	b.n	8006ada <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006ab0:	69bb      	ldr	r3, [r7, #24]
 8006ab2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	601a      	str	r2, [r3, #0]
    pDest++;
 8006abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006abe:	3301      	adds	r3, #1
 8006ac0:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ac4:	3301      	adds	r3, #1
 8006ac6:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aca:	3301      	adds	r3, #1
 8006acc:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad0:	3301      	adds	r3, #1
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006ad4:	6a3b      	ldr	r3, [r7, #32]
 8006ad6:	3301      	adds	r3, #1
 8006ad8:	623b      	str	r3, [r7, #32]
 8006ada:	6a3a      	ldr	r2, [r7, #32]
 8006adc:	697b      	ldr	r3, [r7, #20]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d3e6      	bcc.n	8006ab0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006ae2:	8bfb      	ldrh	r3, [r7, #30]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01e      	beq.n	8006b26 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006ae8:	2300      	movs	r3, #0
 8006aea:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006aec:	69bb      	ldr	r3, [r7, #24]
 8006aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006af2:	461a      	mov	r2, r3
 8006af4:	f107 0310 	add.w	r3, r7, #16
 8006af8:	6812      	ldr	r2, [r2, #0]
 8006afa:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006afc:	693a      	ldr	r2, [r7, #16]
 8006afe:	6a3b      	ldr	r3, [r7, #32]
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	fa22 f303 	lsr.w	r3, r2, r3
 8006b08:	b2da      	uxtb	r2, r3
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	701a      	strb	r2, [r3, #0]
      i++;
 8006b0e:	6a3b      	ldr	r3, [r7, #32]
 8006b10:	3301      	adds	r3, #1
 8006b12:	623b      	str	r3, [r7, #32]
      pDest++;
 8006b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b16:	3301      	adds	r3, #1
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006b1a:	8bfb      	ldrh	r3, [r7, #30]
 8006b1c:	3b01      	subs	r3, #1
 8006b1e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006b20:	8bfb      	ldrh	r3, [r7, #30]
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1ea      	bne.n	8006afc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b28:	4618      	mov	r0, r3
 8006b2a:	372c      	adds	r7, #44	; 0x2c
 8006b2c:	46bd      	mov	sp, r7
 8006b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b32:	4770      	bx	lr

08006b34 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006b34:	b480      	push	{r7}
 8006b36:	b085      	sub	sp, #20
 8006b38:	af00      	add	r7, sp, #0
 8006b3a:	6078      	str	r0, [r7, #4]
 8006b3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006b42:	683b      	ldr	r3, [r7, #0]
 8006b44:	781b      	ldrb	r3, [r3, #0]
 8006b46:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	785b      	ldrb	r3, [r3, #1]
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d12c      	bne.n	8006baa <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	015a      	lsls	r2, r3, #5
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	4413      	add	r3, r2
 8006b58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	db12      	blt.n	8006b88 <USB_EPSetStall+0x54>
 8006b62:	68bb      	ldr	r3, [r7, #8]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d00f      	beq.n	8006b88 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	015a      	lsls	r2, r3, #5
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	4413      	add	r3, r2
 8006b70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	68ba      	ldr	r2, [r7, #8]
 8006b78:	0151      	lsls	r1, r2, #5
 8006b7a:	68fa      	ldr	r2, [r7, #12]
 8006b7c:	440a      	add	r2, r1
 8006b7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006b82:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006b86:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	015a      	lsls	r2, r3, #5
 8006b8c:	68fb      	ldr	r3, [r7, #12]
 8006b8e:	4413      	add	r3, r2
 8006b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	68ba      	ldr	r2, [r7, #8]
 8006b98:	0151      	lsls	r1, r2, #5
 8006b9a:	68fa      	ldr	r2, [r7, #12]
 8006b9c:	440a      	add	r2, r1
 8006b9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006ba2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	e02b      	b.n	8006c02 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8006baa:	68bb      	ldr	r3, [r7, #8]
 8006bac:	015a      	lsls	r2, r3, #5
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	db12      	blt.n	8006be2 <USB_EPSetStall+0xae>
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d00f      	beq.n	8006be2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	015a      	lsls	r2, r3, #5
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	4413      	add	r3, r2
 8006bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	68ba      	ldr	r2, [r7, #8]
 8006bd2:	0151      	lsls	r1, r2, #5
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	440a      	add	r2, r1
 8006bd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bdc:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8006be0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8006be2:	68bb      	ldr	r3, [r7, #8]
 8006be4:	015a      	lsls	r2, r3, #5
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	4413      	add	r3, r2
 8006bea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	68ba      	ldr	r2, [r7, #8]
 8006bf2:	0151      	lsls	r1, r2, #5
 8006bf4:	68fa      	ldr	r2, [r7, #12]
 8006bf6:	440a      	add	r2, r1
 8006bf8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006bfc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006c00:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006c02:	2300      	movs	r3, #0
}
 8006c04:	4618      	mov	r0, r3
 8006c06:	3714      	adds	r7, #20
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b085      	sub	sp, #20
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	781b      	ldrb	r3, [r3, #0]
 8006c22:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8006c24:	683b      	ldr	r3, [r7, #0]
 8006c26:	785b      	ldrb	r3, [r3, #1]
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d128      	bne.n	8006c7e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8006c2c:	68bb      	ldr	r3, [r7, #8]
 8006c2e:	015a      	lsls	r2, r3, #5
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	4413      	add	r3, r2
 8006c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68ba      	ldr	r2, [r7, #8]
 8006c3c:	0151      	lsls	r1, r2, #5
 8006c3e:	68fa      	ldr	r2, [r7, #12]
 8006c40:	440a      	add	r2, r1
 8006c42:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c46:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c4a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	791b      	ldrb	r3, [r3, #4]
 8006c50:	2b03      	cmp	r3, #3
 8006c52:	d003      	beq.n	8006c5c <USB_EPClearStall+0x4c>
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	791b      	ldrb	r3, [r3, #4]
 8006c58:	2b02      	cmp	r3, #2
 8006c5a:	d138      	bne.n	8006cce <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006c5c:	68bb      	ldr	r3, [r7, #8]
 8006c5e:	015a      	lsls	r2, r3, #5
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	4413      	add	r3, r2
 8006c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	68ba      	ldr	r2, [r7, #8]
 8006c6c:	0151      	lsls	r1, r2, #5
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	440a      	add	r2, r1
 8006c72:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c7a:	6013      	str	r3, [r2, #0]
 8006c7c:	e027      	b.n	8006cce <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	015a      	lsls	r2, r3, #5
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	4413      	add	r3, r2
 8006c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	68ba      	ldr	r2, [r7, #8]
 8006c8e:	0151      	lsls	r1, r2, #5
 8006c90:	68fa      	ldr	r2, [r7, #12]
 8006c92:	440a      	add	r2, r1
 8006c94:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006c98:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006c9c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	791b      	ldrb	r3, [r3, #4]
 8006ca2:	2b03      	cmp	r3, #3
 8006ca4:	d003      	beq.n	8006cae <USB_EPClearStall+0x9e>
 8006ca6:	683b      	ldr	r3, [r7, #0]
 8006ca8:	791b      	ldrb	r3, [r3, #4]
 8006caa:	2b02      	cmp	r3, #2
 8006cac:	d10f      	bne.n	8006cce <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8006cae:	68bb      	ldr	r3, [r7, #8]
 8006cb0:	015a      	lsls	r2, r3, #5
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	4413      	add	r3, r2
 8006cb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	68ba      	ldr	r2, [r7, #8]
 8006cbe:	0151      	lsls	r1, r2, #5
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	440a      	add	r2, r1
 8006cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006cc8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ccc:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	68fa      	ldr	r2, [r7, #12]
 8006cf6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006cfa:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8006cfe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d06:	681a      	ldr	r2, [r3, #0]
 8006d08:	78fb      	ldrb	r3, [r7, #3]
 8006d0a:	011b      	lsls	r3, r3, #4
 8006d0c:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8006d10:	68f9      	ldr	r1, [r7, #12]
 8006d12:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006d16:	4313      	orrs	r3, r2
 8006d18:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8006d1a:	2300      	movs	r3, #0
}
 8006d1c:	4618      	mov	r0, r3
 8006d1e:	3714      	adds	r7, #20
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b085      	sub	sp, #20
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d34:	68fb      	ldr	r3, [r7, #12]
 8006d36:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	68fa      	ldr	r2, [r7, #12]
 8006d3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d42:	f023 0303 	bic.w	r3, r3, #3
 8006d46:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d4e:	685b      	ldr	r3, [r3, #4]
 8006d50:	68fa      	ldr	r2, [r7, #12]
 8006d52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d56:	f023 0302 	bic.w	r3, r3, #2
 8006d5a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d5c:	2300      	movs	r3, #0
}
 8006d5e:	4618      	mov	r0, r3
 8006d60:	3714      	adds	r7, #20
 8006d62:	46bd      	mov	sp, r7
 8006d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d68:	4770      	bx	lr

08006d6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b085      	sub	sp, #20
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006d84:	f023 0303 	bic.w	r3, r3, #3
 8006d88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006d90:	685b      	ldr	r3, [r3, #4]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006d98:	f043 0302 	orr.w	r3, r3, #2
 8006d9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006dac:	b480      	push	{r7}
 8006dae:	b085      	sub	sp, #20
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	695b      	ldr	r3, [r3, #20]
 8006db8:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	699b      	ldr	r3, [r3, #24]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	4013      	ands	r3, r2
 8006dc2:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006dc4:	68fb      	ldr	r3, [r7, #12]
}
 8006dc6:	4618      	mov	r0, r3
 8006dc8:	3714      	adds	r7, #20
 8006dca:	46bd      	mov	sp, r7
 8006dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd0:	4770      	bx	lr

08006dd2 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006dd2:	b480      	push	{r7}
 8006dd4:	b085      	sub	sp, #20
 8006dd6:	af00      	add	r7, sp, #0
 8006dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006dee:	69db      	ldr	r3, [r3, #28]
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	4013      	ands	r3, r2
 8006df4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8006df6:	68bb      	ldr	r3, [r7, #8]
 8006df8:	0c1b      	lsrs	r3, r3, #16
}
 8006dfa:	4618      	mov	r0, r3
 8006dfc:	3714      	adds	r7, #20
 8006dfe:	46bd      	mov	sp, r7
 8006e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e04:	4770      	bx	lr

08006e06 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8006e06:	b480      	push	{r7}
 8006e08:	b085      	sub	sp, #20
 8006e0a:	af00      	add	r7, sp, #0
 8006e0c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e22:	69db      	ldr	r3, [r3, #28]
 8006e24:	68ba      	ldr	r2, [r7, #8]
 8006e26:	4013      	ands	r3, r2
 8006e28:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8006e2a:	68bb      	ldr	r3, [r7, #8]
 8006e2c:	b29b      	uxth	r3, r3
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3714      	adds	r7, #20
 8006e32:	46bd      	mov	sp, r7
 8006e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e38:	4770      	bx	lr

08006e3a <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e3a:	b480      	push	{r7}
 8006e3c:	b085      	sub	sp, #20
 8006e3e:	af00      	add	r7, sp, #0
 8006e40:	6078      	str	r0, [r7, #4]
 8006e42:	460b      	mov	r3, r1
 8006e44:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8006e4a:	78fb      	ldrb	r3, [r7, #3]
 8006e4c:	015a      	lsls	r2, r3, #5
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	4413      	add	r3, r2
 8006e52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e60:	695b      	ldr	r3, [r3, #20]
 8006e62:	68ba      	ldr	r2, [r7, #8]
 8006e64:	4013      	ands	r3, r2
 8006e66:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006e68:	68bb      	ldr	r3, [r7, #8]
}
 8006e6a:	4618      	mov	r0, r3
 8006e6c:	3714      	adds	r7, #20
 8006e6e:	46bd      	mov	sp, r7
 8006e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e74:	4770      	bx	lr

08006e76 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8006e76:	b480      	push	{r7}
 8006e78:	b087      	sub	sp, #28
 8006e7a:	af00      	add	r7, sp, #0
 8006e7c:	6078      	str	r0, [r7, #4]
 8006e7e:	460b      	mov	r3, r1
 8006e80:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8006e86:	697b      	ldr	r3, [r7, #20]
 8006e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e8c:	691b      	ldr	r3, [r3, #16]
 8006e8e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8006e90:	697b      	ldr	r3, [r7, #20]
 8006e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006e96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e98:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8006e9a:	78fb      	ldrb	r3, [r7, #3]
 8006e9c:	f003 030f 	and.w	r3, r3, #15
 8006ea0:	68fa      	ldr	r2, [r7, #12]
 8006ea2:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea6:	01db      	lsls	r3, r3, #7
 8006ea8:	b2db      	uxtb	r3, r3
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	4313      	orrs	r3, r2
 8006eae:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8006eb0:	78fb      	ldrb	r3, [r7, #3]
 8006eb2:	015a      	lsls	r2, r3, #5
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	4413      	add	r3, r2
 8006eb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006ebc:	689b      	ldr	r3, [r3, #8]
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4013      	ands	r3, r2
 8006ec2:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006ec4:	68bb      	ldr	r3, [r7, #8]
}
 8006ec6:	4618      	mov	r0, r3
 8006ec8:	371c      	adds	r7, #28
 8006eca:	46bd      	mov	sp, r7
 8006ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed0:	4770      	bx	lr

08006ed2 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ed2:	b480      	push	{r7}
 8006ed4:	b083      	sub	sp, #12
 8006ed6:	af00      	add	r7, sp, #0
 8006ed8:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	f003 0301 	and.w	r3, r3, #1
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	370c      	adds	r7, #12
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr

08006eee <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8006eee:	b480      	push	{r7}
 8006ef0:	b085      	sub	sp, #20
 8006ef2:	af00      	add	r7, sp, #0
 8006ef4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	68fa      	ldr	r2, [r7, #12]
 8006f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8006f08:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8006f0c:	f023 0307 	bic.w	r3, r3, #7
 8006f10:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	68fa      	ldr	r2, [r7, #12]
 8006f1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006f20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f24:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8006f26:	2300      	movs	r3, #0
}
 8006f28:	4618      	mov	r0, r3
 8006f2a:	3714      	adds	r7, #20
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f32:	4770      	bx	lr

08006f34 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8006f34:	b480      	push	{r7}
 8006f36:	b087      	sub	sp, #28
 8006f38:	af00      	add	r7, sp, #0
 8006f3a:	60f8      	str	r0, [r7, #12]
 8006f3c:	460b      	mov	r3, r1
 8006f3e:	607a      	str	r2, [r7, #4]
 8006f40:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	333c      	adds	r3, #60	; 0x3c
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	681b      	ldr	r3, [r3, #0]
 8006f4e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8006f50:	693b      	ldr	r3, [r7, #16]
 8006f52:	4a26      	ldr	r2, [pc, #152]	; (8006fec <USB_EP0_OutStart+0xb8>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d90a      	bls.n	8006f6e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006f64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006f68:	d101      	bne.n	8006f6e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	e037      	b.n	8006fde <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006f6e:	697b      	ldr	r3, [r7, #20]
 8006f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f74:	461a      	mov	r2, r3
 8006f76:	2300      	movs	r3, #0
 8006f78:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	697a      	ldr	r2, [r7, #20]
 8006f84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f88:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006f8c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006f94:	691b      	ldr	r3, [r3, #16]
 8006f96:	697a      	ldr	r2, [r7, #20]
 8006f98:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006f9c:	f043 0318 	orr.w	r3, r3, #24
 8006fa0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006fa2:	697b      	ldr	r3, [r7, #20]
 8006fa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fa8:	691b      	ldr	r3, [r3, #16]
 8006faa:	697a      	ldr	r2, [r7, #20]
 8006fac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fb0:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006fb4:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8006fb6:	7afb      	ldrb	r3, [r7, #11]
 8006fb8:	2b01      	cmp	r3, #1
 8006fba:	d10f      	bne.n	8006fdc <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fc2:	461a      	mov	r2, r3
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	697a      	ldr	r2, [r7, #20]
 8006fd2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006fd6:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8006fda:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006fdc:	2300      	movs	r3, #0
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	371c      	adds	r7, #28
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe8:	4770      	bx	lr
 8006fea:	bf00      	nop
 8006fec:	4f54300a 	.word	0x4f54300a

08006ff0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	b085      	sub	sp, #20
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	3301      	adds	r3, #1
 8007000:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	4a13      	ldr	r2, [pc, #76]	; (8007054 <USB_CoreReset+0x64>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d901      	bls.n	800700e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800700a:	2303      	movs	r3, #3
 800700c:	e01b      	b.n	8007046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	691b      	ldr	r3, [r3, #16]
 8007012:	2b00      	cmp	r3, #0
 8007014:	daf2      	bge.n	8006ffc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007016:	2300      	movs	r3, #0
 8007018:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	f043 0201 	orr.w	r2, r3, #1
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	3301      	adds	r3, #1
 800702a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800702c:	68fb      	ldr	r3, [r7, #12]
 800702e:	4a09      	ldr	r2, [pc, #36]	; (8007054 <USB_CoreReset+0x64>)
 8007030:	4293      	cmp	r3, r2
 8007032:	d901      	bls.n	8007038 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007034:	2303      	movs	r3, #3
 8007036:	e006      	b.n	8007046 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	691b      	ldr	r3, [r3, #16]
 800703c:	f003 0301 	and.w	r3, r3, #1
 8007040:	2b01      	cmp	r3, #1
 8007042:	d0f0      	beq.n	8007026 <USB_CoreReset+0x36>

  return HAL_OK;
 8007044:	2300      	movs	r3, #0
}
 8007046:	4618      	mov	r0, r3
 8007048:	3714      	adds	r7, #20
 800704a:	46bd      	mov	sp, r7
 800704c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007050:	4770      	bx	lr
 8007052:	bf00      	nop
 8007054:	00030d40 	.word	0x00030d40

08007058 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
 8007060:	460b      	mov	r3, r1
 8007062:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8007064:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8007068:	f002 fcc0 	bl	80099ec <USBD_static_malloc>
 800706c:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d109      	bne.n	8007088 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	32b0      	adds	r2, #176	; 0xb0
 800707e:	2100      	movs	r1, #0
 8007080:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8007084:	2302      	movs	r3, #2
 8007086:	e0d4      	b.n	8007232 <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8007088:	f44f 7207 	mov.w	r2, #540	; 0x21c
 800708c:	2100      	movs	r1, #0
 800708e:	68f8      	ldr	r0, [r7, #12]
 8007090:	f002 fd10 	bl	8009ab4 <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	32b0      	adds	r2, #176	; 0xb0
 800709e:	68f9      	ldr	r1, [r7, #12]
 80070a0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	32b0      	adds	r2, #176	; 0xb0
 80070ae:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	7c1b      	ldrb	r3, [r3, #16]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d138      	bne.n	8007132 <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 80070c0:	4b5e      	ldr	r3, [pc, #376]	; (800723c <USBD_CDC_Init+0x1e4>)
 80070c2:	7819      	ldrb	r1, [r3, #0]
 80070c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070c8:	2202      	movs	r2, #2
 80070ca:	6878      	ldr	r0, [r7, #4]
 80070cc:	f002 fb6b 	bl	80097a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 80070d0:	4b5a      	ldr	r3, [pc, #360]	; (800723c <USBD_CDC_Init+0x1e4>)
 80070d2:	781b      	ldrb	r3, [r3, #0]
 80070d4:	f003 020f 	and.w	r2, r3, #15
 80070d8:	6879      	ldr	r1, [r7, #4]
 80070da:	4613      	mov	r3, r2
 80070dc:	009b      	lsls	r3, r3, #2
 80070de:	4413      	add	r3, r2
 80070e0:	009b      	lsls	r3, r3, #2
 80070e2:	440b      	add	r3, r1
 80070e4:	3324      	adds	r3, #36	; 0x24
 80070e6:	2201      	movs	r2, #1
 80070e8:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 80070ea:	4b55      	ldr	r3, [pc, #340]	; (8007240 <USBD_CDC_Init+0x1e8>)
 80070ec:	7819      	ldrb	r1, [r3, #0]
 80070ee:	f44f 7300 	mov.w	r3, #512	; 0x200
 80070f2:	2202      	movs	r2, #2
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f002 fb56 	bl	80097a6 <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 80070fa:	4b51      	ldr	r3, [pc, #324]	; (8007240 <USBD_CDC_Init+0x1e8>)
 80070fc:	781b      	ldrb	r3, [r3, #0]
 80070fe:	f003 020f 	and.w	r2, r3, #15
 8007102:	6879      	ldr	r1, [r7, #4]
 8007104:	4613      	mov	r3, r2
 8007106:	009b      	lsls	r3, r3, #2
 8007108:	4413      	add	r3, r2
 800710a:	009b      	lsls	r3, r3, #2
 800710c:	440b      	add	r3, r1
 800710e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007112:	2201      	movs	r2, #1
 8007114:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8007116:	4b4b      	ldr	r3, [pc, #300]	; (8007244 <USBD_CDC_Init+0x1ec>)
 8007118:	781b      	ldrb	r3, [r3, #0]
 800711a:	f003 020f 	and.w	r2, r3, #15
 800711e:	6879      	ldr	r1, [r7, #4]
 8007120:	4613      	mov	r3, r2
 8007122:	009b      	lsls	r3, r3, #2
 8007124:	4413      	add	r3, r2
 8007126:	009b      	lsls	r3, r3, #2
 8007128:	440b      	add	r3, r1
 800712a:	3326      	adds	r3, #38	; 0x26
 800712c:	2210      	movs	r2, #16
 800712e:	801a      	strh	r2, [r3, #0]
 8007130:	e035      	b.n	800719e <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8007132:	4b42      	ldr	r3, [pc, #264]	; (800723c <USBD_CDC_Init+0x1e4>)
 8007134:	7819      	ldrb	r1, [r3, #0]
 8007136:	2340      	movs	r3, #64	; 0x40
 8007138:	2202      	movs	r2, #2
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f002 fb33 	bl	80097a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8007140:	4b3e      	ldr	r3, [pc, #248]	; (800723c <USBD_CDC_Init+0x1e4>)
 8007142:	781b      	ldrb	r3, [r3, #0]
 8007144:	f003 020f 	and.w	r2, r3, #15
 8007148:	6879      	ldr	r1, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	440b      	add	r3, r1
 8007154:	3324      	adds	r3, #36	; 0x24
 8007156:	2201      	movs	r2, #1
 8007158:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 800715a:	4b39      	ldr	r3, [pc, #228]	; (8007240 <USBD_CDC_Init+0x1e8>)
 800715c:	7819      	ldrb	r1, [r3, #0]
 800715e:	2340      	movs	r3, #64	; 0x40
 8007160:	2202      	movs	r2, #2
 8007162:	6878      	ldr	r0, [r7, #4]
 8007164:	f002 fb1f 	bl	80097a6 <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8007168:	4b35      	ldr	r3, [pc, #212]	; (8007240 <USBD_CDC_Init+0x1e8>)
 800716a:	781b      	ldrb	r3, [r3, #0]
 800716c:	f003 020f 	and.w	r2, r3, #15
 8007170:	6879      	ldr	r1, [r7, #4]
 8007172:	4613      	mov	r3, r2
 8007174:	009b      	lsls	r3, r3, #2
 8007176:	4413      	add	r3, r2
 8007178:	009b      	lsls	r3, r3, #2
 800717a:	440b      	add	r3, r1
 800717c:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8007180:	2201      	movs	r2, #1
 8007182:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8007184:	4b2f      	ldr	r3, [pc, #188]	; (8007244 <USBD_CDC_Init+0x1ec>)
 8007186:	781b      	ldrb	r3, [r3, #0]
 8007188:	f003 020f 	and.w	r2, r3, #15
 800718c:	6879      	ldr	r1, [r7, #4]
 800718e:	4613      	mov	r3, r2
 8007190:	009b      	lsls	r3, r3, #2
 8007192:	4413      	add	r3, r2
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	440b      	add	r3, r1
 8007198:	3326      	adds	r3, #38	; 0x26
 800719a:	2210      	movs	r2, #16
 800719c:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800719e:	4b29      	ldr	r3, [pc, #164]	; (8007244 <USBD_CDC_Init+0x1ec>)
 80071a0:	7819      	ldrb	r1, [r3, #0]
 80071a2:	2308      	movs	r3, #8
 80071a4:	2203      	movs	r2, #3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f002 fafd 	bl	80097a6 <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 80071ac:	4b25      	ldr	r3, [pc, #148]	; (8007244 <USBD_CDC_Init+0x1ec>)
 80071ae:	781b      	ldrb	r3, [r3, #0]
 80071b0:	f003 020f 	and.w	r2, r3, #15
 80071b4:	6879      	ldr	r1, [r7, #4]
 80071b6:	4613      	mov	r3, r2
 80071b8:	009b      	lsls	r3, r3, #2
 80071ba:	4413      	add	r3, r2
 80071bc:	009b      	lsls	r3, r3, #2
 80071be:	440b      	add	r3, r1
 80071c0:	3324      	adds	r3, #36	; 0x24
 80071c2:	2201      	movs	r2, #1
 80071c4:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80071d4:	687a      	ldr	r2, [r7, #4]
 80071d6:	33b0      	adds	r3, #176	; 0xb0
 80071d8:	009b      	lsls	r3, r3, #2
 80071da:	4413      	add	r3, r2
 80071dc:	685b      	ldr	r3, [r3, #4]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2200      	movs	r2, #0
 80071e6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d101      	bne.n	8007200 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 80071fc:	2302      	movs	r3, #2
 80071fe:	e018      	b.n	8007232 <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	7c1b      	ldrb	r3, [r3, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d10a      	bne.n	800721e <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8007208:	4b0d      	ldr	r3, [pc, #52]	; (8007240 <USBD_CDC_Init+0x1e8>)
 800720a:	7819      	ldrb	r1, [r3, #0]
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007212:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f002 fbb4 	bl	8009984 <USBD_LL_PrepareReceive>
 800721c:	e008      	b.n	8007230 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 800721e:	4b08      	ldr	r3, [pc, #32]	; (8007240 <USBD_CDC_Init+0x1e8>)
 8007220:	7819      	ldrb	r1, [r3, #0]
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8007228:	2340      	movs	r3, #64	; 0x40
 800722a:	6878      	ldr	r0, [r7, #4]
 800722c:	f002 fbaa 	bl	8009984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8007230:	2300      	movs	r3, #0
}
 8007232:	4618      	mov	r0, r3
 8007234:	3710      	adds	r7, #16
 8007236:	46bd      	mov	sp, r7
 8007238:	bd80      	pop	{r7, pc}
 800723a:	bf00      	nop
 800723c:	20000093 	.word	0x20000093
 8007240:	20000094 	.word	0x20000094
 8007244:	20000095 	.word	0x20000095

08007248 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b082      	sub	sp, #8
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
 8007250:	460b      	mov	r3, r1
 8007252:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8007254:	4b3a      	ldr	r3, [pc, #232]	; (8007340 <USBD_CDC_DeInit+0xf8>)
 8007256:	781b      	ldrb	r3, [r3, #0]
 8007258:	4619      	mov	r1, r3
 800725a:	6878      	ldr	r0, [r7, #4]
 800725c:	f002 fac9 	bl	80097f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8007260:	4b37      	ldr	r3, [pc, #220]	; (8007340 <USBD_CDC_DeInit+0xf8>)
 8007262:	781b      	ldrb	r3, [r3, #0]
 8007264:	f003 020f 	and.w	r2, r3, #15
 8007268:	6879      	ldr	r1, [r7, #4]
 800726a:	4613      	mov	r3, r2
 800726c:	009b      	lsls	r3, r3, #2
 800726e:	4413      	add	r3, r2
 8007270:	009b      	lsls	r3, r3, #2
 8007272:	440b      	add	r3, r1
 8007274:	3324      	adds	r3, #36	; 0x24
 8007276:	2200      	movs	r2, #0
 8007278:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 800727a:	4b32      	ldr	r3, [pc, #200]	; (8007344 <USBD_CDC_DeInit+0xfc>)
 800727c:	781b      	ldrb	r3, [r3, #0]
 800727e:	4619      	mov	r1, r3
 8007280:	6878      	ldr	r0, [r7, #4]
 8007282:	f002 fab6 	bl	80097f2 <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <USBD_CDC_DeInit+0xfc>)
 8007288:	781b      	ldrb	r3, [r3, #0]
 800728a:	f003 020f 	and.w	r2, r3, #15
 800728e:	6879      	ldr	r1, [r7, #4]
 8007290:	4613      	mov	r3, r2
 8007292:	009b      	lsls	r3, r3, #2
 8007294:	4413      	add	r3, r2
 8007296:	009b      	lsls	r3, r3, #2
 8007298:	440b      	add	r3, r1
 800729a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800729e:	2200      	movs	r2, #0
 80072a0:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 80072a2:	4b29      	ldr	r3, [pc, #164]	; (8007348 <USBD_CDC_DeInit+0x100>)
 80072a4:	781b      	ldrb	r3, [r3, #0]
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f002 faa2 	bl	80097f2 <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 80072ae:	4b26      	ldr	r3, [pc, #152]	; (8007348 <USBD_CDC_DeInit+0x100>)
 80072b0:	781b      	ldrb	r3, [r3, #0]
 80072b2:	f003 020f 	and.w	r2, r3, #15
 80072b6:	6879      	ldr	r1, [r7, #4]
 80072b8:	4613      	mov	r3, r2
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	4413      	add	r3, r2
 80072be:	009b      	lsls	r3, r3, #2
 80072c0:	440b      	add	r3, r1
 80072c2:	3324      	adds	r3, #36	; 0x24
 80072c4:	2200      	movs	r2, #0
 80072c6:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 80072c8:	4b1f      	ldr	r3, [pc, #124]	; (8007348 <USBD_CDC_DeInit+0x100>)
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	f003 020f 	and.w	r2, r3, #15
 80072d0:	6879      	ldr	r1, [r7, #4]
 80072d2:	4613      	mov	r3, r2
 80072d4:	009b      	lsls	r3, r3, #2
 80072d6:	4413      	add	r3, r2
 80072d8:	009b      	lsls	r3, r3, #2
 80072da:	440b      	add	r3, r1
 80072dc:	3326      	adds	r3, #38	; 0x26
 80072de:	2200      	movs	r2, #0
 80072e0:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	32b0      	adds	r2, #176	; 0xb0
 80072ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80072f0:	2b00      	cmp	r3, #0
 80072f2:	d01f      	beq.n	8007334 <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80072fa:	687a      	ldr	r2, [r7, #4]
 80072fc:	33b0      	adds	r3, #176	; 0xb0
 80072fe:	009b      	lsls	r3, r3, #2
 8007300:	4413      	add	r3, r2
 8007302:	685b      	ldr	r3, [r3, #4]
 8007304:	685b      	ldr	r3, [r3, #4]
 8007306:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	32b0      	adds	r2, #176	; 0xb0
 8007312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007316:	4618      	mov	r0, r3
 8007318:	f002 fb76 	bl	8009a08 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	32b0      	adds	r2, #176	; 0xb0
 8007326:	2100      	movs	r1, #0
 8007328:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	2200      	movs	r2, #0
 8007330:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8007334:	2300      	movs	r3, #0
}
 8007336:	4618      	mov	r0, r3
 8007338:	3708      	adds	r7, #8
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
 800733e:	bf00      	nop
 8007340:	20000093 	.word	0x20000093
 8007344:	20000094 	.word	0x20000094
 8007348:	20000095 	.word	0x20000095

0800734c <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b086      	sub	sp, #24
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
 8007354:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	32b0      	adds	r2, #176	; 0xb0
 8007360:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007364:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 8007366:	2300      	movs	r3, #0
 8007368:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 800736a:	2300      	movs	r3, #0
 800736c:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 800736e:	2300      	movs	r3, #0
 8007370:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d101      	bne.n	800737c <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8007378:	2303      	movs	r3, #3
 800737a:	e0bf      	b.n	80074fc <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	781b      	ldrb	r3, [r3, #0]
 8007380:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8007384:	2b00      	cmp	r3, #0
 8007386:	d050      	beq.n	800742a <USBD_CDC_Setup+0xde>
 8007388:	2b20      	cmp	r3, #32
 800738a:	f040 80af 	bne.w	80074ec <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 800738e:	683b      	ldr	r3, [r7, #0]
 8007390:	88db      	ldrh	r3, [r3, #6]
 8007392:	2b00      	cmp	r3, #0
 8007394:	d03a      	beq.n	800740c <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 8007396:	683b      	ldr	r3, [r7, #0]
 8007398:	781b      	ldrb	r3, [r3, #0]
 800739a:	b25b      	sxtb	r3, r3
 800739c:	2b00      	cmp	r3, #0
 800739e:	da1b      	bge.n	80073d8 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	33b0      	adds	r3, #176	; 0xb0
 80073aa:	009b      	lsls	r3, r3, #2
 80073ac:	4413      	add	r3, r2
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	689b      	ldr	r3, [r3, #8]
 80073b2:	683a      	ldr	r2, [r7, #0]
 80073b4:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 80073b6:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80073b8:	683a      	ldr	r2, [r7, #0]
 80073ba:	88d2      	ldrh	r2, [r2, #6]
 80073bc:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	88db      	ldrh	r3, [r3, #6]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	bf28      	it	cs
 80073c6:	2307      	movcs	r3, #7
 80073c8:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 80073ca:	693b      	ldr	r3, [r7, #16]
 80073cc:	89fa      	ldrh	r2, [r7, #14]
 80073ce:	4619      	mov	r1, r3
 80073d0:	6878      	ldr	r0, [r7, #4]
 80073d2:	f001 fd89 	bl	8008ee8 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 80073d6:	e090      	b.n	80074fa <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 80073d8:	683b      	ldr	r3, [r7, #0]
 80073da:	785a      	ldrb	r2, [r3, #1]
 80073dc:	693b      	ldr	r3, [r7, #16]
 80073de:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	88db      	ldrh	r3, [r3, #6]
 80073e6:	2b3f      	cmp	r3, #63	; 0x3f
 80073e8:	d803      	bhi.n	80073f2 <USBD_CDC_Setup+0xa6>
 80073ea:	683b      	ldr	r3, [r7, #0]
 80073ec:	88db      	ldrh	r3, [r3, #6]
 80073ee:	b2da      	uxtb	r2, r3
 80073f0:	e000      	b.n	80073f4 <USBD_CDC_Setup+0xa8>
 80073f2:	2240      	movs	r2, #64	; 0x40
 80073f4:	693b      	ldr	r3, [r7, #16]
 80073f6:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80073fa:	6939      	ldr	r1, [r7, #16]
 80073fc:	693b      	ldr	r3, [r7, #16]
 80073fe:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 8007402:	461a      	mov	r2, r3
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f001 fd9b 	bl	8008f40 <USBD_CtlPrepareRx>
      break;
 800740a:	e076      	b.n	80074fa <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007412:	687a      	ldr	r2, [r7, #4]
 8007414:	33b0      	adds	r3, #176	; 0xb0
 8007416:	009b      	lsls	r3, r3, #2
 8007418:	4413      	add	r3, r2
 800741a:	685b      	ldr	r3, [r3, #4]
 800741c:	689b      	ldr	r3, [r3, #8]
 800741e:	683a      	ldr	r2, [r7, #0]
 8007420:	7850      	ldrb	r0, [r2, #1]
 8007422:	2200      	movs	r2, #0
 8007424:	6839      	ldr	r1, [r7, #0]
 8007426:	4798      	blx	r3
      break;
 8007428:	e067      	b.n	80074fa <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800742a:	683b      	ldr	r3, [r7, #0]
 800742c:	785b      	ldrb	r3, [r3, #1]
 800742e:	2b0b      	cmp	r3, #11
 8007430:	d851      	bhi.n	80074d6 <USBD_CDC_Setup+0x18a>
 8007432:	a201      	add	r2, pc, #4	; (adr r2, 8007438 <USBD_CDC_Setup+0xec>)
 8007434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007438:	08007469 	.word	0x08007469
 800743c:	080074e5 	.word	0x080074e5
 8007440:	080074d7 	.word	0x080074d7
 8007444:	080074d7 	.word	0x080074d7
 8007448:	080074d7 	.word	0x080074d7
 800744c:	080074d7 	.word	0x080074d7
 8007450:	080074d7 	.word	0x080074d7
 8007454:	080074d7 	.word	0x080074d7
 8007458:	080074d7 	.word	0x080074d7
 800745c:	080074d7 	.word	0x080074d7
 8007460:	08007493 	.word	0x08007493
 8007464:	080074bd 	.word	0x080074bd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800746e:	b2db      	uxtb	r3, r3
 8007470:	2b03      	cmp	r3, #3
 8007472:	d107      	bne.n	8007484 <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8007474:	f107 030a 	add.w	r3, r7, #10
 8007478:	2202      	movs	r2, #2
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f001 fd33 	bl	8008ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8007482:	e032      	b.n	80074ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8007484:	6839      	ldr	r1, [r7, #0]
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f001 fcbd 	bl	8008e06 <USBD_CtlError>
            ret = USBD_FAIL;
 800748c:	2303      	movs	r3, #3
 800748e:	75fb      	strb	r3, [r7, #23]
          break;
 8007490:	e02b      	b.n	80074ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007498:	b2db      	uxtb	r3, r3
 800749a:	2b03      	cmp	r3, #3
 800749c:	d107      	bne.n	80074ae <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 800749e:	f107 030d 	add.w	r3, r7, #13
 80074a2:	2201      	movs	r2, #1
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f001 fd1e 	bl	8008ee8 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80074ac:	e01d      	b.n	80074ea <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80074ae:	6839      	ldr	r1, [r7, #0]
 80074b0:	6878      	ldr	r0, [r7, #4]
 80074b2:	f001 fca8 	bl	8008e06 <USBD_CtlError>
            ret = USBD_FAIL;
 80074b6:	2303      	movs	r3, #3
 80074b8:	75fb      	strb	r3, [r7, #23]
          break;
 80074ba:	e016      	b.n	80074ea <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	2b03      	cmp	r3, #3
 80074c6:	d00f      	beq.n	80074e8 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 80074c8:	6839      	ldr	r1, [r7, #0]
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f001 fc9b 	bl	8008e06 <USBD_CtlError>
            ret = USBD_FAIL;
 80074d0:	2303      	movs	r3, #3
 80074d2:	75fb      	strb	r3, [r7, #23]
          }
          break;
 80074d4:	e008      	b.n	80074e8 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80074d6:	6839      	ldr	r1, [r7, #0]
 80074d8:	6878      	ldr	r0, [r7, #4]
 80074da:	f001 fc94 	bl	8008e06 <USBD_CtlError>
          ret = USBD_FAIL;
 80074de:	2303      	movs	r3, #3
 80074e0:	75fb      	strb	r3, [r7, #23]
          break;
 80074e2:	e002      	b.n	80074ea <USBD_CDC_Setup+0x19e>
          break;
 80074e4:	bf00      	nop
 80074e6:	e008      	b.n	80074fa <USBD_CDC_Setup+0x1ae>
          break;
 80074e8:	bf00      	nop
      }
      break;
 80074ea:	e006      	b.n	80074fa <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 80074ec:	6839      	ldr	r1, [r7, #0]
 80074ee:	6878      	ldr	r0, [r7, #4]
 80074f0:	f001 fc89 	bl	8008e06 <USBD_CtlError>
      ret = USBD_FAIL;
 80074f4:	2303      	movs	r3, #3
 80074f6:	75fb      	strb	r3, [r7, #23]
      break;
 80074f8:	bf00      	nop
  }

  return (uint8_t)ret;
 80074fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3718      	adds	r7, #24
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b084      	sub	sp, #16
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	460b      	mov	r3, r1
 800750e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007516:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	32b0      	adds	r2, #176	; 0xb0
 8007522:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007526:	2b00      	cmp	r3, #0
 8007528:	d101      	bne.n	800752e <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 800752a:	2303      	movs	r3, #3
 800752c:	e065      	b.n	80075fa <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	32b0      	adds	r2, #176	; 0xb0
 8007538:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800753c:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800753e:	78fb      	ldrb	r3, [r7, #3]
 8007540:	f003 020f 	and.w	r2, r3, #15
 8007544:	6879      	ldr	r1, [r7, #4]
 8007546:	4613      	mov	r3, r2
 8007548:	009b      	lsls	r3, r3, #2
 800754a:	4413      	add	r3, r2
 800754c:	009b      	lsls	r3, r3, #2
 800754e:	440b      	add	r3, r1
 8007550:	3318      	adds	r3, #24
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d02f      	beq.n	80075b8 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8007558:	78fb      	ldrb	r3, [r7, #3]
 800755a:	f003 020f 	and.w	r2, r3, #15
 800755e:	6879      	ldr	r1, [r7, #4]
 8007560:	4613      	mov	r3, r2
 8007562:	009b      	lsls	r3, r3, #2
 8007564:	4413      	add	r3, r2
 8007566:	009b      	lsls	r3, r3, #2
 8007568:	440b      	add	r3, r1
 800756a:	3318      	adds	r3, #24
 800756c:	681a      	ldr	r2, [r3, #0]
 800756e:	78fb      	ldrb	r3, [r7, #3]
 8007570:	f003 010f 	and.w	r1, r3, #15
 8007574:	68f8      	ldr	r0, [r7, #12]
 8007576:	460b      	mov	r3, r1
 8007578:	00db      	lsls	r3, r3, #3
 800757a:	440b      	add	r3, r1
 800757c:	009b      	lsls	r3, r3, #2
 800757e:	4403      	add	r3, r0
 8007580:	3348      	adds	r3, #72	; 0x48
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	fbb2 f1f3 	udiv	r1, r2, r3
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 800758e:	2b00      	cmp	r3, #0
 8007590:	d112      	bne.n	80075b8 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 8007592:	78fb      	ldrb	r3, [r7, #3]
 8007594:	f003 020f 	and.w	r2, r3, #15
 8007598:	6879      	ldr	r1, [r7, #4]
 800759a:	4613      	mov	r3, r2
 800759c:	009b      	lsls	r3, r3, #2
 800759e:	4413      	add	r3, r2
 80075a0:	009b      	lsls	r3, r3, #2
 80075a2:	440b      	add	r3, r1
 80075a4:	3318      	adds	r3, #24
 80075a6:	2200      	movs	r2, #0
 80075a8:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80075aa:	78f9      	ldrb	r1, [r7, #3]
 80075ac:	2300      	movs	r3, #0
 80075ae:	2200      	movs	r2, #0
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f002 f9c6 	bl	8009942 <USBD_LL_Transmit>
 80075b6:	e01f      	b.n	80075f8 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 80075b8:	68bb      	ldr	r3, [r7, #8]
 80075ba:	2200      	movs	r2, #0
 80075bc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075c6:	687a      	ldr	r2, [r7, #4]
 80075c8:	33b0      	adds	r3, #176	; 0xb0
 80075ca:	009b      	lsls	r3, r3, #2
 80075cc:	4413      	add	r3, r2
 80075ce:	685b      	ldr	r3, [r3, #4]
 80075d0:	691b      	ldr	r3, [r3, #16]
 80075d2:	2b00      	cmp	r3, #0
 80075d4:	d010      	beq.n	80075f8 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	33b0      	adds	r3, #176	; 0xb0
 80075e0:	009b      	lsls	r3, r3, #2
 80075e2:	4413      	add	r3, r2
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	691b      	ldr	r3, [r3, #16]
 80075e8:	68ba      	ldr	r2, [r7, #8]
 80075ea:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	f502 7104 	add.w	r1, r2, #528	; 0x210
 80075f4:	78fa      	ldrb	r2, [r7, #3]
 80075f6:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80075f8:	2300      	movs	r3, #0
}
 80075fa:	4618      	mov	r0, r3
 80075fc:	3710      	adds	r7, #16
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	460b      	mov	r3, r1
 800760c:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	32b0      	adds	r2, #176	; 0xb0
 8007618:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800761c:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	32b0      	adds	r2, #176	; 0xb0
 8007628:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d101      	bne.n	8007634 <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 8007630:	2303      	movs	r3, #3
 8007632:	e01a      	b.n	800766a <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8007634:	78fb      	ldrb	r3, [r7, #3]
 8007636:	4619      	mov	r1, r3
 8007638:	6878      	ldr	r0, [r7, #4]
 800763a:	f002 f9c4 	bl	80099c6 <USBD_LL_GetRxDataSize>
 800763e:	4602      	mov	r2, r0
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	33b0      	adds	r3, #176	; 0xb0
 8007650:	009b      	lsls	r3, r3, #2
 8007652:	4413      	add	r3, r2
 8007654:	685b      	ldr	r3, [r3, #4]
 8007656:	68db      	ldr	r3, [r3, #12]
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800765e:	68fa      	ldr	r2, [r7, #12]
 8007660:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 8007664:	4611      	mov	r1, r2
 8007666:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8007668:	2300      	movs	r3, #0
}
 800766a:	4618      	mov	r0, r3
 800766c:	3710      	adds	r7, #16
 800766e:	46bd      	mov	sp, r7
 8007670:	bd80      	pop	{r7, pc}

08007672 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b084      	sub	sp, #16
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	32b0      	adds	r2, #176	; 0xb0
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d101      	bne.n	8007694 <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8007690:	2303      	movs	r3, #3
 8007692:	e025      	b.n	80076e0 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 800769a:	687a      	ldr	r2, [r7, #4]
 800769c:	33b0      	adds	r3, #176	; 0xb0
 800769e:	009b      	lsls	r3, r3, #2
 80076a0:	4413      	add	r3, r2
 80076a2:	685b      	ldr	r3, [r3, #4]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d01a      	beq.n	80076de <USBD_CDC_EP0_RxReady+0x6c>
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 80076ae:	2bff      	cmp	r3, #255	; 0xff
 80076b0:	d015      	beq.n	80076de <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80076b8:	687a      	ldr	r2, [r7, #4]
 80076ba:	33b0      	adds	r3, #176	; 0xb0
 80076bc:	009b      	lsls	r3, r3, #2
 80076be:	4413      	add	r3, r2
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	689b      	ldr	r3, [r3, #8]
 80076c4:	68fa      	ldr	r2, [r7, #12]
 80076c6:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 80076ca:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 80076cc:	68fa      	ldr	r2, [r7, #12]
 80076ce:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 80076d2:	b292      	uxth	r2, r2
 80076d4:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	22ff      	movs	r2, #255	; 0xff
 80076da:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 80076de:	2300      	movs	r3, #0
}
 80076e0:	4618      	mov	r0, r3
 80076e2:	3710      	adds	r7, #16
 80076e4:	46bd      	mov	sp, r7
 80076e6:	bd80      	pop	{r7, pc}

080076e8 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 80076e8:	b580      	push	{r7, lr}
 80076ea:	b086      	sub	sp, #24
 80076ec:	af00      	add	r7, sp, #0
 80076ee:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80076f0:	2182      	movs	r1, #130	; 0x82
 80076f2:	4818      	ldr	r0, [pc, #96]	; (8007754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076f4:	f000 fd4f 	bl	8008196 <USBD_GetEpDesc>
 80076f8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80076fa:	2101      	movs	r1, #1
 80076fc:	4815      	ldr	r0, [pc, #84]	; (8007754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 80076fe:	f000 fd4a 	bl	8008196 <USBD_GetEpDesc>
 8007702:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007704:	2181      	movs	r1, #129	; 0x81
 8007706:	4813      	ldr	r0, [pc, #76]	; (8007754 <USBD_CDC_GetFSCfgDesc+0x6c>)
 8007708:	f000 fd45 	bl	8008196 <USBD_GetEpDesc>
 800770c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	2b00      	cmp	r3, #0
 8007712:	d002      	beq.n	800771a <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 8007714:	697b      	ldr	r3, [r7, #20]
 8007716:	2210      	movs	r2, #16
 8007718:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800771a:	693b      	ldr	r3, [r7, #16]
 800771c:	2b00      	cmp	r3, #0
 800771e:	d006      	beq.n	800772e <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	2200      	movs	r2, #0
 8007724:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007728:	711a      	strb	r2, [r3, #4]
 800772a:	2200      	movs	r2, #0
 800772c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800772e:	68fb      	ldr	r3, [r7, #12]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d006      	beq.n	8007742 <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2200      	movs	r2, #0
 8007738:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800773c:	711a      	strb	r2, [r3, #4]
 800773e:	2200      	movs	r2, #0
 8007740:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	2243      	movs	r2, #67	; 0x43
 8007746:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007748:	4b02      	ldr	r3, [pc, #8]	; (8007754 <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 800774a:	4618      	mov	r0, r3
 800774c:	3718      	adds	r7, #24
 800774e:	46bd      	mov	sp, r7
 8007750:	bd80      	pop	{r7, pc}
 8007752:	bf00      	nop
 8007754:	20000050 	.word	0x20000050

08007758 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b086      	sub	sp, #24
 800775c:	af00      	add	r7, sp, #0
 800775e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8007760:	2182      	movs	r1, #130	; 0x82
 8007762:	4818      	ldr	r0, [pc, #96]	; (80077c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007764:	f000 fd17 	bl	8008196 <USBD_GetEpDesc>
 8007768:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 800776a:	2101      	movs	r1, #1
 800776c:	4815      	ldr	r0, [pc, #84]	; (80077c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 800776e:	f000 fd12 	bl	8008196 <USBD_GetEpDesc>
 8007772:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 8007774:	2181      	movs	r1, #129	; 0x81
 8007776:	4813      	ldr	r0, [pc, #76]	; (80077c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
 8007778:	f000 fd0d 	bl	8008196 <USBD_GetEpDesc>
 800777c:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 800777e:	697b      	ldr	r3, [r7, #20]
 8007780:	2b00      	cmp	r3, #0
 8007782:	d002      	beq.n	800778a <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 8007784:	697b      	ldr	r3, [r7, #20]
 8007786:	2210      	movs	r2, #16
 8007788:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d006      	beq.n	800779e <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8007790:	693b      	ldr	r3, [r7, #16]
 8007792:	2200      	movs	r2, #0
 8007794:	711a      	strb	r2, [r3, #4]
 8007796:	2200      	movs	r2, #0
 8007798:	f042 0202 	orr.w	r2, r2, #2
 800779c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d006      	beq.n	80077b2 <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2200      	movs	r2, #0
 80077a8:	711a      	strb	r2, [r3, #4]
 80077aa:	2200      	movs	r2, #0
 80077ac:	f042 0202 	orr.w	r2, r2, #2
 80077b0:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2243      	movs	r2, #67	; 0x43
 80077b6:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80077b8:	4b02      	ldr	r3, [pc, #8]	; (80077c4 <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 80077ba:	4618      	mov	r0, r3
 80077bc:	3718      	adds	r7, #24
 80077be:	46bd      	mov	sp, r7
 80077c0:	bd80      	pop	{r7, pc}
 80077c2:	bf00      	nop
 80077c4:	20000050 	.word	0x20000050

080077c8 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 80077d0:	2182      	movs	r1, #130	; 0x82
 80077d2:	4818      	ldr	r0, [pc, #96]	; (8007834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077d4:	f000 fcdf 	bl	8008196 <USBD_GetEpDesc>
 80077d8:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80077da:	2101      	movs	r1, #1
 80077dc:	4815      	ldr	r0, [pc, #84]	; (8007834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077de:	f000 fcda 	bl	8008196 <USBD_GetEpDesc>
 80077e2:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80077e4:	2181      	movs	r1, #129	; 0x81
 80077e6:	4813      	ldr	r0, [pc, #76]	; (8007834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 80077e8:	f000 fcd5 	bl	8008196 <USBD_GetEpDesc>
 80077ec:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80077ee:	697b      	ldr	r3, [r7, #20]
 80077f0:	2b00      	cmp	r3, #0
 80077f2:	d002      	beq.n	80077fa <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80077f4:	697b      	ldr	r3, [r7, #20]
 80077f6:	2210      	movs	r2, #16
 80077f8:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d006      	beq.n	800780e <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	2200      	movs	r2, #0
 8007804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007808:	711a      	strb	r2, [r3, #4]
 800780a:	2200      	movs	r2, #0
 800780c:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	2b00      	cmp	r3, #0
 8007812:	d006      	beq.n	8007822 <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	2200      	movs	r2, #0
 8007818:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800781c:	711a      	strb	r2, [r3, #4]
 800781e:	2200      	movs	r2, #0
 8007820:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	2243      	movs	r2, #67	; 0x43
 8007826:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8007828:	4b02      	ldr	r3, [pc, #8]	; (8007834 <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 800782a:	4618      	mov	r0, r3
 800782c:	3718      	adds	r7, #24
 800782e:	46bd      	mov	sp, r7
 8007830:	bd80      	pop	{r7, pc}
 8007832:	bf00      	nop
 8007834:	20000050 	.word	0x20000050

08007838 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8007838:	b480      	push	{r7}
 800783a:	b083      	sub	sp, #12
 800783c:	af00      	add	r7, sp, #0
 800783e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	220a      	movs	r2, #10
 8007844:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 8007846:	4b03      	ldr	r3, [pc, #12]	; (8007854 <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 8007848:	4618      	mov	r0, r3
 800784a:	370c      	adds	r7, #12
 800784c:	46bd      	mov	sp, r7
 800784e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007852:	4770      	bx	lr
 8007854:	2000000c 	.word	0x2000000c

08007858 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
 8007860:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8007862:	683b      	ldr	r3, [r7, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d101      	bne.n	800786c <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8007868:	2303      	movs	r3, #3
 800786a:	e009      	b.n	8007880 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8007872:	687a      	ldr	r2, [r7, #4]
 8007874:	33b0      	adds	r3, #176	; 0xb0
 8007876:	009b      	lsls	r3, r3, #2
 8007878:	4413      	add	r3, r2
 800787a:	683a      	ldr	r2, [r7, #0]
 800787c:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 800787e:	2300      	movs	r3, #0
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr

0800788c <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 800788c:	b480      	push	{r7}
 800788e:	b087      	sub	sp, #28
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	32b0      	adds	r2, #176	; 0xb0
 80078a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078a6:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 80078a8:	697b      	ldr	r3, [r7, #20]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d101      	bne.n	80078b2 <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 80078ae:	2303      	movs	r3, #3
 80078b0:	e008      	b.n	80078c4 <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 80078b2:	697b      	ldr	r3, [r7, #20]
 80078b4:	68ba      	ldr	r2, [r7, #8]
 80078b6:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 80078ba:	697b      	ldr	r3, [r7, #20]
 80078bc:	687a      	ldr	r2, [r7, #4]
 80078be:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 80078c2:	2300      	movs	r3, #0
}
 80078c4:	4618      	mov	r0, r3
 80078c6:	371c      	adds	r7, #28
 80078c8:	46bd      	mov	sp, r7
 80078ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ce:	4770      	bx	lr

080078d0 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	32b0      	adds	r2, #176	; 0xb0
 80078e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80078e8:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	2b00      	cmp	r3, #0
 80078ee:	d101      	bne.n	80078f4 <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 80078f0:	2303      	movs	r3, #3
 80078f2:	e004      	b.n	80078fe <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80078fc:	2300      	movs	r3, #0
}
 80078fe:	4618      	mov	r0, r3
 8007900:	3714      	adds	r7, #20
 8007902:	46bd      	mov	sp, r7
 8007904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007908:	4770      	bx	lr
	...

0800790c <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	32b0      	adds	r2, #176	; 0xb0
 800791e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007922:	60bb      	str	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_BUSY;
 8007924:	2301      	movs	r3, #1
 8007926:	73fb      	strb	r3, [r7, #15]

#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */
  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	32b0      	adds	r2, #176	; 0xb0
 8007932:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d101      	bne.n	800793e <USBD_CDC_TransmitPacket+0x32>
  {
    return (uint8_t)USBD_FAIL;
 800793a:	2303      	movs	r3, #3
 800793c:	e025      	b.n	800798a <USBD_CDC_TransmitPacket+0x7e>
  }

  if (hcdc->TxState == 0U)
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8007944:	2b00      	cmp	r3, #0
 8007946:	d11f      	bne.n	8007988 <USBD_CDC_TransmitPacket+0x7c>
  {
    /* Tx Transfer in progress */
    hcdc->TxState = 1U;
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	2201      	movs	r2, #1
 800794c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    /* Update the packet total length */
    pdev->ep_in[CDCInEpAdd & 0xFU].total_length = hcdc->TxLength;
 8007950:	4b10      	ldr	r3, [pc, #64]	; (8007994 <USBD_CDC_TransmitPacket+0x88>)
 8007952:	781b      	ldrb	r3, [r3, #0]
 8007954:	f003 020f 	and.w	r2, r3, #15
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f8d3 1210 	ldr.w	r1, [r3, #528]	; 0x210
 800795e:	6878      	ldr	r0, [r7, #4]
 8007960:	4613      	mov	r3, r2
 8007962:	009b      	lsls	r3, r3, #2
 8007964:	4413      	add	r3, r2
 8007966:	009b      	lsls	r3, r3, #2
 8007968:	4403      	add	r3, r0
 800796a:	3318      	adds	r3, #24
 800796c:	6019      	str	r1, [r3, #0]

    /* Transmit next packet */
    (void)USBD_LL_Transmit(pdev, CDCInEpAdd, hcdc->TxBuffer, hcdc->TxLength);
 800796e:	4b09      	ldr	r3, [pc, #36]	; (8007994 <USBD_CDC_TransmitPacket+0x88>)
 8007970:	7819      	ldrb	r1, [r3, #0]
 8007972:	68bb      	ldr	r3, [r7, #8]
 8007974:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f001 ffdf 	bl	8009942 <USBD_LL_Transmit>

    ret = USBD_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	73fb      	strb	r3, [r7, #15]
  }

  return (uint8_t)ret;
 8007988:	7bfb      	ldrb	r3, [r7, #15]
}
 800798a:	4618      	mov	r0, r3
 800798c:	3710      	adds	r7, #16
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}
 8007992:	bf00      	nop
 8007994:	20000093 	.word	0x20000093

08007998 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	32b0      	adds	r2, #176	; 0xb0
 80079aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079ae:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	32b0      	adds	r2, #176	; 0xb0
 80079ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d101      	bne.n	80079c6 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80079c2:	2303      	movs	r3, #3
 80079c4:	e018      	b.n	80079f8 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	7c1b      	ldrb	r3, [r3, #16]
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d10a      	bne.n	80079e4 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079ce:	4b0c      	ldr	r3, [pc, #48]	; (8007a00 <USBD_CDC_ReceivePacket+0x68>)
 80079d0:	7819      	ldrb	r1, [r3, #0]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079d8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80079dc:	6878      	ldr	r0, [r7, #4]
 80079de:	f001 ffd1 	bl	8009984 <USBD_LL_PrepareReceive>
 80079e2:	e008      	b.n	80079f6 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80079e4:	4b06      	ldr	r3, [pc, #24]	; (8007a00 <USBD_CDC_ReceivePacket+0x68>)
 80079e6:	7819      	ldrb	r1, [r3, #0]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80079ee:	2340      	movs	r3, #64	; 0x40
 80079f0:	6878      	ldr	r0, [r7, #4]
 80079f2:	f001 ffc7 	bl	8009984 <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 80079f6:	2300      	movs	r3, #0
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000094 	.word	0x20000094

08007a04 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b086      	sub	sp, #24
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e01f      	b.n	8007a5c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	2200      	movs	r2, #0
 8007a20:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2200      	movs	r2, #0
 8007a30:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d003      	beq.n	8007a42 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	68ba      	ldr	r2, [r7, #8]
 8007a3e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	2201      	movs	r2, #1
 8007a46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	79fa      	ldrb	r2, [r7, #7]
 8007a4e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8007a50:	68f8      	ldr	r0, [r7, #12]
 8007a52:	f001 fe41 	bl	80096d8 <USBD_LL_Init>
 8007a56:	4603      	mov	r3, r0
 8007a58:	75fb      	strb	r3, [r7, #23]

  return ret;
 8007a5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	3718      	adds	r7, #24
 8007a60:	46bd      	mov	sp, r7
 8007a62:	bd80      	pop	{r7, pc}

08007a64 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d101      	bne.n	8007a7c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8007a78:	2303      	movs	r3, #3
 8007a7a:	e025      	b.n	8007ac8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	683a      	ldr	r2, [r7, #0]
 8007a80:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	32ae      	adds	r2, #174	; 0xae
 8007a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007a92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	d00f      	beq.n	8007ab8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	32ae      	adds	r2, #174	; 0xae
 8007aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa8:	f107 020e 	add.w	r2, r7, #14
 8007aac:	4610      	mov	r0, r2
 8007aae:	4798      	blx	r3
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8007abe:	1c5a      	adds	r2, r3, #1
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8007ac6:	2300      	movs	r3, #0
}
 8007ac8:	4618      	mov	r0, r3
 8007aca:	3710      	adds	r7, #16
 8007acc:	46bd      	mov	sp, r7
 8007ace:	bd80      	pop	{r7, pc}

08007ad0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b082      	sub	sp, #8
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8007ad8:	6878      	ldr	r0, [r7, #4]
 8007ada:	f001 fe49 	bl	8009770 <USBD_LL_Start>
 8007ade:	4603      	mov	r3, r0
}
 8007ae0:	4618      	mov	r0, r3
 8007ae2:	3708      	adds	r7, #8
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	bd80      	pop	{r7, pc}

08007ae8 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8007af0:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8007af2:	4618      	mov	r0, r3
 8007af4:	370c      	adds	r7, #12
 8007af6:	46bd      	mov	sp, r7
 8007af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007afc:	4770      	bx	lr

08007afe <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007afe:	b580      	push	{r7, lr}
 8007b00:	b084      	sub	sp, #16
 8007b02:	af00      	add	r7, sp, #0
 8007b04:	6078      	str	r0, [r7, #4]
 8007b06:	460b      	mov	r3, r1
 8007b08:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d009      	beq.n	8007b2c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	78fa      	ldrb	r2, [r7, #3]
 8007b22:	4611      	mov	r1, r2
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	4798      	blx	r3
 8007b28:	4603      	mov	r3, r0
 8007b2a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b2e:	4618      	mov	r0, r3
 8007b30:	3710      	adds	r7, #16
 8007b32:	46bd      	mov	sp, r7
 8007b34:	bd80      	pop	{r7, pc}

08007b36 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b084      	sub	sp, #16
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
 8007b3e:	460b      	mov	r3, r1
 8007b40:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8007b42:	2300      	movs	r3, #0
 8007b44:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007b4c:	685b      	ldr	r3, [r3, #4]
 8007b4e:	78fa      	ldrb	r2, [r7, #3]
 8007b50:	4611      	mov	r1, r2
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	4798      	blx	r3
 8007b56:	4603      	mov	r3, r0
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d001      	beq.n	8007b60 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8007b5c:	2303      	movs	r3, #3
 8007b5e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8007b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b62:	4618      	mov	r0, r3
 8007b64:	3710      	adds	r7, #16
 8007b66:	46bd      	mov	sp, r7
 8007b68:	bd80      	pop	{r7, pc}

08007b6a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8007b6a:	b580      	push	{r7, lr}
 8007b6c:	b084      	sub	sp, #16
 8007b6e:	af00      	add	r7, sp, #0
 8007b70:	6078      	str	r0, [r7, #4]
 8007b72:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007b7a:	6839      	ldr	r1, [r7, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f001 f908 	bl	8008d92 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8007b90:	461a      	mov	r2, r3
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007b9e:	f003 031f 	and.w	r3, r3, #31
 8007ba2:	2b02      	cmp	r3, #2
 8007ba4:	d01a      	beq.n	8007bdc <USBD_LL_SetupStage+0x72>
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d822      	bhi.n	8007bf0 <USBD_LL_SetupStage+0x86>
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d002      	beq.n	8007bb4 <USBD_LL_SetupStage+0x4a>
 8007bae:	2b01      	cmp	r3, #1
 8007bb0:	d00a      	beq.n	8007bc8 <USBD_LL_SetupStage+0x5e>
 8007bb2:	e01d      	b.n	8007bf0 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bba:	4619      	mov	r1, r3
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f000 fb5f 	bl	8008280 <USBD_StdDevReq>
 8007bc2:	4603      	mov	r3, r0
 8007bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8007bc6:	e020      	b.n	8007c0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007bce:	4619      	mov	r1, r3
 8007bd0:	6878      	ldr	r0, [r7, #4]
 8007bd2:	f000 fbc7 	bl	8008364 <USBD_StdItfReq>
 8007bd6:	4603      	mov	r3, r0
 8007bd8:	73fb      	strb	r3, [r7, #15]
      break;
 8007bda:	e016      	b.n	8007c0a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8007be2:	4619      	mov	r1, r3
 8007be4:	6878      	ldr	r0, [r7, #4]
 8007be6:	f000 fc29 	bl	800843c <USBD_StdEPReq>
 8007bea:	4603      	mov	r3, r0
 8007bec:	73fb      	strb	r3, [r7, #15]
      break;
 8007bee:	e00c      	b.n	8007c0a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007bf6:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8007bfa:	b2db      	uxtb	r3, r3
 8007bfc:	4619      	mov	r1, r3
 8007bfe:	6878      	ldr	r0, [r7, #4]
 8007c00:	f001 fe16 	bl	8009830 <USBD_LL_StallEP>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]
      break;
 8007c08:	bf00      	nop
  }

  return ret;
 8007c0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	3710      	adds	r7, #16
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	460b      	mov	r3, r1
 8007c1e:	607a      	str	r2, [r7, #4]
 8007c20:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8007c22:	2300      	movs	r3, #0
 8007c24:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8007c26:	7afb      	ldrb	r3, [r7, #11]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d16e      	bne.n	8007d0a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8007c2c:	68fb      	ldr	r3, [r7, #12]
 8007c2e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8007c32:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007c3a:	2b03      	cmp	r3, #3
 8007c3c:	f040 8098 	bne.w	8007d70 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8007c40:	693b      	ldr	r3, [r7, #16]
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	693b      	ldr	r3, [r7, #16]
 8007c46:	68db      	ldr	r3, [r3, #12]
 8007c48:	429a      	cmp	r2, r3
 8007c4a:	d913      	bls.n	8007c74 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8007c4c:	693b      	ldr	r3, [r7, #16]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	68db      	ldr	r3, [r3, #12]
 8007c54:	1ad2      	subs	r2, r2, r3
 8007c56:	693b      	ldr	r3, [r7, #16]
 8007c58:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8007c5a:	693b      	ldr	r3, [r7, #16]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	693b      	ldr	r3, [r7, #16]
 8007c60:	689b      	ldr	r3, [r3, #8]
 8007c62:	4293      	cmp	r3, r2
 8007c64:	bf28      	it	cs
 8007c66:	4613      	movcs	r3, r2
 8007c68:	461a      	mov	r2, r3
 8007c6a:	6879      	ldr	r1, [r7, #4]
 8007c6c:	68f8      	ldr	r0, [r7, #12]
 8007c6e:	f001 f984 	bl	8008f7a <USBD_CtlContinueRx>
 8007c72:	e07d      	b.n	8007d70 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8007c7a:	f003 031f 	and.w	r3, r3, #31
 8007c7e:	2b02      	cmp	r3, #2
 8007c80:	d014      	beq.n	8007cac <USBD_LL_DataOutStage+0x98>
 8007c82:	2b02      	cmp	r3, #2
 8007c84:	d81d      	bhi.n	8007cc2 <USBD_LL_DataOutStage+0xae>
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d002      	beq.n	8007c90 <USBD_LL_DataOutStage+0x7c>
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d003      	beq.n	8007c96 <USBD_LL_DataOutStage+0x82>
 8007c8e:	e018      	b.n	8007cc2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8007c90:	2300      	movs	r3, #0
 8007c92:	75bb      	strb	r3, [r7, #22]
            break;
 8007c94:	e018      	b.n	8007cc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007c9c:	b2db      	uxtb	r3, r3
 8007c9e:	4619      	mov	r1, r3
 8007ca0:	68f8      	ldr	r0, [r7, #12]
 8007ca2:	f000 fa5e 	bl	8008162 <USBD_CoreFindIF>
 8007ca6:	4603      	mov	r3, r0
 8007ca8:	75bb      	strb	r3, [r7, #22]
            break;
 8007caa:	e00d      	b.n	8007cc8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8007cb2:	b2db      	uxtb	r3, r3
 8007cb4:	4619      	mov	r1, r3
 8007cb6:	68f8      	ldr	r0, [r7, #12]
 8007cb8:	f000 fa60 	bl	800817c <USBD_CoreFindEP>
 8007cbc:	4603      	mov	r3, r0
 8007cbe:	75bb      	strb	r3, [r7, #22]
            break;
 8007cc0:	e002      	b.n	8007cc8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8007cc2:	2300      	movs	r3, #0
 8007cc4:	75bb      	strb	r3, [r7, #22]
            break;
 8007cc6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8007cc8:	7dbb      	ldrb	r3, [r7, #22]
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d119      	bne.n	8007d02 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007cce:	68fb      	ldr	r3, [r7, #12]
 8007cd0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007cd4:	b2db      	uxtb	r3, r3
 8007cd6:	2b03      	cmp	r3, #3
 8007cd8:	d113      	bne.n	8007d02 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8007cda:	7dba      	ldrb	r2, [r7, #22]
 8007cdc:	68fb      	ldr	r3, [r7, #12]
 8007cde:	32ae      	adds	r2, #174	; 0xae
 8007ce0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d00b      	beq.n	8007d02 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8007cea:	7dba      	ldrb	r2, [r7, #22]
 8007cec:	68fb      	ldr	r3, [r7, #12]
 8007cee:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8007cf2:	7dba      	ldrb	r2, [r7, #22]
 8007cf4:	68fb      	ldr	r3, [r7, #12]
 8007cf6:	32ae      	adds	r2, #174	; 0xae
 8007cf8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007cfc:	691b      	ldr	r3, [r3, #16]
 8007cfe:	68f8      	ldr	r0, [r7, #12]
 8007d00:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8007d02:	68f8      	ldr	r0, [r7, #12]
 8007d04:	f001 f94a 	bl	8008f9c <USBD_CtlSendStatus>
 8007d08:	e032      	b.n	8007d70 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8007d0a:	7afb      	ldrb	r3, [r7, #11]
 8007d0c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	4619      	mov	r1, r3
 8007d14:	68f8      	ldr	r0, [r7, #12]
 8007d16:	f000 fa31 	bl	800817c <USBD_CoreFindEP>
 8007d1a:	4603      	mov	r3, r0
 8007d1c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007d1e:	7dbb      	ldrb	r3, [r7, #22]
 8007d20:	2bff      	cmp	r3, #255	; 0xff
 8007d22:	d025      	beq.n	8007d70 <USBD_LL_DataOutStage+0x15c>
 8007d24:	7dbb      	ldrb	r3, [r7, #22]
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d122      	bne.n	8007d70 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007d2a:	68fb      	ldr	r3, [r7, #12]
 8007d2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007d30:	b2db      	uxtb	r3, r3
 8007d32:	2b03      	cmp	r3, #3
 8007d34:	d117      	bne.n	8007d66 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8007d36:	7dba      	ldrb	r2, [r7, #22]
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	32ae      	adds	r2, #174	; 0xae
 8007d3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d40:	699b      	ldr	r3, [r3, #24]
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00f      	beq.n	8007d66 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8007d46:	7dba      	ldrb	r2, [r7, #22]
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8007d4e:	7dba      	ldrb	r2, [r7, #22]
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	32ae      	adds	r2, #174	; 0xae
 8007d54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007d58:	699b      	ldr	r3, [r3, #24]
 8007d5a:	7afa      	ldrb	r2, [r7, #11]
 8007d5c:	4611      	mov	r1, r2
 8007d5e:	68f8      	ldr	r0, [r7, #12]
 8007d60:	4798      	blx	r3
 8007d62:	4603      	mov	r3, r0
 8007d64:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8007d66:	7dfb      	ldrb	r3, [r7, #23]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d001      	beq.n	8007d70 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8007d6c:	7dfb      	ldrb	r3, [r7, #23]
 8007d6e:	e000      	b.n	8007d72 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8007d70:	2300      	movs	r3, #0
}
 8007d72:	4618      	mov	r0, r3
 8007d74:	3718      	adds	r7, #24
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8007d7a:	b580      	push	{r7, lr}
 8007d7c:	b086      	sub	sp, #24
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	460b      	mov	r3, r1
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8007d88:	7afb      	ldrb	r3, [r7, #11]
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d16f      	bne.n	8007e6e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	3314      	adds	r3, #20
 8007d92:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8007d9a:	2b02      	cmp	r3, #2
 8007d9c:	d15a      	bne.n	8007e54 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8007d9e:	693b      	ldr	r3, [r7, #16]
 8007da0:	689a      	ldr	r2, [r3, #8]
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	68db      	ldr	r3, [r3, #12]
 8007da6:	429a      	cmp	r2, r3
 8007da8:	d914      	bls.n	8007dd4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	689a      	ldr	r2, [r3, #8]
 8007dae:	693b      	ldr	r3, [r7, #16]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	1ad2      	subs	r2, r2, r3
 8007db4:	693b      	ldr	r3, [r7, #16]
 8007db6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8007db8:	693b      	ldr	r3, [r7, #16]
 8007dba:	689b      	ldr	r3, [r3, #8]
 8007dbc:	461a      	mov	r2, r3
 8007dbe:	6879      	ldr	r1, [r7, #4]
 8007dc0:	68f8      	ldr	r0, [r7, #12]
 8007dc2:	f001 f8ac 	bl	8008f1e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	2200      	movs	r2, #0
 8007dca:	2100      	movs	r1, #0
 8007dcc:	68f8      	ldr	r0, [r7, #12]
 8007dce:	f001 fdd9 	bl	8009984 <USBD_LL_PrepareReceive>
 8007dd2:	e03f      	b.n	8007e54 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8007dd4:	693b      	ldr	r3, [r7, #16]
 8007dd6:	68da      	ldr	r2, [r3, #12]
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d11c      	bne.n	8007e1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8007de0:	693b      	ldr	r3, [r7, #16]
 8007de2:	685a      	ldr	r2, [r3, #4]
 8007de4:	693b      	ldr	r3, [r7, #16]
 8007de6:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8007de8:	429a      	cmp	r2, r3
 8007dea:	d316      	bcc.n	8007e1a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	685a      	ldr	r2, [r3, #4]
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8007df6:	429a      	cmp	r2, r3
 8007df8:	d20f      	bcs.n	8007e1a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8007dfa:	2200      	movs	r2, #0
 8007dfc:	2100      	movs	r1, #0
 8007dfe:	68f8      	ldr	r0, [r7, #12]
 8007e00:	f001 f88d 	bl	8008f1e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	2200      	movs	r2, #0
 8007e08:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	2200      	movs	r2, #0
 8007e10:	2100      	movs	r1, #0
 8007e12:	68f8      	ldr	r0, [r7, #12]
 8007e14:	f001 fdb6 	bl	8009984 <USBD_LL_PrepareReceive>
 8007e18:	e01c      	b.n	8007e54 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e1a:	68fb      	ldr	r3, [r7, #12]
 8007e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	2b03      	cmp	r3, #3
 8007e24:	d10f      	bne.n	8007e46 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e2c:	68db      	ldr	r3, [r3, #12]
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	2200      	movs	r2, #0
 8007e36:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007e40:	68db      	ldr	r3, [r3, #12]
 8007e42:	68f8      	ldr	r0, [r7, #12]
 8007e44:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8007e46:	2180      	movs	r1, #128	; 0x80
 8007e48:	68f8      	ldr	r0, [r7, #12]
 8007e4a:	f001 fcf1 	bl	8009830 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8007e4e:	68f8      	ldr	r0, [r7, #12]
 8007e50:	f001 f8b7 	bl	8008fc2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8007e54:	68fb      	ldr	r3, [r7, #12]
 8007e56:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d03a      	beq.n	8007ed4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8007e5e:	68f8      	ldr	r0, [r7, #12]
 8007e60:	f7ff fe42 	bl	8007ae8 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	2200      	movs	r2, #0
 8007e68:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8007e6c:	e032      	b.n	8007ed4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8007e6e:	7afb      	ldrb	r3, [r7, #11]
 8007e70:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8007e74:	b2db      	uxtb	r3, r3
 8007e76:	4619      	mov	r1, r3
 8007e78:	68f8      	ldr	r0, [r7, #12]
 8007e7a:	f000 f97f 	bl	800817c <USBD_CoreFindEP>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8007e82:	7dfb      	ldrb	r3, [r7, #23]
 8007e84:	2bff      	cmp	r3, #255	; 0xff
 8007e86:	d025      	beq.n	8007ed4 <USBD_LL_DataInStage+0x15a>
 8007e88:	7dfb      	ldrb	r3, [r7, #23]
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d122      	bne.n	8007ed4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007e94:	b2db      	uxtb	r3, r3
 8007e96:	2b03      	cmp	r3, #3
 8007e98:	d11c      	bne.n	8007ed4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8007e9a:	7dfa      	ldrb	r2, [r7, #23]
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	32ae      	adds	r2, #174	; 0xae
 8007ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ea4:	695b      	ldr	r3, [r3, #20]
 8007ea6:	2b00      	cmp	r3, #0
 8007ea8:	d014      	beq.n	8007ed4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8007eaa:	7dfa      	ldrb	r2, [r7, #23]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8007eb2:	7dfa      	ldrb	r2, [r7, #23]
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	32ae      	adds	r2, #174	; 0xae
 8007eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007ebc:	695b      	ldr	r3, [r3, #20]
 8007ebe:	7afa      	ldrb	r2, [r7, #11]
 8007ec0:	4611      	mov	r1, r2
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	4798      	blx	r3
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8007eca:	7dbb      	ldrb	r3, [r7, #22]
 8007ecc:	2b00      	cmp	r3, #0
 8007ece:	d001      	beq.n	8007ed4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8007ed0:	7dbb      	ldrb	r3, [r7, #22]
 8007ed2:	e000      	b.n	8007ed6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8007ed4:	2300      	movs	r3, #0
}
 8007ed6:	4618      	mov	r0, r3
 8007ed8:	3718      	adds	r7, #24
 8007eda:	46bd      	mov	sp, r7
 8007edc:	bd80      	pop	{r7, pc}

08007ede <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8007ede:	b580      	push	{r7, lr}
 8007ee0:	b084      	sub	sp, #16
 8007ee2:	af00      	add	r7, sp, #0
 8007ee4:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2201      	movs	r2, #1
 8007eee:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	2200      	movs	r2, #0
 8007efe:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	2200      	movs	r2, #0
 8007f0c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d014      	beq.n	8007f44 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f20:	685b      	ldr	r3, [r3, #4]
 8007f22:	2b00      	cmp	r3, #0
 8007f24:	d00e      	beq.n	8007f44 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007f2c:	685b      	ldr	r3, [r3, #4]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	6852      	ldr	r2, [r2, #4]
 8007f32:	b2d2      	uxtb	r2, r2
 8007f34:	4611      	mov	r1, r2
 8007f36:	6878      	ldr	r0, [r7, #4]
 8007f38:	4798      	blx	r3
 8007f3a:	4603      	mov	r3, r0
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d001      	beq.n	8007f44 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8007f40:	2303      	movs	r3, #3
 8007f42:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f44:	2340      	movs	r3, #64	; 0x40
 8007f46:	2200      	movs	r2, #0
 8007f48:	2100      	movs	r1, #0
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f001 fc2b 	bl	80097a6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2201      	movs	r2, #1
 8007f54:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	2240      	movs	r2, #64	; 0x40
 8007f5c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8007f60:	2340      	movs	r3, #64	; 0x40
 8007f62:	2200      	movs	r2, #0
 8007f64:	2180      	movs	r1, #128	; 0x80
 8007f66:	6878      	ldr	r0, [r7, #4]
 8007f68:	f001 fc1d 	bl	80097a6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	2201      	movs	r2, #1
 8007f70:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	2240      	movs	r2, #64	; 0x40
 8007f76:	621a      	str	r2, [r3, #32]

  return ret;
 8007f78:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}

08007f82 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8007f82:	b480      	push	{r7}
 8007f84:	b083      	sub	sp, #12
 8007f86:	af00      	add	r7, sp, #0
 8007f88:	6078      	str	r0, [r7, #4]
 8007f8a:	460b      	mov	r3, r1
 8007f8c:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	78fa      	ldrb	r2, [r7, #3]
 8007f92:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8007f94:	2300      	movs	r3, #0
}
 8007f96:	4618      	mov	r0, r3
 8007f98:	370c      	adds	r7, #12
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr

08007fa2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8007fa2:	b480      	push	{r7}
 8007fa4:	b083      	sub	sp, #12
 8007fa6:	af00      	add	r7, sp, #0
 8007fa8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fb0:	b2da      	uxtb	r2, r3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2204      	movs	r2, #4
 8007fbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8007fc0:	2300      	movs	r3, #0
}
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	370c      	adds	r7, #12
 8007fc6:	46bd      	mov	sp, r7
 8007fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fcc:	4770      	bx	lr

08007fce <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8007fce:	b480      	push	{r7}
 8007fd0:	b083      	sub	sp, #12
 8007fd2:	af00      	add	r7, sp, #0
 8007fd4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007fdc:	b2db      	uxtb	r3, r3
 8007fde:	2b04      	cmp	r3, #4
 8007fe0:	d106      	bne.n	8007ff0 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8007fe8:	b2da      	uxtb	r2, r3
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8007ff0:	2300      	movs	r3, #0
}
 8007ff2:	4618      	mov	r0, r3
 8007ff4:	370c      	adds	r7, #12
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffc:	4770      	bx	lr

08007ffe <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8007ffe:	b580      	push	{r7, lr}
 8008000:	b082      	sub	sp, #8
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800800c:	b2db      	uxtb	r3, r3
 800800e:	2b03      	cmp	r3, #3
 8008010:	d110      	bne.n	8008034 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008022:	69db      	ldr	r3, [r3, #28]
 8008024:	2b00      	cmp	r3, #0
 8008026:	d005      	beq.n	8008034 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800802e:	69db      	ldr	r3, [r3, #28]
 8008030:	6878      	ldr	r0, [r7, #4]
 8008032:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8008034:	2300      	movs	r3, #0
}
 8008036:	4618      	mov	r0, r3
 8008038:	3708      	adds	r7, #8
 800803a:	46bd      	mov	sp, r7
 800803c:	bd80      	pop	{r7, pc}

0800803e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800803e:	b580      	push	{r7, lr}
 8008040:	b082      	sub	sp, #8
 8008042:	af00      	add	r7, sp, #0
 8008044:	6078      	str	r0, [r7, #4]
 8008046:	460b      	mov	r3, r1
 8008048:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	32ae      	adds	r2, #174	; 0xae
 8008054:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008058:	2b00      	cmp	r3, #0
 800805a:	d101      	bne.n	8008060 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800805c:	2303      	movs	r3, #3
 800805e:	e01c      	b.n	800809a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008066:	b2db      	uxtb	r3, r3
 8008068:	2b03      	cmp	r3, #3
 800806a:	d115      	bne.n	8008098 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	32ae      	adds	r2, #174	; 0xae
 8008076:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800807a:	6a1b      	ldr	r3, [r3, #32]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d00b      	beq.n	8008098 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	32ae      	adds	r2, #174	; 0xae
 800808a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800808e:	6a1b      	ldr	r3, [r3, #32]
 8008090:	78fa      	ldrb	r2, [r7, #3]
 8008092:	4611      	mov	r1, r2
 8008094:	6878      	ldr	r0, [r7, #4]
 8008096:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8008098:	2300      	movs	r3, #0
}
 800809a:	4618      	mov	r0, r3
 800809c:	3708      	adds	r7, #8
 800809e:	46bd      	mov	sp, r7
 80080a0:	bd80      	pop	{r7, pc}

080080a2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80080a2:	b580      	push	{r7, lr}
 80080a4:	b082      	sub	sp, #8
 80080a6:	af00      	add	r7, sp, #0
 80080a8:	6078      	str	r0, [r7, #4]
 80080aa:	460b      	mov	r3, r1
 80080ac:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	32ae      	adds	r2, #174	; 0xae
 80080b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d101      	bne.n	80080c4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	e01c      	b.n	80080fe <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80080ca:	b2db      	uxtb	r3, r3
 80080cc:	2b03      	cmp	r3, #3
 80080ce:	d115      	bne.n	80080fc <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	32ae      	adds	r2, #174	; 0xae
 80080da:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d00b      	beq.n	80080fc <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	32ae      	adds	r2, #174	; 0xae
 80080ee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80080f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080f4:	78fa      	ldrb	r2, [r7, #3]
 80080f6:	4611      	mov	r1, r2
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80080fc:	2300      	movs	r3, #0
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3708      	adds	r7, #8
 8008102:	46bd      	mov	sp, r7
 8008104:	bd80      	pop	{r7, pc}

08008106 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8008106:	b480      	push	{r7}
 8008108:	b083      	sub	sp, #12
 800810a:	af00      	add	r7, sp, #0
 800810c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800810e:	2300      	movs	r3, #0
}
 8008110:	4618      	mov	r0, r3
 8008112:	370c      	adds	r7, #12
 8008114:	46bd      	mov	sp, r7
 8008116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800811a:	4770      	bx	lr

0800811c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800811c:	b580      	push	{r7, lr}
 800811e:	b084      	sub	sp, #16
 8008120:	af00      	add	r7, sp, #0
 8008122:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8008124:	2300      	movs	r3, #0
 8008126:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	2201      	movs	r2, #1
 800812c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008136:	2b00      	cmp	r3, #0
 8008138:	d00e      	beq.n	8008158 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008140:	685b      	ldr	r3, [r3, #4]
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	6852      	ldr	r2, [r2, #4]
 8008146:	b2d2      	uxtb	r2, r2
 8008148:	4611      	mov	r1, r2
 800814a:	6878      	ldr	r0, [r7, #4]
 800814c:	4798      	blx	r3
 800814e:	4603      	mov	r3, r0
 8008150:	2b00      	cmp	r3, #0
 8008152:	d001      	beq.n	8008158 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8008154:	2303      	movs	r3, #3
 8008156:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8008158:	7bfb      	ldrb	r3, [r7, #15]
}
 800815a:	4618      	mov	r0, r3
 800815c:	3710      	adds	r7, #16
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8008162:	b480      	push	{r7}
 8008164:	b083      	sub	sp, #12
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
 800816a:	460b      	mov	r3, r1
 800816c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800816e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8008170:	4618      	mov	r0, r3
 8008172:	370c      	adds	r7, #12
 8008174:	46bd      	mov	sp, r7
 8008176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817a:	4770      	bx	lr

0800817c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800817c:	b480      	push	{r7}
 800817e:	b083      	sub	sp, #12
 8008180:	af00      	add	r7, sp, #0
 8008182:	6078      	str	r0, [r7, #4]
 8008184:	460b      	mov	r3, r1
 8008186:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8008188:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800818a:	4618      	mov	r0, r3
 800818c:	370c      	adds	r7, #12
 800818e:	46bd      	mov	sp, r7
 8008190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008194:	4770      	bx	lr

08008196 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8008196:	b580      	push	{r7, lr}
 8008198:	b086      	sub	sp, #24
 800819a:	af00      	add	r7, sp, #0
 800819c:	6078      	str	r0, [r7, #4]
 800819e:	460b      	mov	r3, r1
 80081a0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80081aa:	2300      	movs	r3, #0
 80081ac:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	885b      	ldrh	r3, [r3, #2]
 80081b2:	b29a      	uxth	r2, r3
 80081b4:	68fb      	ldr	r3, [r7, #12]
 80081b6:	781b      	ldrb	r3, [r3, #0]
 80081b8:	b29b      	uxth	r3, r3
 80081ba:	429a      	cmp	r2, r3
 80081bc:	d920      	bls.n	8008200 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	781b      	ldrb	r3, [r3, #0]
 80081c2:	b29b      	uxth	r3, r3
 80081c4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80081c6:	e013      	b.n	80081f0 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80081c8:	f107 030a 	add.w	r3, r7, #10
 80081cc:	4619      	mov	r1, r3
 80081ce:	6978      	ldr	r0, [r7, #20]
 80081d0:	f000 f81b 	bl	800820a <USBD_GetNextDesc>
 80081d4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	785b      	ldrb	r3, [r3, #1]
 80081da:	2b05      	cmp	r3, #5
 80081dc:	d108      	bne.n	80081f0 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80081de:	697b      	ldr	r3, [r7, #20]
 80081e0:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	789b      	ldrb	r3, [r3, #2]
 80081e6:	78fa      	ldrb	r2, [r7, #3]
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d008      	beq.n	80081fe <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 80081ec:	2300      	movs	r3, #0
 80081ee:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	885b      	ldrh	r3, [r3, #2]
 80081f4:	b29a      	uxth	r2, r3
 80081f6:	897b      	ldrh	r3, [r7, #10]
 80081f8:	429a      	cmp	r2, r3
 80081fa:	d8e5      	bhi.n	80081c8 <USBD_GetEpDesc+0x32>
 80081fc:	e000      	b.n	8008200 <USBD_GetEpDesc+0x6a>
          break;
 80081fe:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8008200:	693b      	ldr	r3, [r7, #16]
}
 8008202:	4618      	mov	r0, r3
 8008204:	3718      	adds	r7, #24
 8008206:	46bd      	mov	sp, r7
 8008208:	bd80      	pop	{r7, pc}

0800820a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800820a:	b480      	push	{r7}
 800820c:	b085      	sub	sp, #20
 800820e:	af00      	add	r7, sp, #0
 8008210:	6078      	str	r0, [r7, #4]
 8008212:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	881a      	ldrh	r2, [r3, #0]
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	781b      	ldrb	r3, [r3, #0]
 8008220:	b29b      	uxth	r3, r3
 8008222:	4413      	add	r3, r2
 8008224:	b29a      	uxth	r2, r3
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	781b      	ldrb	r3, [r3, #0]
 800822e:	461a      	mov	r2, r3
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	4413      	add	r3, r2
 8008234:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8008236:	68fb      	ldr	r3, [r7, #12]
}
 8008238:	4618      	mov	r0, r3
 800823a:	3714      	adds	r7, #20
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8008244:	b480      	push	{r7}
 8008246:	b087      	sub	sp, #28
 8008248:	af00      	add	r7, sp, #0
 800824a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8008250:	697b      	ldr	r3, [r7, #20]
 8008252:	781b      	ldrb	r3, [r3, #0]
 8008254:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8008256:	697b      	ldr	r3, [r7, #20]
 8008258:	3301      	adds	r3, #1
 800825a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	781b      	ldrb	r3, [r3, #0]
 8008260:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8008262:	8a3b      	ldrh	r3, [r7, #16]
 8008264:	021b      	lsls	r3, r3, #8
 8008266:	b21a      	sxth	r2, r3
 8008268:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800826c:	4313      	orrs	r3, r2
 800826e:	b21b      	sxth	r3, r3
 8008270:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8008272:	89fb      	ldrh	r3, [r7, #14]
}
 8008274:	4618      	mov	r0, r3
 8008276:	371c      	adds	r7, #28
 8008278:	46bd      	mov	sp, r7
 800827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827e:	4770      	bx	lr

08008280 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
 8008288:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800828a:	2300      	movs	r3, #0
 800828c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800828e:	683b      	ldr	r3, [r7, #0]
 8008290:	781b      	ldrb	r3, [r3, #0]
 8008292:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008296:	2b40      	cmp	r3, #64	; 0x40
 8008298:	d005      	beq.n	80082a6 <USBD_StdDevReq+0x26>
 800829a:	2b40      	cmp	r3, #64	; 0x40
 800829c:	d857      	bhi.n	800834e <USBD_StdDevReq+0xce>
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d00f      	beq.n	80082c2 <USBD_StdDevReq+0x42>
 80082a2:	2b20      	cmp	r3, #32
 80082a4:	d153      	bne.n	800834e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	32ae      	adds	r2, #174	; 0xae
 80082b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	6839      	ldr	r1, [r7, #0]
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	4798      	blx	r3
 80082bc:	4603      	mov	r3, r0
 80082be:	73fb      	strb	r3, [r7, #15]
      break;
 80082c0:	e04a      	b.n	8008358 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80082c2:	683b      	ldr	r3, [r7, #0]
 80082c4:	785b      	ldrb	r3, [r3, #1]
 80082c6:	2b09      	cmp	r3, #9
 80082c8:	d83b      	bhi.n	8008342 <USBD_StdDevReq+0xc2>
 80082ca:	a201      	add	r2, pc, #4	; (adr r2, 80082d0 <USBD_StdDevReq+0x50>)
 80082cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80082d0:	08008325 	.word	0x08008325
 80082d4:	08008339 	.word	0x08008339
 80082d8:	08008343 	.word	0x08008343
 80082dc:	0800832f 	.word	0x0800832f
 80082e0:	08008343 	.word	0x08008343
 80082e4:	08008303 	.word	0x08008303
 80082e8:	080082f9 	.word	0x080082f9
 80082ec:	08008343 	.word	0x08008343
 80082f0:	0800831b 	.word	0x0800831b
 80082f4:	0800830d 	.word	0x0800830d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80082f8:	6839      	ldr	r1, [r7, #0]
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f000 fa3c 	bl	8008778 <USBD_GetDescriptor>
          break;
 8008300:	e024      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8008302:	6839      	ldr	r1, [r7, #0]
 8008304:	6878      	ldr	r0, [r7, #4]
 8008306:	f000 fba1 	bl	8008a4c <USBD_SetAddress>
          break;
 800830a:	e01f      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800830c:	6839      	ldr	r1, [r7, #0]
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 fbe0 	bl	8008ad4 <USBD_SetConfig>
 8008314:	4603      	mov	r3, r0
 8008316:	73fb      	strb	r3, [r7, #15]
          break;
 8008318:	e018      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800831a:	6839      	ldr	r1, [r7, #0]
 800831c:	6878      	ldr	r0, [r7, #4]
 800831e:	f000 fc83 	bl	8008c28 <USBD_GetConfig>
          break;
 8008322:	e013      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8008324:	6839      	ldr	r1, [r7, #0]
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fcb4 	bl	8008c94 <USBD_GetStatus>
          break;
 800832c:	e00e      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800832e:	6839      	ldr	r1, [r7, #0]
 8008330:	6878      	ldr	r0, [r7, #4]
 8008332:	f000 fce3 	bl	8008cfc <USBD_SetFeature>
          break;
 8008336:	e009      	b.n	800834c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8008338:	6839      	ldr	r1, [r7, #0]
 800833a:	6878      	ldr	r0, [r7, #4]
 800833c:	f000 fd07 	bl	8008d4e <USBD_ClrFeature>
          break;
 8008340:	e004      	b.n	800834c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8008342:	6839      	ldr	r1, [r7, #0]
 8008344:	6878      	ldr	r0, [r7, #4]
 8008346:	f000 fd5e 	bl	8008e06 <USBD_CtlError>
          break;
 800834a:	bf00      	nop
      }
      break;
 800834c:	e004      	b.n	8008358 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800834e:	6839      	ldr	r1, [r7, #0]
 8008350:	6878      	ldr	r0, [r7, #4]
 8008352:	f000 fd58 	bl	8008e06 <USBD_CtlError>
      break;
 8008356:	bf00      	nop
  }

  return ret;
 8008358:	7bfb      	ldrb	r3, [r7, #15]
}
 800835a:	4618      	mov	r0, r3
 800835c:	3710      	adds	r7, #16
 800835e:	46bd      	mov	sp, r7
 8008360:	bd80      	pop	{r7, pc}
 8008362:	bf00      	nop

08008364 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008364:	b580      	push	{r7, lr}
 8008366:	b084      	sub	sp, #16
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
 800836c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800836e:	2300      	movs	r3, #0
 8008370:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	781b      	ldrb	r3, [r3, #0]
 8008376:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800837a:	2b40      	cmp	r3, #64	; 0x40
 800837c:	d005      	beq.n	800838a <USBD_StdItfReq+0x26>
 800837e:	2b40      	cmp	r3, #64	; 0x40
 8008380:	d852      	bhi.n	8008428 <USBD_StdItfReq+0xc4>
 8008382:	2b00      	cmp	r3, #0
 8008384:	d001      	beq.n	800838a <USBD_StdItfReq+0x26>
 8008386:	2b20      	cmp	r3, #32
 8008388:	d14e      	bne.n	8008428 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008390:	b2db      	uxtb	r3, r3
 8008392:	3b01      	subs	r3, #1
 8008394:	2b02      	cmp	r3, #2
 8008396:	d840      	bhi.n	800841a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	889b      	ldrh	r3, [r3, #4]
 800839c:	b2db      	uxtb	r3, r3
 800839e:	2b01      	cmp	r3, #1
 80083a0:	d836      	bhi.n	8008410 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80083a2:	683b      	ldr	r3, [r7, #0]
 80083a4:	889b      	ldrh	r3, [r3, #4]
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	4619      	mov	r1, r3
 80083aa:	6878      	ldr	r0, [r7, #4]
 80083ac:	f7ff fed9 	bl	8008162 <USBD_CoreFindIF>
 80083b0:	4603      	mov	r3, r0
 80083b2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80083b4:	7bbb      	ldrb	r3, [r7, #14]
 80083b6:	2bff      	cmp	r3, #255	; 0xff
 80083b8:	d01d      	beq.n	80083f6 <USBD_StdItfReq+0x92>
 80083ba:	7bbb      	ldrb	r3, [r7, #14]
 80083bc:	2b00      	cmp	r3, #0
 80083be:	d11a      	bne.n	80083f6 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80083c0:	7bba      	ldrb	r2, [r7, #14]
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	32ae      	adds	r2, #174	; 0xae
 80083c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d00f      	beq.n	80083f0 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80083d0:	7bba      	ldrb	r2, [r7, #14]
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80083d8:	7bba      	ldrb	r2, [r7, #14]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	32ae      	adds	r2, #174	; 0xae
 80083de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80083e2:	689b      	ldr	r3, [r3, #8]
 80083e4:	6839      	ldr	r1, [r7, #0]
 80083e6:	6878      	ldr	r0, [r7, #4]
 80083e8:	4798      	blx	r3
 80083ea:	4603      	mov	r3, r0
 80083ec:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083ee:	e004      	b.n	80083fa <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 80083f0:	2303      	movs	r3, #3
 80083f2:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 80083f4:	e001      	b.n	80083fa <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 80083f6:	2303      	movs	r3, #3
 80083f8:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80083fa:	683b      	ldr	r3, [r7, #0]
 80083fc:	88db      	ldrh	r3, [r3, #6]
 80083fe:	2b00      	cmp	r3, #0
 8008400:	d110      	bne.n	8008424 <USBD_StdItfReq+0xc0>
 8008402:	7bfb      	ldrb	r3, [r7, #15]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d10d      	bne.n	8008424 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fdc7 	bl	8008f9c <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800840e:	e009      	b.n	8008424 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8008410:	6839      	ldr	r1, [r7, #0]
 8008412:	6878      	ldr	r0, [r7, #4]
 8008414:	f000 fcf7 	bl	8008e06 <USBD_CtlError>
          break;
 8008418:	e004      	b.n	8008424 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800841a:	6839      	ldr	r1, [r7, #0]
 800841c:	6878      	ldr	r0, [r7, #4]
 800841e:	f000 fcf2 	bl	8008e06 <USBD_CtlError>
          break;
 8008422:	e000      	b.n	8008426 <USBD_StdItfReq+0xc2>
          break;
 8008424:	bf00      	nop
      }
      break;
 8008426:	e004      	b.n	8008432 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8008428:	6839      	ldr	r1, [r7, #0]
 800842a:	6878      	ldr	r0, [r7, #4]
 800842c:	f000 fceb 	bl	8008e06 <USBD_CtlError>
      break;
 8008430:	bf00      	nop
  }

  return ret;
 8008432:	7bfb      	ldrb	r3, [r7, #15]
}
 8008434:	4618      	mov	r0, r3
 8008436:	3710      	adds	r7, #16
 8008438:	46bd      	mov	sp, r7
 800843a:	bd80      	pop	{r7, pc}

0800843c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b084      	sub	sp, #16
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
 8008444:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8008446:	2300      	movs	r3, #0
 8008448:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	889b      	ldrh	r3, [r3, #4]
 800844e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8008450:	683b      	ldr	r3, [r7, #0]
 8008452:	781b      	ldrb	r3, [r3, #0]
 8008454:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8008458:	2b40      	cmp	r3, #64	; 0x40
 800845a:	d007      	beq.n	800846c <USBD_StdEPReq+0x30>
 800845c:	2b40      	cmp	r3, #64	; 0x40
 800845e:	f200 817f 	bhi.w	8008760 <USBD_StdEPReq+0x324>
 8008462:	2b00      	cmp	r3, #0
 8008464:	d02a      	beq.n	80084bc <USBD_StdEPReq+0x80>
 8008466:	2b20      	cmp	r3, #32
 8008468:	f040 817a 	bne.w	8008760 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800846c:	7bbb      	ldrb	r3, [r7, #14]
 800846e:	4619      	mov	r1, r3
 8008470:	6878      	ldr	r0, [r7, #4]
 8008472:	f7ff fe83 	bl	800817c <USBD_CoreFindEP>
 8008476:	4603      	mov	r3, r0
 8008478:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800847a:	7b7b      	ldrb	r3, [r7, #13]
 800847c:	2bff      	cmp	r3, #255	; 0xff
 800847e:	f000 8174 	beq.w	800876a <USBD_StdEPReq+0x32e>
 8008482:	7b7b      	ldrb	r3, [r7, #13]
 8008484:	2b00      	cmp	r3, #0
 8008486:	f040 8170 	bne.w	800876a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 800848a:	7b7a      	ldrb	r2, [r7, #13]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8008492:	7b7a      	ldrb	r2, [r7, #13]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	32ae      	adds	r2, #174	; 0xae
 8008498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800849c:	689b      	ldr	r3, [r3, #8]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	f000 8163 	beq.w	800876a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80084a4:	7b7a      	ldrb	r2, [r7, #13]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	32ae      	adds	r2, #174	; 0xae
 80084aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	6839      	ldr	r1, [r7, #0]
 80084b2:	6878      	ldr	r0, [r7, #4]
 80084b4:	4798      	blx	r3
 80084b6:	4603      	mov	r3, r0
 80084b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80084ba:	e156      	b.n	800876a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	785b      	ldrb	r3, [r3, #1]
 80084c0:	2b03      	cmp	r3, #3
 80084c2:	d008      	beq.n	80084d6 <USBD_StdEPReq+0x9a>
 80084c4:	2b03      	cmp	r3, #3
 80084c6:	f300 8145 	bgt.w	8008754 <USBD_StdEPReq+0x318>
 80084ca:	2b00      	cmp	r3, #0
 80084cc:	f000 809b 	beq.w	8008606 <USBD_StdEPReq+0x1ca>
 80084d0:	2b01      	cmp	r3, #1
 80084d2:	d03c      	beq.n	800854e <USBD_StdEPReq+0x112>
 80084d4:	e13e      	b.n	8008754 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80084dc:	b2db      	uxtb	r3, r3
 80084de:	2b02      	cmp	r3, #2
 80084e0:	d002      	beq.n	80084e8 <USBD_StdEPReq+0xac>
 80084e2:	2b03      	cmp	r3, #3
 80084e4:	d016      	beq.n	8008514 <USBD_StdEPReq+0xd8>
 80084e6:	e02c      	b.n	8008542 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80084e8:	7bbb      	ldrb	r3, [r7, #14]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d00d      	beq.n	800850a <USBD_StdEPReq+0xce>
 80084ee:	7bbb      	ldrb	r3, [r7, #14]
 80084f0:	2b80      	cmp	r3, #128	; 0x80
 80084f2:	d00a      	beq.n	800850a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80084f4:	7bbb      	ldrb	r3, [r7, #14]
 80084f6:	4619      	mov	r1, r3
 80084f8:	6878      	ldr	r0, [r7, #4]
 80084fa:	f001 f999 	bl	8009830 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80084fe:	2180      	movs	r1, #128	; 0x80
 8008500:	6878      	ldr	r0, [r7, #4]
 8008502:	f001 f995 	bl	8009830 <USBD_LL_StallEP>
 8008506:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008508:	e020      	b.n	800854c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 800850a:	6839      	ldr	r1, [r7, #0]
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 fc7a 	bl	8008e06 <USBD_CtlError>
              break;
 8008512:	e01b      	b.n	800854c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	885b      	ldrh	r3, [r3, #2]
 8008518:	2b00      	cmp	r3, #0
 800851a:	d10e      	bne.n	800853a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800851c:	7bbb      	ldrb	r3, [r7, #14]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d00b      	beq.n	800853a <USBD_StdEPReq+0xfe>
 8008522:	7bbb      	ldrb	r3, [r7, #14]
 8008524:	2b80      	cmp	r3, #128	; 0x80
 8008526:	d008      	beq.n	800853a <USBD_StdEPReq+0xfe>
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	88db      	ldrh	r3, [r3, #6]
 800852c:	2b00      	cmp	r3, #0
 800852e:	d104      	bne.n	800853a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8008530:	7bbb      	ldrb	r3, [r7, #14]
 8008532:	4619      	mov	r1, r3
 8008534:	6878      	ldr	r0, [r7, #4]
 8008536:	f001 f97b 	bl	8009830 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800853a:	6878      	ldr	r0, [r7, #4]
 800853c:	f000 fd2e 	bl	8008f9c <USBD_CtlSendStatus>

              break;
 8008540:	e004      	b.n	800854c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8008542:	6839      	ldr	r1, [r7, #0]
 8008544:	6878      	ldr	r0, [r7, #4]
 8008546:	f000 fc5e 	bl	8008e06 <USBD_CtlError>
              break;
 800854a:	bf00      	nop
          }
          break;
 800854c:	e107      	b.n	800875e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008554:	b2db      	uxtb	r3, r3
 8008556:	2b02      	cmp	r3, #2
 8008558:	d002      	beq.n	8008560 <USBD_StdEPReq+0x124>
 800855a:	2b03      	cmp	r3, #3
 800855c:	d016      	beq.n	800858c <USBD_StdEPReq+0x150>
 800855e:	e04b      	b.n	80085f8 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008560:	7bbb      	ldrb	r3, [r7, #14]
 8008562:	2b00      	cmp	r3, #0
 8008564:	d00d      	beq.n	8008582 <USBD_StdEPReq+0x146>
 8008566:	7bbb      	ldrb	r3, [r7, #14]
 8008568:	2b80      	cmp	r3, #128	; 0x80
 800856a:	d00a      	beq.n	8008582 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 800856c:	7bbb      	ldrb	r3, [r7, #14]
 800856e:	4619      	mov	r1, r3
 8008570:	6878      	ldr	r0, [r7, #4]
 8008572:	f001 f95d 	bl	8009830 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8008576:	2180      	movs	r1, #128	; 0x80
 8008578:	6878      	ldr	r0, [r7, #4]
 800857a:	f001 f959 	bl	8009830 <USBD_LL_StallEP>
 800857e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8008580:	e040      	b.n	8008604 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8008582:	6839      	ldr	r1, [r7, #0]
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fc3e 	bl	8008e06 <USBD_CtlError>
              break;
 800858a:	e03b      	b.n	8008604 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 800858c:	683b      	ldr	r3, [r7, #0]
 800858e:	885b      	ldrh	r3, [r3, #2]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d136      	bne.n	8008602 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8008594:	7bbb      	ldrb	r3, [r7, #14]
 8008596:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800859a:	2b00      	cmp	r3, #0
 800859c:	d004      	beq.n	80085a8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800859e:	7bbb      	ldrb	r3, [r7, #14]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 f963 	bl	800986e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80085a8:	6878      	ldr	r0, [r7, #4]
 80085aa:	f000 fcf7 	bl	8008f9c <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80085ae:	7bbb      	ldrb	r3, [r7, #14]
 80085b0:	4619      	mov	r1, r3
 80085b2:	6878      	ldr	r0, [r7, #4]
 80085b4:	f7ff fde2 	bl	800817c <USBD_CoreFindEP>
 80085b8:	4603      	mov	r3, r0
 80085ba:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80085bc:	7b7b      	ldrb	r3, [r7, #13]
 80085be:	2bff      	cmp	r3, #255	; 0xff
 80085c0:	d01f      	beq.n	8008602 <USBD_StdEPReq+0x1c6>
 80085c2:	7b7b      	ldrb	r3, [r7, #13]
 80085c4:	2b00      	cmp	r3, #0
 80085c6:	d11c      	bne.n	8008602 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80085c8:	7b7a      	ldrb	r2, [r7, #13]
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80085d0:	7b7a      	ldrb	r2, [r7, #13]
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	32ae      	adds	r2, #174	; 0xae
 80085d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085da:	689b      	ldr	r3, [r3, #8]
 80085dc:	2b00      	cmp	r3, #0
 80085de:	d010      	beq.n	8008602 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80085e0:	7b7a      	ldrb	r2, [r7, #13]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	32ae      	adds	r2, #174	; 0xae
 80085e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085ea:	689b      	ldr	r3, [r3, #8]
 80085ec:	6839      	ldr	r1, [r7, #0]
 80085ee:	6878      	ldr	r0, [r7, #4]
 80085f0:	4798      	blx	r3
 80085f2:	4603      	mov	r3, r0
 80085f4:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80085f6:	e004      	b.n	8008602 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80085f8:	6839      	ldr	r1, [r7, #0]
 80085fa:	6878      	ldr	r0, [r7, #4]
 80085fc:	f000 fc03 	bl	8008e06 <USBD_CtlError>
              break;
 8008600:	e000      	b.n	8008604 <USBD_StdEPReq+0x1c8>
              break;
 8008602:	bf00      	nop
          }
          break;
 8008604:	e0ab      	b.n	800875e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800860c:	b2db      	uxtb	r3, r3
 800860e:	2b02      	cmp	r3, #2
 8008610:	d002      	beq.n	8008618 <USBD_StdEPReq+0x1dc>
 8008612:	2b03      	cmp	r3, #3
 8008614:	d032      	beq.n	800867c <USBD_StdEPReq+0x240>
 8008616:	e097      	b.n	8008748 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8008618:	7bbb      	ldrb	r3, [r7, #14]
 800861a:	2b00      	cmp	r3, #0
 800861c:	d007      	beq.n	800862e <USBD_StdEPReq+0x1f2>
 800861e:	7bbb      	ldrb	r3, [r7, #14]
 8008620:	2b80      	cmp	r3, #128	; 0x80
 8008622:	d004      	beq.n	800862e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8008624:	6839      	ldr	r1, [r7, #0]
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 fbed 	bl	8008e06 <USBD_CtlError>
                break;
 800862c:	e091      	b.n	8008752 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800862e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008632:	2b00      	cmp	r3, #0
 8008634:	da0b      	bge.n	800864e <USBD_StdEPReq+0x212>
 8008636:	7bbb      	ldrb	r3, [r7, #14]
 8008638:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800863c:	4613      	mov	r3, r2
 800863e:	009b      	lsls	r3, r3, #2
 8008640:	4413      	add	r3, r2
 8008642:	009b      	lsls	r3, r3, #2
 8008644:	3310      	adds	r3, #16
 8008646:	687a      	ldr	r2, [r7, #4]
 8008648:	4413      	add	r3, r2
 800864a:	3304      	adds	r3, #4
 800864c:	e00b      	b.n	8008666 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800864e:	7bbb      	ldrb	r3, [r7, #14]
 8008650:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8008654:	4613      	mov	r3, r2
 8008656:	009b      	lsls	r3, r3, #2
 8008658:	4413      	add	r3, r2
 800865a:	009b      	lsls	r3, r3, #2
 800865c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008660:	687a      	ldr	r2, [r7, #4]
 8008662:	4413      	add	r3, r2
 8008664:	3304      	adds	r3, #4
 8008666:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8008668:	68bb      	ldr	r3, [r7, #8]
 800866a:	2200      	movs	r2, #0
 800866c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800866e:	68bb      	ldr	r3, [r7, #8]
 8008670:	2202      	movs	r2, #2
 8008672:	4619      	mov	r1, r3
 8008674:	6878      	ldr	r0, [r7, #4]
 8008676:	f000 fc37 	bl	8008ee8 <USBD_CtlSendData>
              break;
 800867a:	e06a      	b.n	8008752 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 800867c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008680:	2b00      	cmp	r3, #0
 8008682:	da11      	bge.n	80086a8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8008684:	7bbb      	ldrb	r3, [r7, #14]
 8008686:	f003 020f 	and.w	r2, r3, #15
 800868a:	6879      	ldr	r1, [r7, #4]
 800868c:	4613      	mov	r3, r2
 800868e:	009b      	lsls	r3, r3, #2
 8008690:	4413      	add	r3, r2
 8008692:	009b      	lsls	r3, r3, #2
 8008694:	440b      	add	r3, r1
 8008696:	3324      	adds	r3, #36	; 0x24
 8008698:	881b      	ldrh	r3, [r3, #0]
 800869a:	2b00      	cmp	r3, #0
 800869c:	d117      	bne.n	80086ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800869e:	6839      	ldr	r1, [r7, #0]
 80086a0:	6878      	ldr	r0, [r7, #4]
 80086a2:	f000 fbb0 	bl	8008e06 <USBD_CtlError>
                  break;
 80086a6:	e054      	b.n	8008752 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80086a8:	7bbb      	ldrb	r3, [r7, #14]
 80086aa:	f003 020f 	and.w	r2, r3, #15
 80086ae:	6879      	ldr	r1, [r7, #4]
 80086b0:	4613      	mov	r3, r2
 80086b2:	009b      	lsls	r3, r3, #2
 80086b4:	4413      	add	r3, r2
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	440b      	add	r3, r1
 80086ba:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80086be:	881b      	ldrh	r3, [r3, #0]
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d104      	bne.n	80086ce <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80086c4:	6839      	ldr	r1, [r7, #0]
 80086c6:	6878      	ldr	r0, [r7, #4]
 80086c8:	f000 fb9d 	bl	8008e06 <USBD_CtlError>
                  break;
 80086cc:	e041      	b.n	8008752 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086ce:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	da0b      	bge.n	80086ee <USBD_StdEPReq+0x2b2>
 80086d6:	7bbb      	ldrb	r3, [r7, #14]
 80086d8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80086dc:	4613      	mov	r3, r2
 80086de:	009b      	lsls	r3, r3, #2
 80086e0:	4413      	add	r3, r2
 80086e2:	009b      	lsls	r3, r3, #2
 80086e4:	3310      	adds	r3, #16
 80086e6:	687a      	ldr	r2, [r7, #4]
 80086e8:	4413      	add	r3, r2
 80086ea:	3304      	adds	r3, #4
 80086ec:	e00b      	b.n	8008706 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80086ee:	7bbb      	ldrb	r3, [r7, #14]
 80086f0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80086f4:	4613      	mov	r3, r2
 80086f6:	009b      	lsls	r3, r3, #2
 80086f8:	4413      	add	r3, r2
 80086fa:	009b      	lsls	r3, r3, #2
 80086fc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8008700:	687a      	ldr	r2, [r7, #4]
 8008702:	4413      	add	r3, r2
 8008704:	3304      	adds	r3, #4
 8008706:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8008708:	7bbb      	ldrb	r3, [r7, #14]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d002      	beq.n	8008714 <USBD_StdEPReq+0x2d8>
 800870e:	7bbb      	ldrb	r3, [r7, #14]
 8008710:	2b80      	cmp	r3, #128	; 0x80
 8008712:	d103      	bne.n	800871c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	2200      	movs	r2, #0
 8008718:	601a      	str	r2, [r3, #0]
 800871a:	e00e      	b.n	800873a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 800871c:	7bbb      	ldrb	r3, [r7, #14]
 800871e:	4619      	mov	r1, r3
 8008720:	6878      	ldr	r0, [r7, #4]
 8008722:	f001 f8c3 	bl	80098ac <USBD_LL_IsStallEP>
 8008726:	4603      	mov	r3, r0
 8008728:	2b00      	cmp	r3, #0
 800872a:	d003      	beq.n	8008734 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2201      	movs	r2, #1
 8008730:	601a      	str	r2, [r3, #0]
 8008732:	e002      	b.n	800873a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	2200      	movs	r2, #0
 8008738:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800873a:	68bb      	ldr	r3, [r7, #8]
 800873c:	2202      	movs	r2, #2
 800873e:	4619      	mov	r1, r3
 8008740:	6878      	ldr	r0, [r7, #4]
 8008742:	f000 fbd1 	bl	8008ee8 <USBD_CtlSendData>
              break;
 8008746:	e004      	b.n	8008752 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8008748:	6839      	ldr	r1, [r7, #0]
 800874a:	6878      	ldr	r0, [r7, #4]
 800874c:	f000 fb5b 	bl	8008e06 <USBD_CtlError>
              break;
 8008750:	bf00      	nop
          }
          break;
 8008752:	e004      	b.n	800875e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8008754:	6839      	ldr	r1, [r7, #0]
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 fb55 	bl	8008e06 <USBD_CtlError>
          break;
 800875c:	bf00      	nop
      }
      break;
 800875e:	e005      	b.n	800876c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8008760:	6839      	ldr	r1, [r7, #0]
 8008762:	6878      	ldr	r0, [r7, #4]
 8008764:	f000 fb4f 	bl	8008e06 <USBD_CtlError>
      break;
 8008768:	e000      	b.n	800876c <USBD_StdEPReq+0x330>
      break;
 800876a:	bf00      	nop
  }

  return ret;
 800876c:	7bfb      	ldrb	r3, [r7, #15]
}
 800876e:	4618      	mov	r0, r3
 8008770:	3710      	adds	r7, #16
 8008772:	46bd      	mov	sp, r7
 8008774:	bd80      	pop	{r7, pc}
	...

08008778 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008778:	b580      	push	{r7, lr}
 800877a:	b084      	sub	sp, #16
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
 8008780:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8008782:	2300      	movs	r3, #0
 8008784:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8008786:	2300      	movs	r3, #0
 8008788:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800878e:	683b      	ldr	r3, [r7, #0]
 8008790:	885b      	ldrh	r3, [r3, #2]
 8008792:	0a1b      	lsrs	r3, r3, #8
 8008794:	b29b      	uxth	r3, r3
 8008796:	3b01      	subs	r3, #1
 8008798:	2b06      	cmp	r3, #6
 800879a:	f200 8128 	bhi.w	80089ee <USBD_GetDescriptor+0x276>
 800879e:	a201      	add	r2, pc, #4	; (adr r2, 80087a4 <USBD_GetDescriptor+0x2c>)
 80087a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087a4:	080087c1 	.word	0x080087c1
 80087a8:	080087d9 	.word	0x080087d9
 80087ac:	08008819 	.word	0x08008819
 80087b0:	080089ef 	.word	0x080089ef
 80087b4:	080089ef 	.word	0x080089ef
 80087b8:	0800898f 	.word	0x0800898f
 80087bc:	080089bb 	.word	0x080089bb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80087c6:	681b      	ldr	r3, [r3, #0]
 80087c8:	687a      	ldr	r2, [r7, #4]
 80087ca:	7c12      	ldrb	r2, [r2, #16]
 80087cc:	f107 0108 	add.w	r1, r7, #8
 80087d0:	4610      	mov	r0, r2
 80087d2:	4798      	blx	r3
 80087d4:	60f8      	str	r0, [r7, #12]
      break;
 80087d6:	e112      	b.n	80089fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	7c1b      	ldrb	r3, [r3, #16]
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d10d      	bne.n	80087fc <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80087e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e8:	f107 0208 	add.w	r2, r7, #8
 80087ec:	4610      	mov	r0, r2
 80087ee:	4798      	blx	r3
 80087f0:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	3301      	adds	r3, #1
 80087f6:	2202      	movs	r2, #2
 80087f8:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80087fa:	e100      	b.n	80089fe <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8008802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008804:	f107 0208 	add.w	r2, r7, #8
 8008808:	4610      	mov	r0, r2
 800880a:	4798      	blx	r3
 800880c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800880e:	68fb      	ldr	r3, [r7, #12]
 8008810:	3301      	adds	r3, #1
 8008812:	2202      	movs	r2, #2
 8008814:	701a      	strb	r2, [r3, #0]
      break;
 8008816:	e0f2      	b.n	80089fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8008818:	683b      	ldr	r3, [r7, #0]
 800881a:	885b      	ldrh	r3, [r3, #2]
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b05      	cmp	r3, #5
 8008820:	f200 80ac 	bhi.w	800897c <USBD_GetDescriptor+0x204>
 8008824:	a201      	add	r2, pc, #4	; (adr r2, 800882c <USBD_GetDescriptor+0xb4>)
 8008826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800882a:	bf00      	nop
 800882c:	08008845 	.word	0x08008845
 8008830:	08008879 	.word	0x08008879
 8008834:	080088ad 	.word	0x080088ad
 8008838:	080088e1 	.word	0x080088e1
 800883c:	08008915 	.word	0x08008915
 8008840:	08008949 	.word	0x08008949
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800884a:	685b      	ldr	r3, [r3, #4]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d00b      	beq.n	8008868 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	687a      	ldr	r2, [r7, #4]
 800885a:	7c12      	ldrb	r2, [r2, #16]
 800885c:	f107 0108 	add.w	r1, r7, #8
 8008860:	4610      	mov	r0, r2
 8008862:	4798      	blx	r3
 8008864:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008866:	e091      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008868:	6839      	ldr	r1, [r7, #0]
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f000 facb 	bl	8008e06 <USBD_CtlError>
            err++;
 8008870:	7afb      	ldrb	r3, [r7, #11]
 8008872:	3301      	adds	r3, #1
 8008874:	72fb      	strb	r3, [r7, #11]
          break;
 8008876:	e089      	b.n	800898c <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800887e:	689b      	ldr	r3, [r3, #8]
 8008880:	2b00      	cmp	r3, #0
 8008882:	d00b      	beq.n	800889c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800888a:	689b      	ldr	r3, [r3, #8]
 800888c:	687a      	ldr	r2, [r7, #4]
 800888e:	7c12      	ldrb	r2, [r2, #16]
 8008890:	f107 0108 	add.w	r1, r7, #8
 8008894:	4610      	mov	r0, r2
 8008896:	4798      	blx	r3
 8008898:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800889a:	e077      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800889c:	6839      	ldr	r1, [r7, #0]
 800889e:	6878      	ldr	r0, [r7, #4]
 80088a0:	f000 fab1 	bl	8008e06 <USBD_CtlError>
            err++;
 80088a4:	7afb      	ldrb	r3, [r7, #11]
 80088a6:	3301      	adds	r3, #1
 80088a8:	72fb      	strb	r3, [r7, #11]
          break;
 80088aa:	e06f      	b.n	800898c <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088b2:	68db      	ldr	r3, [r3, #12]
 80088b4:	2b00      	cmp	r3, #0
 80088b6:	d00b      	beq.n	80088d0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088be:	68db      	ldr	r3, [r3, #12]
 80088c0:	687a      	ldr	r2, [r7, #4]
 80088c2:	7c12      	ldrb	r2, [r2, #16]
 80088c4:	f107 0108 	add.w	r1, r7, #8
 80088c8:	4610      	mov	r0, r2
 80088ca:	4798      	blx	r3
 80088cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80088ce:	e05d      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80088d0:	6839      	ldr	r1, [r7, #0]
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 fa97 	bl	8008e06 <USBD_CtlError>
            err++;
 80088d8:	7afb      	ldrb	r3, [r7, #11]
 80088da:	3301      	adds	r3, #1
 80088dc:	72fb      	strb	r3, [r7, #11]
          break;
 80088de:	e055      	b.n	800898c <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088e6:	691b      	ldr	r3, [r3, #16]
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d00b      	beq.n	8008904 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80088f2:	691b      	ldr	r3, [r3, #16]
 80088f4:	687a      	ldr	r2, [r7, #4]
 80088f6:	7c12      	ldrb	r2, [r2, #16]
 80088f8:	f107 0108 	add.w	r1, r7, #8
 80088fc:	4610      	mov	r0, r2
 80088fe:	4798      	blx	r3
 8008900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008902:	e043      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008904:	6839      	ldr	r1, [r7, #0]
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f000 fa7d 	bl	8008e06 <USBD_CtlError>
            err++;
 800890c:	7afb      	ldrb	r3, [r7, #11]
 800890e:	3301      	adds	r3, #1
 8008910:	72fb      	strb	r3, [r7, #11]
          break;
 8008912:	e03b      	b.n	800898c <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800891a:	695b      	ldr	r3, [r3, #20]
 800891c:	2b00      	cmp	r3, #0
 800891e:	d00b      	beq.n	8008938 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8008926:	695b      	ldr	r3, [r3, #20]
 8008928:	687a      	ldr	r2, [r7, #4]
 800892a:	7c12      	ldrb	r2, [r2, #16]
 800892c:	f107 0108 	add.w	r1, r7, #8
 8008930:	4610      	mov	r0, r2
 8008932:	4798      	blx	r3
 8008934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8008936:	e029      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8008938:	6839      	ldr	r1, [r7, #0]
 800893a:	6878      	ldr	r0, [r7, #4]
 800893c:	f000 fa63 	bl	8008e06 <USBD_CtlError>
            err++;
 8008940:	7afb      	ldrb	r3, [r7, #11]
 8008942:	3301      	adds	r3, #1
 8008944:	72fb      	strb	r3, [r7, #11]
          break;
 8008946:	e021      	b.n	800898c <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800894e:	699b      	ldr	r3, [r3, #24]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d00b      	beq.n	800896c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800895a:	699b      	ldr	r3, [r3, #24]
 800895c:	687a      	ldr	r2, [r7, #4]
 800895e:	7c12      	ldrb	r2, [r2, #16]
 8008960:	f107 0108 	add.w	r1, r7, #8
 8008964:	4610      	mov	r0, r2
 8008966:	4798      	blx	r3
 8008968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800896a:	e00f      	b.n	800898c <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800896c:	6839      	ldr	r1, [r7, #0]
 800896e:	6878      	ldr	r0, [r7, #4]
 8008970:	f000 fa49 	bl	8008e06 <USBD_CtlError>
            err++;
 8008974:	7afb      	ldrb	r3, [r7, #11]
 8008976:	3301      	adds	r3, #1
 8008978:	72fb      	strb	r3, [r7, #11]
          break;
 800897a:	e007      	b.n	800898c <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800897c:	6839      	ldr	r1, [r7, #0]
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa41 	bl	8008e06 <USBD_CtlError>
          err++;
 8008984:	7afb      	ldrb	r3, [r7, #11]
 8008986:	3301      	adds	r3, #1
 8008988:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800898a:	bf00      	nop
      }
      break;
 800898c:	e037      	b.n	80089fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	7c1b      	ldrb	r3, [r3, #16]
 8008992:	2b00      	cmp	r3, #0
 8008994:	d109      	bne.n	80089aa <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800899c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800899e:	f107 0208 	add.w	r2, r7, #8
 80089a2:	4610      	mov	r0, r2
 80089a4:	4798      	blx	r3
 80089a6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089a8:	e029      	b.n	80089fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089aa:	6839      	ldr	r1, [r7, #0]
 80089ac:	6878      	ldr	r0, [r7, #4]
 80089ae:	f000 fa2a 	bl	8008e06 <USBD_CtlError>
        err++;
 80089b2:	7afb      	ldrb	r3, [r7, #11]
 80089b4:	3301      	adds	r3, #1
 80089b6:	72fb      	strb	r3, [r7, #11]
      break;
 80089b8:	e021      	b.n	80089fe <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	7c1b      	ldrb	r3, [r3, #16]
 80089be:	2b00      	cmp	r3, #0
 80089c0:	d10d      	bne.n	80089de <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80089c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089ca:	f107 0208 	add.w	r2, r7, #8
 80089ce:	4610      	mov	r0, r2
 80089d0:	4798      	blx	r3
 80089d2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80089d4:	68fb      	ldr	r3, [r7, #12]
 80089d6:	3301      	adds	r3, #1
 80089d8:	2207      	movs	r2, #7
 80089da:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80089dc:	e00f      	b.n	80089fe <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80089de:	6839      	ldr	r1, [r7, #0]
 80089e0:	6878      	ldr	r0, [r7, #4]
 80089e2:	f000 fa10 	bl	8008e06 <USBD_CtlError>
        err++;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	3301      	adds	r3, #1
 80089ea:	72fb      	strb	r3, [r7, #11]
      break;
 80089ec:	e007      	b.n	80089fe <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80089ee:	6839      	ldr	r1, [r7, #0]
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 fa08 	bl	8008e06 <USBD_CtlError>
      err++;
 80089f6:	7afb      	ldrb	r3, [r7, #11]
 80089f8:	3301      	adds	r3, #1
 80089fa:	72fb      	strb	r3, [r7, #11]
      break;
 80089fc:	bf00      	nop
  }

  if (err != 0U)
 80089fe:	7afb      	ldrb	r3, [r7, #11]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d11e      	bne.n	8008a42 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8008a04:	683b      	ldr	r3, [r7, #0]
 8008a06:	88db      	ldrh	r3, [r3, #6]
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8008a0c:	893b      	ldrh	r3, [r7, #8]
 8008a0e:	2b00      	cmp	r3, #0
 8008a10:	d00e      	beq.n	8008a30 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8008a12:	683b      	ldr	r3, [r7, #0]
 8008a14:	88da      	ldrh	r2, [r3, #6]
 8008a16:	893b      	ldrh	r3, [r7, #8]
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	bf28      	it	cs
 8008a1c:	4613      	movcs	r3, r2
 8008a1e:	b29b      	uxth	r3, r3
 8008a20:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8008a22:	893b      	ldrh	r3, [r7, #8]
 8008a24:	461a      	mov	r2, r3
 8008a26:	68f9      	ldr	r1, [r7, #12]
 8008a28:	6878      	ldr	r0, [r7, #4]
 8008a2a:	f000 fa5d 	bl	8008ee8 <USBD_CtlSendData>
 8008a2e:	e009      	b.n	8008a44 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8008a30:	6839      	ldr	r1, [r7, #0]
 8008a32:	6878      	ldr	r0, [r7, #4]
 8008a34:	f000 f9e7 	bl	8008e06 <USBD_CtlError>
 8008a38:	e004      	b.n	8008a44 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8008a3a:	6878      	ldr	r0, [r7, #4]
 8008a3c:	f000 faae 	bl	8008f9c <USBD_CtlSendStatus>
 8008a40:	e000      	b.n	8008a44 <USBD_GetDescriptor+0x2cc>
    return;
 8008a42:	bf00      	nop
  }
}
 8008a44:	3710      	adds	r7, #16
 8008a46:	46bd      	mov	sp, r7
 8008a48:	bd80      	pop	{r7, pc}
 8008a4a:	bf00      	nop

08008a4c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008a4c:	b580      	push	{r7, lr}
 8008a4e:	b084      	sub	sp, #16
 8008a50:	af00      	add	r7, sp, #0
 8008a52:	6078      	str	r0, [r7, #4]
 8008a54:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	889b      	ldrh	r3, [r3, #4]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d131      	bne.n	8008ac2 <USBD_SetAddress+0x76>
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	88db      	ldrh	r3, [r3, #6]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d12d      	bne.n	8008ac2 <USBD_SetAddress+0x76>
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	885b      	ldrh	r3, [r3, #2]
 8008a6a:	2b7f      	cmp	r3, #127	; 0x7f
 8008a6c:	d829      	bhi.n	8008ac2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	885b      	ldrh	r3, [r3, #2]
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008a78:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008a80:	b2db      	uxtb	r3, r3
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d104      	bne.n	8008a90 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8008a86:	6839      	ldr	r1, [r7, #0]
 8008a88:	6878      	ldr	r0, [r7, #4]
 8008a8a:	f000 f9bc 	bl	8008e06 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008a8e:	e01d      	b.n	8008acc <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	7bfa      	ldrb	r2, [r7, #15]
 8008a94:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8008a98:	7bfb      	ldrb	r3, [r7, #15]
 8008a9a:	4619      	mov	r1, r3
 8008a9c:	6878      	ldr	r0, [r7, #4]
 8008a9e:	f000 ff31 	bl	8009904 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	f000 fa7a 	bl	8008f9c <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8008aa8:	7bfb      	ldrb	r3, [r7, #15]
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d004      	beq.n	8008ab8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	2202      	movs	r2, #2
 8008ab2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ab6:	e009      	b.n	8008acc <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	2201      	movs	r2, #1
 8008abc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8008ac0:	e004      	b.n	8008acc <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8008ac2:	6839      	ldr	r1, [r7, #0]
 8008ac4:	6878      	ldr	r0, [r7, #4]
 8008ac6:	f000 f99e 	bl	8008e06 <USBD_CtlError>
  }
}
 8008aca:	bf00      	nop
 8008acc:	bf00      	nop
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	6078      	str	r0, [r7, #4]
 8008adc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8008ae2:	683b      	ldr	r3, [r7, #0]
 8008ae4:	885b      	ldrh	r3, [r3, #2]
 8008ae6:	b2da      	uxtb	r2, r3
 8008ae8:	4b4e      	ldr	r3, [pc, #312]	; (8008c24 <USBD_SetConfig+0x150>)
 8008aea:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8008aec:	4b4d      	ldr	r3, [pc, #308]	; (8008c24 <USBD_SetConfig+0x150>)
 8008aee:	781b      	ldrb	r3, [r3, #0]
 8008af0:	2b01      	cmp	r3, #1
 8008af2:	d905      	bls.n	8008b00 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8008af4:	6839      	ldr	r1, [r7, #0]
 8008af6:	6878      	ldr	r0, [r7, #4]
 8008af8:	f000 f985 	bl	8008e06 <USBD_CtlError>
    return USBD_FAIL;
 8008afc:	2303      	movs	r3, #3
 8008afe:	e08c      	b.n	8008c1a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008b06:	b2db      	uxtb	r3, r3
 8008b08:	2b02      	cmp	r3, #2
 8008b0a:	d002      	beq.n	8008b12 <USBD_SetConfig+0x3e>
 8008b0c:	2b03      	cmp	r3, #3
 8008b0e:	d029      	beq.n	8008b64 <USBD_SetConfig+0x90>
 8008b10:	e075      	b.n	8008bfe <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8008b12:	4b44      	ldr	r3, [pc, #272]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b14:	781b      	ldrb	r3, [r3, #0]
 8008b16:	2b00      	cmp	r3, #0
 8008b18:	d020      	beq.n	8008b5c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8008b1a:	4b42      	ldr	r3, [pc, #264]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b1c:	781b      	ldrb	r3, [r3, #0]
 8008b1e:	461a      	mov	r2, r3
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008b24:	4b3f      	ldr	r3, [pc, #252]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b26:	781b      	ldrb	r3, [r3, #0]
 8008b28:	4619      	mov	r1, r3
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f7fe ffe7 	bl	8007afe <USBD_SetClassConfig>
 8008b30:	4603      	mov	r3, r0
 8008b32:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8008b34:	7bfb      	ldrb	r3, [r7, #15]
 8008b36:	2b00      	cmp	r3, #0
 8008b38:	d008      	beq.n	8008b4c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8008b3a:	6839      	ldr	r1, [r7, #0]
 8008b3c:	6878      	ldr	r0, [r7, #4]
 8008b3e:	f000 f962 	bl	8008e06 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2202      	movs	r2, #2
 8008b46:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b4a:	e065      	b.n	8008c18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008b4c:	6878      	ldr	r0, [r7, #4]
 8008b4e:	f000 fa25 	bl	8008f9c <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	2203      	movs	r2, #3
 8008b56:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008b5a:	e05d      	b.n	8008c18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008b5c:	6878      	ldr	r0, [r7, #4]
 8008b5e:	f000 fa1d 	bl	8008f9c <USBD_CtlSendStatus>
      break;
 8008b62:	e059      	b.n	8008c18 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8008b64:	4b2f      	ldr	r3, [pc, #188]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b66:	781b      	ldrb	r3, [r3, #0]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d112      	bne.n	8008b92 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	2202      	movs	r2, #2
 8008b70:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8008b74:	4b2b      	ldr	r3, [pc, #172]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b76:	781b      	ldrb	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008b7e:	4b29      	ldr	r3, [pc, #164]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b80:	781b      	ldrb	r3, [r3, #0]
 8008b82:	4619      	mov	r1, r3
 8008b84:	6878      	ldr	r0, [r7, #4]
 8008b86:	f7fe ffd6 	bl	8007b36 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa06 	bl	8008f9c <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8008b90:	e042      	b.n	8008c18 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8008b92:	4b24      	ldr	r3, [pc, #144]	; (8008c24 <USBD_SetConfig+0x150>)
 8008b94:	781b      	ldrb	r3, [r3, #0]
 8008b96:	461a      	mov	r2, r3
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d02a      	beq.n	8008bf6 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	685b      	ldr	r3, [r3, #4]
 8008ba4:	b2db      	uxtb	r3, r3
 8008ba6:	4619      	mov	r1, r3
 8008ba8:	6878      	ldr	r0, [r7, #4]
 8008baa:	f7fe ffc4 	bl	8007b36 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8008bae:	4b1d      	ldr	r3, [pc, #116]	; (8008c24 <USBD_SetConfig+0x150>)
 8008bb0:	781b      	ldrb	r3, [r3, #0]
 8008bb2:	461a      	mov	r2, r3
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8008bb8:	4b1a      	ldr	r3, [pc, #104]	; (8008c24 <USBD_SetConfig+0x150>)
 8008bba:	781b      	ldrb	r3, [r3, #0]
 8008bbc:	4619      	mov	r1, r3
 8008bbe:	6878      	ldr	r0, [r7, #4]
 8008bc0:	f7fe ff9d 	bl	8007afe <USBD_SetClassConfig>
 8008bc4:	4603      	mov	r3, r0
 8008bc6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8008bc8:	7bfb      	ldrb	r3, [r7, #15]
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d00f      	beq.n	8008bee <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8008bce:	6839      	ldr	r1, [r7, #0]
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f918 	bl	8008e06 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	685b      	ldr	r3, [r3, #4]
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	4619      	mov	r1, r3
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f7fe ffa9 	bl	8007b36 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2202      	movs	r2, #2
 8008be8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8008bec:	e014      	b.n	8008c18 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8008bee:	6878      	ldr	r0, [r7, #4]
 8008bf0:	f000 f9d4 	bl	8008f9c <USBD_CtlSendStatus>
      break;
 8008bf4:	e010      	b.n	8008c18 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8008bf6:	6878      	ldr	r0, [r7, #4]
 8008bf8:	f000 f9d0 	bl	8008f9c <USBD_CtlSendStatus>
      break;
 8008bfc:	e00c      	b.n	8008c18 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8008bfe:	6839      	ldr	r1, [r7, #0]
 8008c00:	6878      	ldr	r0, [r7, #4]
 8008c02:	f000 f900 	bl	8008e06 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8008c06:	4b07      	ldr	r3, [pc, #28]	; (8008c24 <USBD_SetConfig+0x150>)
 8008c08:	781b      	ldrb	r3, [r3, #0]
 8008c0a:	4619      	mov	r1, r3
 8008c0c:	6878      	ldr	r0, [r7, #4]
 8008c0e:	f7fe ff92 	bl	8007b36 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8008c12:	2303      	movs	r3, #3
 8008c14:	73fb      	strb	r3, [r7, #15]
      break;
 8008c16:	bf00      	nop
  }

  return ret;
 8008c18:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	3710      	adds	r7, #16
 8008c1e:	46bd      	mov	sp, r7
 8008c20:	bd80      	pop	{r7, pc}
 8008c22:	bf00      	nop
 8008c24:	200002b4 	.word	0x200002b4

08008c28 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
 8008c2e:	6078      	str	r0, [r7, #4]
 8008c30:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	88db      	ldrh	r3, [r3, #6]
 8008c36:	2b01      	cmp	r3, #1
 8008c38:	d004      	beq.n	8008c44 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8008c3a:	6839      	ldr	r1, [r7, #0]
 8008c3c:	6878      	ldr	r0, [r7, #4]
 8008c3e:	f000 f8e2 	bl	8008e06 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8008c42:	e023      	b.n	8008c8c <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008c4a:	b2db      	uxtb	r3, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	dc02      	bgt.n	8008c56 <USBD_GetConfig+0x2e>
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	dc03      	bgt.n	8008c5c <USBD_GetConfig+0x34>
 8008c54:	e015      	b.n	8008c82 <USBD_GetConfig+0x5a>
 8008c56:	2b03      	cmp	r3, #3
 8008c58:	d00b      	beq.n	8008c72 <USBD_GetConfig+0x4a>
 8008c5a:	e012      	b.n	8008c82 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	2200      	movs	r2, #0
 8008c60:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	3308      	adds	r3, #8
 8008c66:	2201      	movs	r2, #1
 8008c68:	4619      	mov	r1, r3
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f000 f93c 	bl	8008ee8 <USBD_CtlSendData>
        break;
 8008c70:	e00c      	b.n	8008c8c <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8008c72:	687b      	ldr	r3, [r7, #4]
 8008c74:	3304      	adds	r3, #4
 8008c76:	2201      	movs	r2, #1
 8008c78:	4619      	mov	r1, r3
 8008c7a:	6878      	ldr	r0, [r7, #4]
 8008c7c:	f000 f934 	bl	8008ee8 <USBD_CtlSendData>
        break;
 8008c80:	e004      	b.n	8008c8c <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8008c82:	6839      	ldr	r1, [r7, #0]
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f000 f8be 	bl	8008e06 <USBD_CtlError>
        break;
 8008c8a:	bf00      	nop
}
 8008c8c:	bf00      	nop
 8008c8e:	3708      	adds	r7, #8
 8008c90:	46bd      	mov	sp, r7
 8008c92:	bd80      	pop	{r7, pc}

08008c94 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b082      	sub	sp, #8
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008ca4:	b2db      	uxtb	r3, r3
 8008ca6:	3b01      	subs	r3, #1
 8008ca8:	2b02      	cmp	r3, #2
 8008caa:	d81e      	bhi.n	8008cea <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8008cac:	683b      	ldr	r3, [r7, #0]
 8008cae:	88db      	ldrh	r3, [r3, #6]
 8008cb0:	2b02      	cmp	r3, #2
 8008cb2:	d004      	beq.n	8008cbe <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8008cb4:	6839      	ldr	r1, [r7, #0]
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f8a5 	bl	8008e06 <USBD_CtlError>
        break;
 8008cbc:	e01a      	b.n	8008cf4 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2201      	movs	r2, #1
 8008cc2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d005      	beq.n	8008cda <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	68db      	ldr	r3, [r3, #12]
 8008cd2:	f043 0202 	orr.w	r2, r3, #2
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	330c      	adds	r3, #12
 8008cde:	2202      	movs	r2, #2
 8008ce0:	4619      	mov	r1, r3
 8008ce2:	6878      	ldr	r0, [r7, #4]
 8008ce4:	f000 f900 	bl	8008ee8 <USBD_CtlSendData>
      break;
 8008ce8:	e004      	b.n	8008cf4 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8008cea:	6839      	ldr	r1, [r7, #0]
 8008cec:	6878      	ldr	r0, [r7, #4]
 8008cee:	f000 f88a 	bl	8008e06 <USBD_CtlError>
      break;
 8008cf2:	bf00      	nop
  }
}
 8008cf4:	bf00      	nop
 8008cf6:	3708      	adds	r7, #8
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	bd80      	pop	{r7, pc}

08008cfc <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008cfc:	b580      	push	{r7, lr}
 8008cfe:	b082      	sub	sp, #8
 8008d00:	af00      	add	r7, sp, #0
 8008d02:	6078      	str	r0, [r7, #4]
 8008d04:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d06:	683b      	ldr	r3, [r7, #0]
 8008d08:	885b      	ldrh	r3, [r3, #2]
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d107      	bne.n	8008d1e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f940 	bl	8008f9c <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8008d1c:	e013      	b.n	8008d46 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8008d1e:	683b      	ldr	r3, [r7, #0]
 8008d20:	885b      	ldrh	r3, [r3, #2]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d10b      	bne.n	8008d3e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8008d26:	683b      	ldr	r3, [r7, #0]
 8008d28:	889b      	ldrh	r3, [r3, #4]
 8008d2a:	0a1b      	lsrs	r3, r3, #8
 8008d2c:	b29b      	uxth	r3, r3
 8008d2e:	b2da      	uxtb	r2, r3
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8008d36:	6878      	ldr	r0, [r7, #4]
 8008d38:	f000 f930 	bl	8008f9c <USBD_CtlSendStatus>
}
 8008d3c:	e003      	b.n	8008d46 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8008d3e:	6839      	ldr	r1, [r7, #0]
 8008d40:	6878      	ldr	r0, [r7, #4]
 8008d42:	f000 f860 	bl	8008e06 <USBD_CtlError>
}
 8008d46:	bf00      	nop
 8008d48:	3708      	adds	r7, #8
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b082      	sub	sp, #8
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	6078      	str	r0, [r7, #4]
 8008d56:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8008d5e:	b2db      	uxtb	r3, r3
 8008d60:	3b01      	subs	r3, #1
 8008d62:	2b02      	cmp	r3, #2
 8008d64:	d80b      	bhi.n	8008d7e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8008d66:	683b      	ldr	r3, [r7, #0]
 8008d68:	885b      	ldrh	r3, [r3, #2]
 8008d6a:	2b01      	cmp	r3, #1
 8008d6c:	d10c      	bne.n	8008d88 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	2200      	movs	r2, #0
 8008d72:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f910 	bl	8008f9c <USBD_CtlSendStatus>
      }
      break;
 8008d7c:	e004      	b.n	8008d88 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8008d7e:	6839      	ldr	r1, [r7, #0]
 8008d80:	6878      	ldr	r0, [r7, #4]
 8008d82:	f000 f840 	bl	8008e06 <USBD_CtlError>
      break;
 8008d86:	e000      	b.n	8008d8a <USBD_ClrFeature+0x3c>
      break;
 8008d88:	bf00      	nop
  }
}
 8008d8a:	bf00      	nop
 8008d8c:	3708      	adds	r7, #8
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}

08008d92 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8008d92:	b580      	push	{r7, lr}
 8008d94:	b084      	sub	sp, #16
 8008d96:	af00      	add	r7, sp, #0
 8008d98:	6078      	str	r0, [r7, #4]
 8008d9a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	781a      	ldrb	r2, [r3, #0]
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	3301      	adds	r3, #1
 8008dac:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8008dae:	68fb      	ldr	r3, [r7, #12]
 8008db0:	781a      	ldrb	r2, [r3, #0]
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8008db6:	68fb      	ldr	r3, [r7, #12]
 8008db8:	3301      	adds	r3, #1
 8008dba:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8008dbc:	68f8      	ldr	r0, [r7, #12]
 8008dbe:	f7ff fa41 	bl	8008244 <SWAPBYTE>
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	461a      	mov	r2, r3
 8008dc6:	687b      	ldr	r3, [r7, #4]
 8008dc8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3301      	adds	r3, #1
 8008dce:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8008dd6:	68f8      	ldr	r0, [r7, #12]
 8008dd8:	f7ff fa34 	bl	8008244 <SWAPBYTE>
 8008ddc:	4603      	mov	r3, r0
 8008dde:	461a      	mov	r2, r3
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	3301      	adds	r3, #1
 8008de8:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	3301      	adds	r3, #1
 8008dee:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8008df0:	68f8      	ldr	r0, [r7, #12]
 8008df2:	f7ff fa27 	bl	8008244 <SWAPBYTE>
 8008df6:	4603      	mov	r3, r0
 8008df8:	461a      	mov	r2, r3
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	80da      	strh	r2, [r3, #6]
}
 8008dfe:	bf00      	nop
 8008e00:	3710      	adds	r7, #16
 8008e02:	46bd      	mov	sp, r7
 8008e04:	bd80      	pop	{r7, pc}

08008e06 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8008e06:	b580      	push	{r7, lr}
 8008e08:	b082      	sub	sp, #8
 8008e0a:	af00      	add	r7, sp, #0
 8008e0c:	6078      	str	r0, [r7, #4]
 8008e0e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8008e10:	2180      	movs	r1, #128	; 0x80
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f000 fd0c 	bl	8009830 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8008e18:	2100      	movs	r1, #0
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 fd08 	bl	8009830 <USBD_LL_StallEP>
}
 8008e20:	bf00      	nop
 8008e22:	3708      	adds	r7, #8
 8008e24:	46bd      	mov	sp, r7
 8008e26:	bd80      	pop	{r7, pc}

08008e28 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8008e28:	b580      	push	{r7, lr}
 8008e2a:	b086      	sub	sp, #24
 8008e2c:	af00      	add	r7, sp, #0
 8008e2e:	60f8      	str	r0, [r7, #12]
 8008e30:	60b9      	str	r1, [r7, #8]
 8008e32:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8008e34:	2300      	movs	r3, #0
 8008e36:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d036      	beq.n	8008eac <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8008e42:	6938      	ldr	r0, [r7, #16]
 8008e44:	f000 f836 	bl	8008eb4 <USBD_GetLen>
 8008e48:	4603      	mov	r3, r0
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	b29b      	uxth	r3, r3
 8008e4e:	005b      	lsls	r3, r3, #1
 8008e50:	b29a      	uxth	r2, r3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8008e56:	7dfb      	ldrb	r3, [r7, #23]
 8008e58:	68ba      	ldr	r2, [r7, #8]
 8008e5a:	4413      	add	r3, r2
 8008e5c:	687a      	ldr	r2, [r7, #4]
 8008e5e:	7812      	ldrb	r2, [r2, #0]
 8008e60:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e62:	7dfb      	ldrb	r3, [r7, #23]
 8008e64:	3301      	adds	r3, #1
 8008e66:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8008e68:	7dfb      	ldrb	r3, [r7, #23]
 8008e6a:	68ba      	ldr	r2, [r7, #8]
 8008e6c:	4413      	add	r3, r2
 8008e6e:	2203      	movs	r2, #3
 8008e70:	701a      	strb	r2, [r3, #0]
  idx++;
 8008e72:	7dfb      	ldrb	r3, [r7, #23]
 8008e74:	3301      	adds	r3, #1
 8008e76:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8008e78:	e013      	b.n	8008ea2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8008e7a:	7dfb      	ldrb	r3, [r7, #23]
 8008e7c:	68ba      	ldr	r2, [r7, #8]
 8008e7e:	4413      	add	r3, r2
 8008e80:	693a      	ldr	r2, [r7, #16]
 8008e82:	7812      	ldrb	r2, [r2, #0]
 8008e84:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8008e86:	693b      	ldr	r3, [r7, #16]
 8008e88:	3301      	adds	r3, #1
 8008e8a:	613b      	str	r3, [r7, #16]
    idx++;
 8008e8c:	7dfb      	ldrb	r3, [r7, #23]
 8008e8e:	3301      	adds	r3, #1
 8008e90:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8008e92:	7dfb      	ldrb	r3, [r7, #23]
 8008e94:	68ba      	ldr	r2, [r7, #8]
 8008e96:	4413      	add	r3, r2
 8008e98:	2200      	movs	r2, #0
 8008e9a:	701a      	strb	r2, [r3, #0]
    idx++;
 8008e9c:	7dfb      	ldrb	r3, [r7, #23]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8008ea2:	693b      	ldr	r3, [r7, #16]
 8008ea4:	781b      	ldrb	r3, [r3, #0]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d1e7      	bne.n	8008e7a <USBD_GetString+0x52>
 8008eaa:	e000      	b.n	8008eae <USBD_GetString+0x86>
    return;
 8008eac:	bf00      	nop
  }
}
 8008eae:	3718      	adds	r7, #24
 8008eb0:	46bd      	mov	sp, r7
 8008eb2:	bd80      	pop	{r7, pc}

08008eb4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8008eb4:	b480      	push	{r7}
 8008eb6:	b085      	sub	sp, #20
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8008ebc:	2300      	movs	r3, #0
 8008ebe:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8008ec4:	e005      	b.n	8008ed2 <USBD_GetLen+0x1e>
  {
    len++;
 8008ec6:	7bfb      	ldrb	r3, [r7, #15]
 8008ec8:	3301      	adds	r3, #1
 8008eca:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8008ecc:	68bb      	ldr	r3, [r7, #8]
 8008ece:	3301      	adds	r3, #1
 8008ed0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8008ed2:	68bb      	ldr	r3, [r7, #8]
 8008ed4:	781b      	ldrb	r3, [r3, #0]
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d1f5      	bne.n	8008ec6 <USBD_GetLen+0x12>
  }

  return len;
 8008eda:	7bfb      	ldrb	r3, [r7, #15]
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3714      	adds	r7, #20
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b084      	sub	sp, #16
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2202      	movs	r2, #2
 8008ef8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	687a      	ldr	r2, [r7, #4]
 8008f00:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	68ba      	ldr	r2, [r7, #8]
 8008f0c:	2100      	movs	r1, #0
 8008f0e:	68f8      	ldr	r0, [r7, #12]
 8008f10:	f000 fd17 	bl	8009942 <USBD_LL_Transmit>

  return USBD_OK;
 8008f14:	2300      	movs	r3, #0
}
 8008f16:	4618      	mov	r0, r3
 8008f18:	3710      	adds	r7, #16
 8008f1a:	46bd      	mov	sp, r7
 8008f1c:	bd80      	pop	{r7, pc}

08008f1e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8008f1e:	b580      	push	{r7, lr}
 8008f20:	b084      	sub	sp, #16
 8008f22:	af00      	add	r7, sp, #0
 8008f24:	60f8      	str	r0, [r7, #12]
 8008f26:	60b9      	str	r1, [r7, #8]
 8008f28:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	68ba      	ldr	r2, [r7, #8]
 8008f2e:	2100      	movs	r1, #0
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 fd06 	bl	8009942 <USBD_LL_Transmit>

  return USBD_OK;
 8008f36:	2300      	movs	r3, #0
}
 8008f38:	4618      	mov	r0, r3
 8008f3a:	3710      	adds	r7, #16
 8008f3c:	46bd      	mov	sp, r7
 8008f3e:	bd80      	pop	{r7, pc}

08008f40 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8008f40:	b580      	push	{r7, lr}
 8008f42:	b084      	sub	sp, #16
 8008f44:	af00      	add	r7, sp, #0
 8008f46:	60f8      	str	r0, [r7, #12]
 8008f48:	60b9      	str	r1, [r7, #8]
 8008f4a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	2203      	movs	r2, #3
 8008f50:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	687a      	ldr	r2, [r7, #4]
 8008f58:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	687a      	ldr	r2, [r7, #4]
 8008f60:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	68ba      	ldr	r2, [r7, #8]
 8008f68:	2100      	movs	r1, #0
 8008f6a:	68f8      	ldr	r0, [r7, #12]
 8008f6c:	f000 fd0a 	bl	8009984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f70:	2300      	movs	r3, #0
}
 8008f72:	4618      	mov	r0, r3
 8008f74:	3710      	adds	r7, #16
 8008f76:	46bd      	mov	sp, r7
 8008f78:	bd80      	pop	{r7, pc}

08008f7a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8008f7a:	b580      	push	{r7, lr}
 8008f7c:	b084      	sub	sp, #16
 8008f7e:	af00      	add	r7, sp, #0
 8008f80:	60f8      	str	r0, [r7, #12]
 8008f82:	60b9      	str	r1, [r7, #8]
 8008f84:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	68ba      	ldr	r2, [r7, #8]
 8008f8a:	2100      	movs	r1, #0
 8008f8c:	68f8      	ldr	r0, [r7, #12]
 8008f8e:	f000 fcf9 	bl	8009984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008f92:	2300      	movs	r3, #0
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3710      	adds	r7, #16
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b082      	sub	sp, #8
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	2204      	movs	r2, #4
 8008fa8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8008fac:	2300      	movs	r3, #0
 8008fae:	2200      	movs	r2, #0
 8008fb0:	2100      	movs	r1, #0
 8008fb2:	6878      	ldr	r0, [r7, #4]
 8008fb4:	f000 fcc5 	bl	8009942 <USBD_LL_Transmit>

  return USBD_OK;
 8008fb8:	2300      	movs	r3, #0
}
 8008fba:	4618      	mov	r0, r3
 8008fbc:	3708      	adds	r7, #8
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}

08008fc2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8008fc2:	b580      	push	{r7, lr}
 8008fc4:	b082      	sub	sp, #8
 8008fc6:	af00      	add	r7, sp, #0
 8008fc8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	2205      	movs	r2, #5
 8008fce:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	2200      	movs	r2, #0
 8008fd6:	2100      	movs	r1, #0
 8008fd8:	6878      	ldr	r0, [r7, #4]
 8008fda:	f000 fcd3 	bl	8009984 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8008fde:	2300      	movs	r3, #0
}
 8008fe0:	4618      	mov	r0, r3
 8008fe2:	3708      	adds	r7, #8
 8008fe4:	46bd      	mov	sp, r7
 8008fe6:	bd80      	pop	{r7, pc}

08008fe8 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8008fe8:	b580      	push	{r7, lr}
 8008fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8008fec:	2200      	movs	r2, #0
 8008fee:	4912      	ldr	r1, [pc, #72]	; (8009038 <MX_USB_DEVICE_Init+0x50>)
 8008ff0:	4812      	ldr	r0, [pc, #72]	; (800903c <MX_USB_DEVICE_Init+0x54>)
 8008ff2:	f7fe fd07 	bl	8007a04 <USBD_Init>
 8008ff6:	4603      	mov	r3, r0
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d001      	beq.n	8009000 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8008ffc:	f7f7 ffb0 	bl	8000f60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8009000:	490f      	ldr	r1, [pc, #60]	; (8009040 <MX_USB_DEVICE_Init+0x58>)
 8009002:	480e      	ldr	r0, [pc, #56]	; (800903c <MX_USB_DEVICE_Init+0x54>)
 8009004:	f7fe fd2e 	bl	8007a64 <USBD_RegisterClass>
 8009008:	4603      	mov	r3, r0
 800900a:	2b00      	cmp	r3, #0
 800900c:	d001      	beq.n	8009012 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800900e:	f7f7 ffa7 	bl	8000f60 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8009012:	490c      	ldr	r1, [pc, #48]	; (8009044 <MX_USB_DEVICE_Init+0x5c>)
 8009014:	4809      	ldr	r0, [pc, #36]	; (800903c <MX_USB_DEVICE_Init+0x54>)
 8009016:	f7fe fc1f 	bl	8007858 <USBD_CDC_RegisterInterface>
 800901a:	4603      	mov	r3, r0
 800901c:	2b00      	cmp	r3, #0
 800901e:	d001      	beq.n	8009024 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8009020:	f7f7 ff9e 	bl	8000f60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8009024:	4805      	ldr	r0, [pc, #20]	; (800903c <MX_USB_DEVICE_Init+0x54>)
 8009026:	f7fe fd53 	bl	8007ad0 <USBD_Start>
 800902a:	4603      	mov	r3, r0
 800902c:	2b00      	cmp	r3, #0
 800902e:	d001      	beq.n	8009034 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8009030:	f7f7 ff96 	bl	8000f60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8009034:	bf00      	nop
 8009036:	bd80      	pop	{r7, pc}
 8009038:	200000ac 	.word	0x200000ac
 800903c:	200002b8 	.word	0x200002b8
 8009040:	20000018 	.word	0x20000018
 8009044:	20000098 	.word	0x20000098

08009048 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 800904c:	2200      	movs	r2, #0
 800904e:	4905      	ldr	r1, [pc, #20]	; (8009064 <CDC_Init_FS+0x1c>)
 8009050:	4805      	ldr	r0, [pc, #20]	; (8009068 <CDC_Init_FS+0x20>)
 8009052:	f7fe fc1b 	bl	800788c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8009056:	4905      	ldr	r1, [pc, #20]	; (800906c <CDC_Init_FS+0x24>)
 8009058:	4803      	ldr	r0, [pc, #12]	; (8009068 <CDC_Init_FS+0x20>)
 800905a:	f7fe fc39 	bl	80078d0 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 800905e:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8009060:	4618      	mov	r0, r3
 8009062:	bd80      	pop	{r7, pc}
 8009064:	20000d94 	.word	0x20000d94
 8009068:	200002b8 	.word	0x200002b8
 800906c:	20000594 	.word	0x20000594

08009070 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8009070:	b480      	push	{r7}
 8009072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8009074:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8009076:	4618      	mov	r0, r3
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8009080:	b480      	push	{r7}
 8009082:	b085      	sub	sp, #20
 8009084:	af00      	add	r7, sp, #0
 8009086:	4603      	mov	r3, r0
 8009088:	6039      	str	r1, [r7, #0]
 800908a:	71fb      	strb	r3, [r7, #7]
 800908c:	4613      	mov	r3, r2
 800908e:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8009090:	79fb      	ldrb	r3, [r7, #7]
 8009092:	2b23      	cmp	r3, #35	; 0x23
 8009094:	d865      	bhi.n	8009162 <CDC_Control_FS+0xe2>
 8009096:	a201      	add	r2, pc, #4	; (adr r2, 800909c <CDC_Control_FS+0x1c>)
 8009098:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800909c:	08009163 	.word	0x08009163
 80090a0:	08009163 	.word	0x08009163
 80090a4:	08009163 	.word	0x08009163
 80090a8:	08009163 	.word	0x08009163
 80090ac:	08009163 	.word	0x08009163
 80090b0:	08009163 	.word	0x08009163
 80090b4:	08009163 	.word	0x08009163
 80090b8:	08009163 	.word	0x08009163
 80090bc:	08009163 	.word	0x08009163
 80090c0:	08009163 	.word	0x08009163
 80090c4:	08009163 	.word	0x08009163
 80090c8:	08009163 	.word	0x08009163
 80090cc:	08009163 	.word	0x08009163
 80090d0:	08009163 	.word	0x08009163
 80090d4:	08009163 	.word	0x08009163
 80090d8:	08009163 	.word	0x08009163
 80090dc:	08009163 	.word	0x08009163
 80090e0:	08009163 	.word	0x08009163
 80090e4:	08009163 	.word	0x08009163
 80090e8:	08009163 	.word	0x08009163
 80090ec:	08009163 	.word	0x08009163
 80090f0:	08009163 	.word	0x08009163
 80090f4:	08009163 	.word	0x08009163
 80090f8:	08009163 	.word	0x08009163
 80090fc:	08009163 	.word	0x08009163
 8009100:	08009163 	.word	0x08009163
 8009104:	08009163 	.word	0x08009163
 8009108:	08009163 	.word	0x08009163
 800910c:	08009163 	.word	0x08009163
 8009110:	08009163 	.word	0x08009163
 8009114:	08009163 	.word	0x08009163
 8009118:	08009163 	.word	0x08009163
 800911c:	0800912d 	.word	0x0800912d
 8009120:	08009163 	.word	0x08009163
 8009124:	08009163 	.word	0x08009163
 8009128:	08009163 	.word	0x08009163
  /*                                        4 - Space                            */
  /* 6      | bDataBits  |   1   | Number Data bits (5, 6, 7, 8 or 16).          */
  /*******************************************************************************/
    case CDC_SET_LINE_CODING:
    {
        USBD_CDC_LineCodingTypeDef *newLineCoding = (USBD_CDC_LineCodingTypeDef*) pbuf;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	60fb      	str	r3, [r7, #12]

        // 115200 baud rate
        if (newLineCoding->bitrate != 115200) {
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
 8009138:	d001      	beq.n	800913e <CDC_Control_FS+0xbe>
            return (USBD_FAIL);
 800913a:	2303      	movs	r3, #3
 800913c:	e015      	b.n	800916a <CDC_Control_FS+0xea>
        }

        // No parity
        if (newLineCoding->paritytype != 0) {
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	795b      	ldrb	r3, [r3, #5]
 8009142:	2b00      	cmp	r3, #0
 8009144:	d001      	beq.n	800914a <CDC_Control_FS+0xca>
            return (USBD_FAIL);
 8009146:	2303      	movs	r3, #3
 8009148:	e00f      	b.n	800916a <CDC_Control_FS+0xea>
        }

        // 1 stop bit
        if (newLineCoding->format != 0) {
 800914a:	68fb      	ldr	r3, [r7, #12]
 800914c:	791b      	ldrb	r3, [r3, #4]
 800914e:	2b00      	cmp	r3, #0
 8009150:	d001      	beq.n	8009156 <CDC_Control_FS+0xd6>
            return (USBD_FAIL);
 8009152:	2303      	movs	r3, #3
 8009154:	e009      	b.n	800916a <CDC_Control_FS+0xea>
        }

        // Data size: 8 bits
        if (newLineCoding->datatype != 8) {
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	799b      	ldrb	r3, [r3, #6]
 800915a:	2b08      	cmp	r3, #8
 800915c:	d003      	beq.n	8009166 <CDC_Control_FS+0xe6>
            return (USBD_FAIL);
 800915e:	2303      	movs	r3, #3
 8009160:	e003      	b.n	800916a <CDC_Control_FS+0xea>
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8009162:	bf00      	nop
 8009164:	e000      	b.n	8009168 <CDC_Control_FS+0xe8>
    break;
 8009166:	bf00      	nop
  }

  return (USBD_OK);
 8009168:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 800916a:	4618      	mov	r0, r3
 800916c:	3714      	adds	r7, #20
 800916e:	46bd      	mov	sp, r7
 8009170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009174:	4770      	bx	lr
 8009176:	bf00      	nop

08009178 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8009178:	b580      	push	{r7, lr}
 800917a:	b082      	sub	sp, #8
 800917c:	af00      	add	r7, sp, #0
 800917e:	6078      	str	r0, [r7, #4]
 8009180:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8009182:	6879      	ldr	r1, [r7, #4]
 8009184:	4805      	ldr	r0, [pc, #20]	; (800919c <CDC_Receive_FS+0x24>)
 8009186:	f7fe fba3 	bl	80078d0 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800918a:	4804      	ldr	r0, [pc, #16]	; (800919c <CDC_Receive_FS+0x24>)
 800918c:	f7fe fc04 	bl	8007998 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8009190:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8009192:	4618      	mov	r0, r3
 8009194:	3708      	adds	r7, #8
 8009196:	46bd      	mov	sp, r7
 8009198:	bd80      	pop	{r7, pc}
 800919a:	bf00      	nop
 800919c:	200002b8 	.word	0x200002b8

080091a0 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80091a0:	b580      	push	{r7, lr}
 80091a2:	b084      	sub	sp, #16
 80091a4:	af00      	add	r7, sp, #0
 80091a6:	6078      	str	r0, [r7, #4]
 80091a8:	460b      	mov	r3, r1
 80091aa:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80091ac:	2300      	movs	r3, #0
 80091ae:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80091b0:	4b0d      	ldr	r3, [pc, #52]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091b2:	f8d3 32bc 	ldr.w	r3, [r3, #700]	; 0x2bc
 80091b6:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80091b8:	68bb      	ldr	r3, [r7, #8]
 80091ba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d001      	beq.n	80091c6 <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80091c2:	2301      	movs	r3, #1
 80091c4:	e00b      	b.n	80091de <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80091c6:	887b      	ldrh	r3, [r7, #2]
 80091c8:	461a      	mov	r2, r3
 80091ca:	6879      	ldr	r1, [r7, #4]
 80091cc:	4806      	ldr	r0, [pc, #24]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091ce:	f7fe fb5d 	bl	800788c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80091d2:	4805      	ldr	r0, [pc, #20]	; (80091e8 <CDC_Transmit_FS+0x48>)
 80091d4:	f7fe fb9a 	bl	800790c <USBD_CDC_TransmitPacket>
 80091d8:	4603      	mov	r3, r0
 80091da:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80091dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80091de:	4618      	mov	r0, r3
 80091e0:	3710      	adds	r7, #16
 80091e2:	46bd      	mov	sp, r7
 80091e4:	bd80      	pop	{r7, pc}
 80091e6:	bf00      	nop
 80091e8:	200002b8 	.word	0x200002b8

080091ec <CDC_TransmitCplt_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_FS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 80091ec:	b480      	push	{r7}
 80091ee:	b087      	sub	sp, #28
 80091f0:	af00      	add	r7, sp, #0
 80091f2:	60f8      	str	r0, [r7, #12]
 80091f4:	60b9      	str	r1, [r7, #8]
 80091f6:	4613      	mov	r3, r2
 80091f8:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 80091fa:	2300      	movs	r3, #0
 80091fc:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 13 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 13 */
  return result;
 80091fe:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8009202:	4618      	mov	r0, r3
 8009204:	371c      	adds	r7, #28
 8009206:	46bd      	mov	sp, r7
 8009208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800920c:	4770      	bx	lr
	...

08009210 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009210:	b480      	push	{r7}
 8009212:	b083      	sub	sp, #12
 8009214:	af00      	add	r7, sp, #0
 8009216:	4603      	mov	r3, r0
 8009218:	6039      	str	r1, [r7, #0]
 800921a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800921c:	683b      	ldr	r3, [r7, #0]
 800921e:	2212      	movs	r2, #18
 8009220:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8009222:	4b03      	ldr	r3, [pc, #12]	; (8009230 <USBD_FS_DeviceDescriptor+0x20>)
}
 8009224:	4618      	mov	r0, r3
 8009226:	370c      	adds	r7, #12
 8009228:	46bd      	mov	sp, r7
 800922a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922e:	4770      	bx	lr
 8009230:	200000c8 	.word	0x200000c8

08009234 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009234:	b480      	push	{r7}
 8009236:	b083      	sub	sp, #12
 8009238:	af00      	add	r7, sp, #0
 800923a:	4603      	mov	r3, r0
 800923c:	6039      	str	r1, [r7, #0]
 800923e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8009240:	683b      	ldr	r3, [r7, #0]
 8009242:	2204      	movs	r2, #4
 8009244:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8009246:	4b03      	ldr	r3, [pc, #12]	; (8009254 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8009248:	4618      	mov	r0, r3
 800924a:	370c      	adds	r7, #12
 800924c:	46bd      	mov	sp, r7
 800924e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009252:	4770      	bx	lr
 8009254:	200000dc 	.word	0x200000dc

08009258 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009258:	b580      	push	{r7, lr}
 800925a:	b082      	sub	sp, #8
 800925c:	af00      	add	r7, sp, #0
 800925e:	4603      	mov	r3, r0
 8009260:	6039      	str	r1, [r7, #0]
 8009262:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009264:	79fb      	ldrb	r3, [r7, #7]
 8009266:	2b00      	cmp	r3, #0
 8009268:	d105      	bne.n	8009276 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800926a:	683a      	ldr	r2, [r7, #0]
 800926c:	4907      	ldr	r1, [pc, #28]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
 800926e:	4808      	ldr	r0, [pc, #32]	; (8009290 <USBD_FS_ProductStrDescriptor+0x38>)
 8009270:	f7ff fdda 	bl	8008e28 <USBD_GetString>
 8009274:	e004      	b.n	8009280 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8009276:	683a      	ldr	r2, [r7, #0]
 8009278:	4904      	ldr	r1, [pc, #16]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
 800927a:	4805      	ldr	r0, [pc, #20]	; (8009290 <USBD_FS_ProductStrDescriptor+0x38>)
 800927c:	f7ff fdd4 	bl	8008e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009280:	4b02      	ldr	r3, [pc, #8]	; (800928c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8009282:	4618      	mov	r0, r3
 8009284:	3708      	adds	r7, #8
 8009286:	46bd      	mov	sp, r7
 8009288:	bd80      	pop	{r7, pc}
 800928a:	bf00      	nop
 800928c:	20001594 	.word	0x20001594
 8009290:	0800a3e8 	.word	0x0800a3e8

08009294 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	6039      	str	r1, [r7, #0]
 800929e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80092a0:	683a      	ldr	r2, [r7, #0]
 80092a2:	4904      	ldr	r1, [pc, #16]	; (80092b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80092a4:	4804      	ldr	r0, [pc, #16]	; (80092b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80092a6:	f7ff fdbf 	bl	8008e28 <USBD_GetString>
  return USBD_StrDesc;
 80092aa:	4b02      	ldr	r3, [pc, #8]	; (80092b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80092ac:	4618      	mov	r0, r3
 80092ae:	3708      	adds	r7, #8
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bd80      	pop	{r7, pc}
 80092b4:	20001594 	.word	0x20001594
 80092b8:	0800a400 	.word	0x0800a400

080092bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092bc:	b580      	push	{r7, lr}
 80092be:	b082      	sub	sp, #8
 80092c0:	af00      	add	r7, sp, #0
 80092c2:	4603      	mov	r3, r0
 80092c4:	6039      	str	r1, [r7, #0]
 80092c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80092c8:	683b      	ldr	r3, [r7, #0]
 80092ca:	221a      	movs	r2, #26
 80092cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80092ce:	f000 f843 	bl	8009358 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80092d2:	4b02      	ldr	r3, [pc, #8]	; (80092dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80092d4:	4618      	mov	r0, r3
 80092d6:	3708      	adds	r7, #8
 80092d8:	46bd      	mov	sp, r7
 80092da:	bd80      	pop	{r7, pc}
 80092dc:	200000e0 	.word	0x200000e0

080092e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80092e0:	b580      	push	{r7, lr}
 80092e2:	b082      	sub	sp, #8
 80092e4:	af00      	add	r7, sp, #0
 80092e6:	4603      	mov	r3, r0
 80092e8:	6039      	str	r1, [r7, #0]
 80092ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80092ec:	79fb      	ldrb	r3, [r7, #7]
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d105      	bne.n	80092fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092f2:	683a      	ldr	r2, [r7, #0]
 80092f4:	4907      	ldr	r1, [pc, #28]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
 80092f6:	4808      	ldr	r0, [pc, #32]	; (8009318 <USBD_FS_ConfigStrDescriptor+0x38>)
 80092f8:	f7ff fd96 	bl	8008e28 <USBD_GetString>
 80092fc:	e004      	b.n	8009308 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80092fe:	683a      	ldr	r2, [r7, #0]
 8009300:	4904      	ldr	r1, [pc, #16]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
 8009302:	4805      	ldr	r0, [pc, #20]	; (8009318 <USBD_FS_ConfigStrDescriptor+0x38>)
 8009304:	f7ff fd90 	bl	8008e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009308:	4b02      	ldr	r3, [pc, #8]	; (8009314 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800930a:	4618      	mov	r0, r3
 800930c:	3708      	adds	r7, #8
 800930e:	46bd      	mov	sp, r7
 8009310:	bd80      	pop	{r7, pc}
 8009312:	bf00      	nop
 8009314:	20001594 	.word	0x20001594
 8009318:	0800a414 	.word	0x0800a414

0800931c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800931c:	b580      	push	{r7, lr}
 800931e:	b082      	sub	sp, #8
 8009320:	af00      	add	r7, sp, #0
 8009322:	4603      	mov	r3, r0
 8009324:	6039      	str	r1, [r7, #0]
 8009326:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8009328:	79fb      	ldrb	r3, [r7, #7]
 800932a:	2b00      	cmp	r3, #0
 800932c:	d105      	bne.n	800933a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800932e:	683a      	ldr	r2, [r7, #0]
 8009330:	4907      	ldr	r1, [pc, #28]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8009332:	4808      	ldr	r0, [pc, #32]	; (8009354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009334:	f7ff fd78 	bl	8008e28 <USBD_GetString>
 8009338:	e004      	b.n	8009344 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800933a:	683a      	ldr	r2, [r7, #0]
 800933c:	4904      	ldr	r1, [pc, #16]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800933e:	4805      	ldr	r0, [pc, #20]	; (8009354 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8009340:	f7ff fd72 	bl	8008e28 <USBD_GetString>
  }
  return USBD_StrDesc;
 8009344:	4b02      	ldr	r3, [pc, #8]	; (8009350 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8009346:	4618      	mov	r0, r3
 8009348:	3708      	adds	r7, #8
 800934a:	46bd      	mov	sp, r7
 800934c:	bd80      	pop	{r7, pc}
 800934e:	bf00      	nop
 8009350:	20001594 	.word	0x20001594
 8009354:	0800a420 	.word	0x0800a420

08009358 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8009358:	b580      	push	{r7, lr}
 800935a:	b084      	sub	sp, #16
 800935c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800935e:	4b0f      	ldr	r3, [pc, #60]	; (800939c <Get_SerialNum+0x44>)
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8009364:	4b0e      	ldr	r3, [pc, #56]	; (80093a0 <Get_SerialNum+0x48>)
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800936a:	4b0e      	ldr	r3, [pc, #56]	; (80093a4 <Get_SerialNum+0x4c>)
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8009370:	68fa      	ldr	r2, [r7, #12]
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	4413      	add	r3, r2
 8009376:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d009      	beq.n	8009392 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800937e:	2208      	movs	r2, #8
 8009380:	4909      	ldr	r1, [pc, #36]	; (80093a8 <Get_SerialNum+0x50>)
 8009382:	68f8      	ldr	r0, [r7, #12]
 8009384:	f000 f814 	bl	80093b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8009388:	2204      	movs	r2, #4
 800938a:	4908      	ldr	r1, [pc, #32]	; (80093ac <Get_SerialNum+0x54>)
 800938c:	68b8      	ldr	r0, [r7, #8]
 800938e:	f000 f80f 	bl	80093b0 <IntToUnicode>
  }
}
 8009392:	bf00      	nop
 8009394:	3710      	adds	r7, #16
 8009396:	46bd      	mov	sp, r7
 8009398:	bd80      	pop	{r7, pc}
 800939a:	bf00      	nop
 800939c:	1fff7a10 	.word	0x1fff7a10
 80093a0:	1fff7a14 	.word	0x1fff7a14
 80093a4:	1fff7a18 	.word	0x1fff7a18
 80093a8:	200000e2 	.word	0x200000e2
 80093ac:	200000f2 	.word	0x200000f2

080093b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80093b0:	b480      	push	{r7}
 80093b2:	b087      	sub	sp, #28
 80093b4:	af00      	add	r7, sp, #0
 80093b6:	60f8      	str	r0, [r7, #12]
 80093b8:	60b9      	str	r1, [r7, #8]
 80093ba:	4613      	mov	r3, r2
 80093bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80093be:	2300      	movs	r3, #0
 80093c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80093c2:	2300      	movs	r3, #0
 80093c4:	75fb      	strb	r3, [r7, #23]
 80093c6:	e027      	b.n	8009418 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	0f1b      	lsrs	r3, r3, #28
 80093cc:	2b09      	cmp	r3, #9
 80093ce:	d80b      	bhi.n	80093e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	0f1b      	lsrs	r3, r3, #28
 80093d4:	b2da      	uxtb	r2, r3
 80093d6:	7dfb      	ldrb	r3, [r7, #23]
 80093d8:	005b      	lsls	r3, r3, #1
 80093da:	4619      	mov	r1, r3
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	440b      	add	r3, r1
 80093e0:	3230      	adds	r2, #48	; 0x30
 80093e2:	b2d2      	uxtb	r2, r2
 80093e4:	701a      	strb	r2, [r3, #0]
 80093e6:	e00a      	b.n	80093fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	0f1b      	lsrs	r3, r3, #28
 80093ec:	b2da      	uxtb	r2, r3
 80093ee:	7dfb      	ldrb	r3, [r7, #23]
 80093f0:	005b      	lsls	r3, r3, #1
 80093f2:	4619      	mov	r1, r3
 80093f4:	68bb      	ldr	r3, [r7, #8]
 80093f6:	440b      	add	r3, r1
 80093f8:	3237      	adds	r2, #55	; 0x37
 80093fa:	b2d2      	uxtb	r2, r2
 80093fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80093fe:	68fb      	ldr	r3, [r7, #12]
 8009400:	011b      	lsls	r3, r3, #4
 8009402:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8009404:	7dfb      	ldrb	r3, [r7, #23]
 8009406:	005b      	lsls	r3, r3, #1
 8009408:	3301      	adds	r3, #1
 800940a:	68ba      	ldr	r2, [r7, #8]
 800940c:	4413      	add	r3, r2
 800940e:	2200      	movs	r2, #0
 8009410:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8009412:	7dfb      	ldrb	r3, [r7, #23]
 8009414:	3301      	adds	r3, #1
 8009416:	75fb      	strb	r3, [r7, #23]
 8009418:	7dfa      	ldrb	r2, [r7, #23]
 800941a:	79fb      	ldrb	r3, [r7, #7]
 800941c:	429a      	cmp	r2, r3
 800941e:	d3d3      	bcc.n	80093c8 <IntToUnicode+0x18>
  }
}
 8009420:	bf00      	nop
 8009422:	bf00      	nop
 8009424:	371c      	adds	r7, #28
 8009426:	46bd      	mov	sp, r7
 8009428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800942c:	4770      	bx	lr
	...

08009430 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8009430:	b580      	push	{r7, lr}
 8009432:	b08a      	sub	sp, #40	; 0x28
 8009434:	af00      	add	r7, sp, #0
 8009436:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009438:	f107 0314 	add.w	r3, r7, #20
 800943c:	2200      	movs	r2, #0
 800943e:	601a      	str	r2, [r3, #0]
 8009440:	605a      	str	r2, [r3, #4]
 8009442:	609a      	str	r2, [r3, #8]
 8009444:	60da      	str	r2, [r3, #12]
 8009446:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8009450:	d147      	bne.n	80094e2 <HAL_PCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009452:	2300      	movs	r3, #0
 8009454:	613b      	str	r3, [r7, #16]
 8009456:	4b25      	ldr	r3, [pc, #148]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 8009458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800945a:	4a24      	ldr	r2, [pc, #144]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 800945c:	f043 0301 	orr.w	r3, r3, #1
 8009460:	6313      	str	r3, [r2, #48]	; 0x30
 8009462:	4b22      	ldr	r3, [pc, #136]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 8009464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009466:	f003 0301 	and.w	r3, r3, #1
 800946a:	613b      	str	r3, [r7, #16]
 800946c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800946e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8009472:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8009474:	2300      	movs	r3, #0
 8009476:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009478:	2300      	movs	r3, #0
 800947a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800947c:	f107 0314 	add.w	r3, r7, #20
 8009480:	4619      	mov	r1, r3
 8009482:	481b      	ldr	r0, [pc, #108]	; (80094f0 <HAL_PCD_MspInit+0xc0>)
 8009484:	f7f8 f940 	bl	8001708 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8009488:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800948c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800948e:	2302      	movs	r3, #2
 8009490:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009492:	2300      	movs	r3, #0
 8009494:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8009496:	2300      	movs	r3, #0
 8009498:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800949a:	230a      	movs	r3, #10
 800949c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800949e:	f107 0314 	add.w	r3, r7, #20
 80094a2:	4619      	mov	r1, r3
 80094a4:	4812      	ldr	r0, [pc, #72]	; (80094f0 <HAL_PCD_MspInit+0xc0>)
 80094a6:	f7f8 f92f 	bl	8001708 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80094aa:	4b10      	ldr	r3, [pc, #64]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 80094ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80094ae:	4a0f      	ldr	r2, [pc, #60]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 80094b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094b4:	6353      	str	r3, [r2, #52]	; 0x34
 80094b6:	2300      	movs	r3, #0
 80094b8:	60fb      	str	r3, [r7, #12]
 80094ba:	4b0c      	ldr	r3, [pc, #48]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 80094bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094be:	4a0b      	ldr	r2, [pc, #44]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 80094c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80094c4:	6453      	str	r3, [r2, #68]	; 0x44
 80094c6:	4b09      	ldr	r3, [pc, #36]	; (80094ec <HAL_PCD_MspInit+0xbc>)
 80094c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80094ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80094ce:	60fb      	str	r3, [r7, #12]
 80094d0:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80094d2:	2200      	movs	r2, #0
 80094d4:	2100      	movs	r1, #0
 80094d6:	2043      	movs	r0, #67	; 0x43
 80094d8:	f7f8 f8df 	bl	800169a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80094dc:	2043      	movs	r0, #67	; 0x43
 80094de:	f7f8 f8f8 	bl	80016d2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80094e2:	bf00      	nop
 80094e4:	3728      	adds	r7, #40	; 0x28
 80094e6:	46bd      	mov	sp, r7
 80094e8:	bd80      	pop	{r7, pc}
 80094ea:	bf00      	nop
 80094ec:	40023800 	.word	0x40023800
 80094f0:	40020000 	.word	0x40020000

080094f4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b082      	sub	sp, #8
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8009508:	4619      	mov	r1, r3
 800950a:	4610      	mov	r0, r2
 800950c:	f7fe fb2d 	bl	8007b6a <USBD_LL_SetupStage>
}
 8009510:	bf00      	nop
 8009512:	3708      	adds	r7, #8
 8009514:	46bd      	mov	sp, r7
 8009516:	bd80      	pop	{r7, pc}

08009518 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009518:	b580      	push	{r7, lr}
 800951a:	b082      	sub	sp, #8
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	460b      	mov	r3, r1
 8009522:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800952a:	78fa      	ldrb	r2, [r7, #3]
 800952c:	6879      	ldr	r1, [r7, #4]
 800952e:	4613      	mov	r3, r2
 8009530:	00db      	lsls	r3, r3, #3
 8009532:	4413      	add	r3, r2
 8009534:	009b      	lsls	r3, r3, #2
 8009536:	440b      	add	r3, r1
 8009538:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	78fb      	ldrb	r3, [r7, #3]
 8009540:	4619      	mov	r1, r3
 8009542:	f7fe fb67 	bl	8007c14 <USBD_LL_DataOutStage>
}
 8009546:	bf00      	nop
 8009548:	3708      	adds	r7, #8
 800954a:	46bd      	mov	sp, r7
 800954c:	bd80      	pop	{r7, pc}

0800954e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800954e:	b580      	push	{r7, lr}
 8009550:	b082      	sub	sp, #8
 8009552:	af00      	add	r7, sp, #0
 8009554:	6078      	str	r0, [r7, #4]
 8009556:	460b      	mov	r3, r1
 8009558:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8009560:	78fa      	ldrb	r2, [r7, #3]
 8009562:	6879      	ldr	r1, [r7, #4]
 8009564:	4613      	mov	r3, r2
 8009566:	00db      	lsls	r3, r3, #3
 8009568:	4413      	add	r3, r2
 800956a:	009b      	lsls	r3, r3, #2
 800956c:	440b      	add	r3, r1
 800956e:	334c      	adds	r3, #76	; 0x4c
 8009570:	681a      	ldr	r2, [r3, #0]
 8009572:	78fb      	ldrb	r3, [r7, #3]
 8009574:	4619      	mov	r1, r3
 8009576:	f7fe fc00 	bl	8007d7a <USBD_LL_DataInStage>
}
 800957a:	bf00      	nop
 800957c:	3708      	adds	r7, #8
 800957e:	46bd      	mov	sp, r7
 8009580:	bd80      	pop	{r7, pc}

08009582 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009582:	b580      	push	{r7, lr}
 8009584:	b082      	sub	sp, #8
 8009586:	af00      	add	r7, sp, #0
 8009588:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8009590:	4618      	mov	r0, r3
 8009592:	f7fe fd34 	bl	8007ffe <USBD_LL_SOF>
}
 8009596:	bf00      	nop
 8009598:	3708      	adds	r7, #8
 800959a:	46bd      	mov	sp, r7
 800959c:	bd80      	pop	{r7, pc}

0800959e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800959e:	b580      	push	{r7, lr}
 80095a0:	b084      	sub	sp, #16
 80095a2:	af00      	add	r7, sp, #0
 80095a4:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80095a6:	2301      	movs	r3, #1
 80095a8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	68db      	ldr	r3, [r3, #12]
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	d102      	bne.n	80095b8 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 80095b2:	2300      	movs	r3, #0
 80095b4:	73fb      	strb	r3, [r7, #15]
 80095b6:	e008      	b.n	80095ca <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	68db      	ldr	r3, [r3, #12]
 80095bc:	2b02      	cmp	r3, #2
 80095be:	d102      	bne.n	80095c6 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 80095c0:	2301      	movs	r3, #1
 80095c2:	73fb      	strb	r3, [r7, #15]
 80095c4:	e001      	b.n	80095ca <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 80095c6:	f7f7 fccb 	bl	8000f60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80095ca:	687b      	ldr	r3, [r7, #4]
 80095cc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095d0:	7bfa      	ldrb	r2, [r7, #15]
 80095d2:	4611      	mov	r1, r2
 80095d4:	4618      	mov	r0, r3
 80095d6:	f7fe fcd4 	bl	8007f82 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095e0:	4618      	mov	r0, r3
 80095e2:	f7fe fc7c 	bl	8007ede <USBD_LL_Reset>
}
 80095e6:	bf00      	nop
 80095e8:	3710      	adds	r7, #16
 80095ea:	46bd      	mov	sp, r7
 80095ec:	bd80      	pop	{r7, pc}
	...

080095f0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b082      	sub	sp, #8
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe fccf 	bl	8007fa2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	681b      	ldr	r3, [r3, #0]
 8009608:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	687a      	ldr	r2, [r7, #4]
 8009610:	6812      	ldr	r2, [r2, #0]
 8009612:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8009616:	f043 0301 	orr.w	r3, r3, #1
 800961a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 800961c:	687b      	ldr	r3, [r7, #4]
 800961e:	6a1b      	ldr	r3, [r3, #32]
 8009620:	2b00      	cmp	r3, #0
 8009622:	d005      	beq.n	8009630 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8009624:	4b04      	ldr	r3, [pc, #16]	; (8009638 <HAL_PCD_SuspendCallback+0x48>)
 8009626:	691b      	ldr	r3, [r3, #16]
 8009628:	4a03      	ldr	r2, [pc, #12]	; (8009638 <HAL_PCD_SuspendCallback+0x48>)
 800962a:	f043 0306 	orr.w	r3, r3, #6
 800962e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8009630:	bf00      	nop
 8009632:	3708      	adds	r7, #8
 8009634:	46bd      	mov	sp, r7
 8009636:	bd80      	pop	{r7, pc}
 8009638:	e000ed00 	.word	0xe000ed00

0800963c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800964a:	4618      	mov	r0, r3
 800964c:	f7fe fcbf 	bl	8007fce <USBD_LL_Resume>
}
 8009650:	bf00      	nop
 8009652:	3708      	adds	r7, #8
 8009654:	46bd      	mov	sp, r7
 8009656:	bd80      	pop	{r7, pc}

08009658 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8009658:	b580      	push	{r7, lr}
 800965a:	b082      	sub	sp, #8
 800965c:	af00      	add	r7, sp, #0
 800965e:	6078      	str	r0, [r7, #4]
 8009660:	460b      	mov	r3, r1
 8009662:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800966a:	78fa      	ldrb	r2, [r7, #3]
 800966c:	4611      	mov	r1, r2
 800966e:	4618      	mov	r0, r3
 8009670:	f7fe fd17 	bl	80080a2 <USBD_LL_IsoOUTIncomplete>
}
 8009674:	bf00      	nop
 8009676:	3708      	adds	r7, #8
 8009678:	46bd      	mov	sp, r7
 800967a:	bd80      	pop	{r7, pc}

0800967c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800967c:	b580      	push	{r7, lr}
 800967e:	b082      	sub	sp, #8
 8009680:	af00      	add	r7, sp, #0
 8009682:	6078      	str	r0, [r7, #4]
 8009684:	460b      	mov	r3, r1
 8009686:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800968e:	78fa      	ldrb	r2, [r7, #3]
 8009690:	4611      	mov	r1, r2
 8009692:	4618      	mov	r0, r3
 8009694:	f7fe fcd3 	bl	800803e <USBD_LL_IsoINIncomplete>
}
 8009698:	bf00      	nop
 800969a:	3708      	adds	r7, #8
 800969c:	46bd      	mov	sp, r7
 800969e:	bd80      	pop	{r7, pc}

080096a0 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ae:	4618      	mov	r0, r3
 80096b0:	f7fe fd29 	bl	8008106 <USBD_LL_DevConnected>
}
 80096b4:	bf00      	nop
 80096b6:	3708      	adds	r7, #8
 80096b8:	46bd      	mov	sp, r7
 80096ba:	bd80      	pop	{r7, pc}

080096bc <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b082      	sub	sp, #8
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80096ca:	4618      	mov	r0, r3
 80096cc:	f7fe fd26 	bl	800811c <USBD_LL_DevDisconnected>
}
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}

080096d8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80096d8:	b580      	push	{r7, lr}
 80096da:	b082      	sub	sp, #8
 80096dc:	af00      	add	r7, sp, #0
 80096de:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	781b      	ldrb	r3, [r3, #0]
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d13c      	bne.n	8009762 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80096e8:	4a20      	ldr	r2, [pc, #128]	; (800976c <USBD_LL_Init+0x94>)
 80096ea:	687b      	ldr	r3, [r7, #4]
 80096ec:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80096f0:	687b      	ldr	r3, [r7, #4]
 80096f2:	4a1e      	ldr	r2, [pc, #120]	; (800976c <USBD_LL_Init+0x94>)
 80096f4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80096f8:	4b1c      	ldr	r3, [pc, #112]	; (800976c <USBD_LL_Init+0x94>)
 80096fa:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80096fe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8009700:	4b1a      	ldr	r3, [pc, #104]	; (800976c <USBD_LL_Init+0x94>)
 8009702:	2204      	movs	r2, #4
 8009704:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8009706:	4b19      	ldr	r3, [pc, #100]	; (800976c <USBD_LL_Init+0x94>)
 8009708:	2202      	movs	r2, #2
 800970a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800970c:	4b17      	ldr	r3, [pc, #92]	; (800976c <USBD_LL_Init+0x94>)
 800970e:	2200      	movs	r2, #0
 8009710:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8009712:	4b16      	ldr	r3, [pc, #88]	; (800976c <USBD_LL_Init+0x94>)
 8009714:	2202      	movs	r2, #2
 8009716:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8009718:	4b14      	ldr	r3, [pc, #80]	; (800976c <USBD_LL_Init+0x94>)
 800971a:	2200      	movs	r2, #0
 800971c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800971e:	4b13      	ldr	r3, [pc, #76]	; (800976c <USBD_LL_Init+0x94>)
 8009720:	2200      	movs	r2, #0
 8009722:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8009724:	4b11      	ldr	r3, [pc, #68]	; (800976c <USBD_LL_Init+0x94>)
 8009726:	2200      	movs	r2, #0
 8009728:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800972a:	4b10      	ldr	r3, [pc, #64]	; (800976c <USBD_LL_Init+0x94>)
 800972c:	2201      	movs	r2, #1
 800972e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8009730:	4b0e      	ldr	r3, [pc, #56]	; (800976c <USBD_LL_Init+0x94>)
 8009732:	2200      	movs	r2, #0
 8009734:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8009736:	480d      	ldr	r0, [pc, #52]	; (800976c <USBD_LL_Init+0x94>)
 8009738:	f7f8 ff80 	bl	800263c <HAL_PCD_Init>
 800973c:	4603      	mov	r3, r0
 800973e:	2b00      	cmp	r3, #0
 8009740:	d001      	beq.n	8009746 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8009742:	f7f7 fc0d 	bl	8000f60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8009746:	2180      	movs	r1, #128	; 0x80
 8009748:	4808      	ldr	r0, [pc, #32]	; (800976c <USBD_LL_Init+0x94>)
 800974a:	f7fa f9d8 	bl	8003afe <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 800974e:	2240      	movs	r2, #64	; 0x40
 8009750:	2100      	movs	r1, #0
 8009752:	4806      	ldr	r0, [pc, #24]	; (800976c <USBD_LL_Init+0x94>)
 8009754:	f7fa f98c 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8009758:	2280      	movs	r2, #128	; 0x80
 800975a:	2101      	movs	r1, #1
 800975c:	4803      	ldr	r0, [pc, #12]	; (800976c <USBD_LL_Init+0x94>)
 800975e:	f7fa f987 	bl	8003a70 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8009762:	2300      	movs	r3, #0
}
 8009764:	4618      	mov	r0, r3
 8009766:	3708      	adds	r7, #8
 8009768:	46bd      	mov	sp, r7
 800976a:	bd80      	pop	{r7, pc}
 800976c:	20001794 	.word	0x20001794

08009770 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8009770:	b580      	push	{r7, lr}
 8009772:	b084      	sub	sp, #16
 8009774:	af00      	add	r7, sp, #0
 8009776:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009778:	2300      	movs	r3, #0
 800977a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800977c:	2300      	movs	r3, #0
 800977e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009786:	4618      	mov	r0, r3
 8009788:	f7f9 f875 	bl	8002876 <HAL_PCD_Start>
 800978c:	4603      	mov	r3, r0
 800978e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009790:	7bfb      	ldrb	r3, [r7, #15]
 8009792:	4618      	mov	r0, r3
 8009794:	f000 f942 	bl	8009a1c <USBD_Get_USB_Status>
 8009798:	4603      	mov	r3, r0
 800979a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800979c:	7bbb      	ldrb	r3, [r7, #14]
}
 800979e:	4618      	mov	r0, r3
 80097a0:	3710      	adds	r7, #16
 80097a2:	46bd      	mov	sp, r7
 80097a4:	bd80      	pop	{r7, pc}

080097a6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80097a6:	b580      	push	{r7, lr}
 80097a8:	b084      	sub	sp, #16
 80097aa:	af00      	add	r7, sp, #0
 80097ac:	6078      	str	r0, [r7, #4]
 80097ae:	4608      	mov	r0, r1
 80097b0:	4611      	mov	r1, r2
 80097b2:	461a      	mov	r2, r3
 80097b4:	4603      	mov	r3, r0
 80097b6:	70fb      	strb	r3, [r7, #3]
 80097b8:	460b      	mov	r3, r1
 80097ba:	70bb      	strb	r3, [r7, #2]
 80097bc:	4613      	mov	r3, r2
 80097be:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097c0:	2300      	movs	r3, #0
 80097c2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80097c4:	2300      	movs	r3, #0
 80097c6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80097ce:	78bb      	ldrb	r3, [r7, #2]
 80097d0:	883a      	ldrh	r2, [r7, #0]
 80097d2:	78f9      	ldrb	r1, [r7, #3]
 80097d4:	f7f9 fd46 	bl	8003264 <HAL_PCD_EP_Open>
 80097d8:	4603      	mov	r3, r0
 80097da:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80097dc:	7bfb      	ldrb	r3, [r7, #15]
 80097de:	4618      	mov	r0, r3
 80097e0:	f000 f91c 	bl	8009a1c <USBD_Get_USB_Status>
 80097e4:	4603      	mov	r3, r0
 80097e6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80097e8:	7bbb      	ldrb	r3, [r7, #14]
}
 80097ea:	4618      	mov	r0, r3
 80097ec:	3710      	adds	r7, #16
 80097ee:	46bd      	mov	sp, r7
 80097f0:	bd80      	pop	{r7, pc}

080097f2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b084      	sub	sp, #16
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
 80097fa:	460b      	mov	r3, r1
 80097fc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80097fe:	2300      	movs	r3, #0
 8009800:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009802:	2300      	movs	r3, #0
 8009804:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800980c:	78fa      	ldrb	r2, [r7, #3]
 800980e:	4611      	mov	r1, r2
 8009810:	4618      	mov	r0, r3
 8009812:	f7f9 fd8f 	bl	8003334 <HAL_PCD_EP_Close>
 8009816:	4603      	mov	r3, r0
 8009818:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800981a:	7bfb      	ldrb	r3, [r7, #15]
 800981c:	4618      	mov	r0, r3
 800981e:	f000 f8fd 	bl	8009a1c <USBD_Get_USB_Status>
 8009822:	4603      	mov	r3, r0
 8009824:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009826:	7bbb      	ldrb	r3, [r7, #14]
}
 8009828:	4618      	mov	r0, r3
 800982a:	3710      	adds	r7, #16
 800982c:	46bd      	mov	sp, r7
 800982e:	bd80      	pop	{r7, pc}

08009830 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8009830:	b580      	push	{r7, lr}
 8009832:	b084      	sub	sp, #16
 8009834:	af00      	add	r7, sp, #0
 8009836:	6078      	str	r0, [r7, #4]
 8009838:	460b      	mov	r3, r1
 800983a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800983c:	2300      	movs	r3, #0
 800983e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009840:	2300      	movs	r3, #0
 8009842:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800984a:	78fa      	ldrb	r2, [r7, #3]
 800984c:	4611      	mov	r1, r2
 800984e:	4618      	mov	r0, r3
 8009850:	f7f9 fe67 	bl	8003522 <HAL_PCD_EP_SetStall>
 8009854:	4603      	mov	r3, r0
 8009856:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009858:	7bfb      	ldrb	r3, [r7, #15]
 800985a:	4618      	mov	r0, r3
 800985c:	f000 f8de 	bl	8009a1c <USBD_Get_USB_Status>
 8009860:	4603      	mov	r3, r0
 8009862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009864:	7bbb      	ldrb	r3, [r7, #14]
}
 8009866:	4618      	mov	r0, r3
 8009868:	3710      	adds	r7, #16
 800986a:	46bd      	mov	sp, r7
 800986c:	bd80      	pop	{r7, pc}

0800986e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800986e:	b580      	push	{r7, lr}
 8009870:	b084      	sub	sp, #16
 8009872:	af00      	add	r7, sp, #0
 8009874:	6078      	str	r0, [r7, #4]
 8009876:	460b      	mov	r3, r1
 8009878:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800987a:	2300      	movs	r3, #0
 800987c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800987e:	2300      	movs	r3, #0
 8009880:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8009888:	78fa      	ldrb	r2, [r7, #3]
 800988a:	4611      	mov	r1, r2
 800988c:	4618      	mov	r0, r3
 800988e:	f7f9 feac 	bl	80035ea <HAL_PCD_EP_ClrStall>
 8009892:	4603      	mov	r3, r0
 8009894:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8009896:	7bfb      	ldrb	r3, [r7, #15]
 8009898:	4618      	mov	r0, r3
 800989a:	f000 f8bf 	bl	8009a1c <USBD_Get_USB_Status>
 800989e:	4603      	mov	r3, r0
 80098a0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80098a2:	7bbb      	ldrb	r3, [r7, #14]
}
 80098a4:	4618      	mov	r0, r3
 80098a6:	3710      	adds	r7, #16
 80098a8:	46bd      	mov	sp, r7
 80098aa:	bd80      	pop	{r7, pc}

080098ac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80098ac:	b480      	push	{r7}
 80098ae:	b085      	sub	sp, #20
 80098b0:	af00      	add	r7, sp, #0
 80098b2:	6078      	str	r0, [r7, #4]
 80098b4:	460b      	mov	r3, r1
 80098b6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80098be:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80098c0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80098c4:	2b00      	cmp	r3, #0
 80098c6:	da0b      	bge.n	80098e0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80098c8:	78fb      	ldrb	r3, [r7, #3]
 80098ca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098ce:	68f9      	ldr	r1, [r7, #12]
 80098d0:	4613      	mov	r3, r2
 80098d2:	00db      	lsls	r3, r3, #3
 80098d4:	4413      	add	r3, r2
 80098d6:	009b      	lsls	r3, r3, #2
 80098d8:	440b      	add	r3, r1
 80098da:	333e      	adds	r3, #62	; 0x3e
 80098dc:	781b      	ldrb	r3, [r3, #0]
 80098de:	e00b      	b.n	80098f8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80098e0:	78fb      	ldrb	r3, [r7, #3]
 80098e2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80098e6:	68f9      	ldr	r1, [r7, #12]
 80098e8:	4613      	mov	r3, r2
 80098ea:	00db      	lsls	r3, r3, #3
 80098ec:	4413      	add	r3, r2
 80098ee:	009b      	lsls	r3, r3, #2
 80098f0:	440b      	add	r3, r1
 80098f2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80098f6:	781b      	ldrb	r3, [r3, #0]
  }
}
 80098f8:	4618      	mov	r0, r3
 80098fa:	3714      	adds	r7, #20
 80098fc:	46bd      	mov	sp, r7
 80098fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009902:	4770      	bx	lr

08009904 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8009904:	b580      	push	{r7, lr}
 8009906:	b084      	sub	sp, #16
 8009908:	af00      	add	r7, sp, #0
 800990a:	6078      	str	r0, [r7, #4]
 800990c:	460b      	mov	r3, r1
 800990e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009910:	2300      	movs	r3, #0
 8009912:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009914:	2300      	movs	r3, #0
 8009916:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8009918:	687b      	ldr	r3, [r7, #4]
 800991a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800991e:	78fa      	ldrb	r2, [r7, #3]
 8009920:	4611      	mov	r1, r2
 8009922:	4618      	mov	r0, r3
 8009924:	f7f9 fc79 	bl	800321a <HAL_PCD_SetAddress>
 8009928:	4603      	mov	r3, r0
 800992a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800992c:	7bfb      	ldrb	r3, [r7, #15]
 800992e:	4618      	mov	r0, r3
 8009930:	f000 f874 	bl	8009a1c <USBD_Get_USB_Status>
 8009934:	4603      	mov	r3, r0
 8009936:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8009938:	7bbb      	ldrb	r3, [r7, #14]
}
 800993a:	4618      	mov	r0, r3
 800993c:	3710      	adds	r7, #16
 800993e:	46bd      	mov	sp, r7
 8009940:	bd80      	pop	{r7, pc}

08009942 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009942:	b580      	push	{r7, lr}
 8009944:	b086      	sub	sp, #24
 8009946:	af00      	add	r7, sp, #0
 8009948:	60f8      	str	r0, [r7, #12]
 800994a:	607a      	str	r2, [r7, #4]
 800994c:	603b      	str	r3, [r7, #0]
 800994e:	460b      	mov	r3, r1
 8009950:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009952:	2300      	movs	r3, #0
 8009954:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009956:	2300      	movs	r3, #0
 8009958:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 800995a:	68fb      	ldr	r3, [r7, #12]
 800995c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8009960:	7af9      	ldrb	r1, [r7, #11]
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	f7f9 fd92 	bl	800348e <HAL_PCD_EP_Transmit>
 800996a:	4603      	mov	r3, r0
 800996c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800996e:	7dfb      	ldrb	r3, [r7, #23]
 8009970:	4618      	mov	r0, r3
 8009972:	f000 f853 	bl	8009a1c <USBD_Get_USB_Status>
 8009976:	4603      	mov	r3, r0
 8009978:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800997a:	7dbb      	ldrb	r3, [r7, #22]
}
 800997c:	4618      	mov	r0, r3
 800997e:	3718      	adds	r7, #24
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}

08009984 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8009984:	b580      	push	{r7, lr}
 8009986:	b086      	sub	sp, #24
 8009988:	af00      	add	r7, sp, #0
 800998a:	60f8      	str	r0, [r7, #12]
 800998c:	607a      	str	r2, [r7, #4]
 800998e:	603b      	str	r3, [r7, #0]
 8009990:	460b      	mov	r3, r1
 8009992:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8009994:	2300      	movs	r3, #0
 8009996:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009998:	2300      	movs	r3, #0
 800999a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80099a2:	7af9      	ldrb	r1, [r7, #11]
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	687a      	ldr	r2, [r7, #4]
 80099a8:	f7f9 fd0e 	bl	80033c8 <HAL_PCD_EP_Receive>
 80099ac:	4603      	mov	r3, r0
 80099ae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80099b0:	7dfb      	ldrb	r3, [r7, #23]
 80099b2:	4618      	mov	r0, r3
 80099b4:	f000 f832 	bl	8009a1c <USBD_Get_USB_Status>
 80099b8:	4603      	mov	r3, r0
 80099ba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80099bc:	7dbb      	ldrb	r3, [r7, #22]
}
 80099be:	4618      	mov	r0, r3
 80099c0:	3718      	adds	r7, #24
 80099c2:	46bd      	mov	sp, r7
 80099c4:	bd80      	pop	{r7, pc}

080099c6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80099c6:	b580      	push	{r7, lr}
 80099c8:	b082      	sub	sp, #8
 80099ca:	af00      	add	r7, sp, #0
 80099cc:	6078      	str	r0, [r7, #4]
 80099ce:	460b      	mov	r3, r1
 80099d0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80099d2:	687b      	ldr	r3, [r7, #4]
 80099d4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80099d8:	78fa      	ldrb	r2, [r7, #3]
 80099da:	4611      	mov	r1, r2
 80099dc:	4618      	mov	r0, r3
 80099de:	f7f9 fd3e 	bl	800345e <HAL_PCD_EP_GetRxCount>
 80099e2:	4603      	mov	r3, r0
}
 80099e4:	4618      	mov	r0, r3
 80099e6:	3708      	adds	r7, #8
 80099e8:	46bd      	mov	sp, r7
 80099ea:	bd80      	pop	{r7, pc}

080099ec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80099f4:	4b03      	ldr	r3, [pc, #12]	; (8009a04 <USBD_static_malloc+0x18>)
}
 80099f6:	4618      	mov	r0, r3
 80099f8:	370c      	adds	r7, #12
 80099fa:	46bd      	mov	sp, r7
 80099fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a00:	4770      	bx	lr
 8009a02:	bf00      	nop
 8009a04:	20001ca0 	.word	0x20001ca0

08009a08 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b083      	sub	sp, #12
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	6078      	str	r0, [r7, #4]

}
 8009a10:	bf00      	nop
 8009a12:	370c      	adds	r7, #12
 8009a14:	46bd      	mov	sp, r7
 8009a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a1a:	4770      	bx	lr

08009a1c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8009a1c:	b480      	push	{r7}
 8009a1e:	b085      	sub	sp, #20
 8009a20:	af00      	add	r7, sp, #0
 8009a22:	4603      	mov	r3, r0
 8009a24:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8009a26:	2300      	movs	r3, #0
 8009a28:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8009a2a:	79fb      	ldrb	r3, [r7, #7]
 8009a2c:	2b03      	cmp	r3, #3
 8009a2e:	d817      	bhi.n	8009a60 <USBD_Get_USB_Status+0x44>
 8009a30:	a201      	add	r2, pc, #4	; (adr r2, 8009a38 <USBD_Get_USB_Status+0x1c>)
 8009a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009a36:	bf00      	nop
 8009a38:	08009a49 	.word	0x08009a49
 8009a3c:	08009a4f 	.word	0x08009a4f
 8009a40:	08009a55 	.word	0x08009a55
 8009a44:	08009a5b 	.word	0x08009a5b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8009a48:	2300      	movs	r3, #0
 8009a4a:	73fb      	strb	r3, [r7, #15]
    break;
 8009a4c:	e00b      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	73fb      	strb	r3, [r7, #15]
    break;
 8009a52:	e008      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8009a54:	2301      	movs	r3, #1
 8009a56:	73fb      	strb	r3, [r7, #15]
    break;
 8009a58:	e005      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	73fb      	strb	r3, [r7, #15]
    break;
 8009a5e:	e002      	b.n	8009a66 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8009a60:	2303      	movs	r3, #3
 8009a62:	73fb      	strb	r3, [r7, #15]
    break;
 8009a64:	bf00      	nop
  }
  return usb_status;
 8009a66:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	3714      	adds	r7, #20
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <siprintf>:
 8009a74:	b40e      	push	{r1, r2, r3}
 8009a76:	b500      	push	{lr}
 8009a78:	b09c      	sub	sp, #112	; 0x70
 8009a7a:	ab1d      	add	r3, sp, #116	; 0x74
 8009a7c:	9002      	str	r0, [sp, #8]
 8009a7e:	9006      	str	r0, [sp, #24]
 8009a80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009a84:	4809      	ldr	r0, [pc, #36]	; (8009aac <siprintf+0x38>)
 8009a86:	9107      	str	r1, [sp, #28]
 8009a88:	9104      	str	r1, [sp, #16]
 8009a8a:	4909      	ldr	r1, [pc, #36]	; (8009ab0 <siprintf+0x3c>)
 8009a8c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a90:	9105      	str	r1, [sp, #20]
 8009a92:	6800      	ldr	r0, [r0, #0]
 8009a94:	9301      	str	r3, [sp, #4]
 8009a96:	a902      	add	r1, sp, #8
 8009a98:	f000 f992 	bl	8009dc0 <_svfiprintf_r>
 8009a9c:	9b02      	ldr	r3, [sp, #8]
 8009a9e:	2200      	movs	r2, #0
 8009aa0:	701a      	strb	r2, [r3, #0]
 8009aa2:	b01c      	add	sp, #112	; 0x70
 8009aa4:	f85d eb04 	ldr.w	lr, [sp], #4
 8009aa8:	b003      	add	sp, #12
 8009aaa:	4770      	bx	lr
 8009aac:	20000148 	.word	0x20000148
 8009ab0:	ffff0208 	.word	0xffff0208

08009ab4 <memset>:
 8009ab4:	4402      	add	r2, r0
 8009ab6:	4603      	mov	r3, r0
 8009ab8:	4293      	cmp	r3, r2
 8009aba:	d100      	bne.n	8009abe <memset+0xa>
 8009abc:	4770      	bx	lr
 8009abe:	f803 1b01 	strb.w	r1, [r3], #1
 8009ac2:	e7f9      	b.n	8009ab8 <memset+0x4>

08009ac4 <__errno>:
 8009ac4:	4b01      	ldr	r3, [pc, #4]	; (8009acc <__errno+0x8>)
 8009ac6:	6818      	ldr	r0, [r3, #0]
 8009ac8:	4770      	bx	lr
 8009aca:	bf00      	nop
 8009acc:	20000148 	.word	0x20000148

08009ad0 <__libc_init_array>:
 8009ad0:	b570      	push	{r4, r5, r6, lr}
 8009ad2:	4d0d      	ldr	r5, [pc, #52]	; (8009b08 <__libc_init_array+0x38>)
 8009ad4:	4c0d      	ldr	r4, [pc, #52]	; (8009b0c <__libc_init_array+0x3c>)
 8009ad6:	1b64      	subs	r4, r4, r5
 8009ad8:	10a4      	asrs	r4, r4, #2
 8009ada:	2600      	movs	r6, #0
 8009adc:	42a6      	cmp	r6, r4
 8009ade:	d109      	bne.n	8009af4 <__libc_init_array+0x24>
 8009ae0:	4d0b      	ldr	r5, [pc, #44]	; (8009b10 <__libc_init_array+0x40>)
 8009ae2:	4c0c      	ldr	r4, [pc, #48]	; (8009b14 <__libc_init_array+0x44>)
 8009ae4:	f000 fc6a 	bl	800a3bc <_init>
 8009ae8:	1b64      	subs	r4, r4, r5
 8009aea:	10a4      	asrs	r4, r4, #2
 8009aec:	2600      	movs	r6, #0
 8009aee:	42a6      	cmp	r6, r4
 8009af0:	d105      	bne.n	8009afe <__libc_init_array+0x2e>
 8009af2:	bd70      	pop	{r4, r5, r6, pc}
 8009af4:	f855 3b04 	ldr.w	r3, [r5], #4
 8009af8:	4798      	blx	r3
 8009afa:	3601      	adds	r6, #1
 8009afc:	e7ee      	b.n	8009adc <__libc_init_array+0xc>
 8009afe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009b02:	4798      	blx	r3
 8009b04:	3601      	adds	r6, #1
 8009b06:	e7f2      	b.n	8009aee <__libc_init_array+0x1e>
 8009b08:	0800a484 	.word	0x0800a484
 8009b0c:	0800a484 	.word	0x0800a484
 8009b10:	0800a484 	.word	0x0800a484
 8009b14:	0800a488 	.word	0x0800a488

08009b18 <__retarget_lock_acquire_recursive>:
 8009b18:	4770      	bx	lr

08009b1a <__retarget_lock_release_recursive>:
 8009b1a:	4770      	bx	lr

08009b1c <_free_r>:
 8009b1c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009b1e:	2900      	cmp	r1, #0
 8009b20:	d044      	beq.n	8009bac <_free_r+0x90>
 8009b22:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b26:	9001      	str	r0, [sp, #4]
 8009b28:	2b00      	cmp	r3, #0
 8009b2a:	f1a1 0404 	sub.w	r4, r1, #4
 8009b2e:	bfb8      	it	lt
 8009b30:	18e4      	addlt	r4, r4, r3
 8009b32:	f000 f8df 	bl	8009cf4 <__malloc_lock>
 8009b36:	4a1e      	ldr	r2, [pc, #120]	; (8009bb0 <_free_r+0x94>)
 8009b38:	9801      	ldr	r0, [sp, #4]
 8009b3a:	6813      	ldr	r3, [r2, #0]
 8009b3c:	b933      	cbnz	r3, 8009b4c <_free_r+0x30>
 8009b3e:	6063      	str	r3, [r4, #4]
 8009b40:	6014      	str	r4, [r2, #0]
 8009b42:	b003      	add	sp, #12
 8009b44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009b48:	f000 b8da 	b.w	8009d00 <__malloc_unlock>
 8009b4c:	42a3      	cmp	r3, r4
 8009b4e:	d908      	bls.n	8009b62 <_free_r+0x46>
 8009b50:	6825      	ldr	r5, [r4, #0]
 8009b52:	1961      	adds	r1, r4, r5
 8009b54:	428b      	cmp	r3, r1
 8009b56:	bf01      	itttt	eq
 8009b58:	6819      	ldreq	r1, [r3, #0]
 8009b5a:	685b      	ldreq	r3, [r3, #4]
 8009b5c:	1949      	addeq	r1, r1, r5
 8009b5e:	6021      	streq	r1, [r4, #0]
 8009b60:	e7ed      	b.n	8009b3e <_free_r+0x22>
 8009b62:	461a      	mov	r2, r3
 8009b64:	685b      	ldr	r3, [r3, #4]
 8009b66:	b10b      	cbz	r3, 8009b6c <_free_r+0x50>
 8009b68:	42a3      	cmp	r3, r4
 8009b6a:	d9fa      	bls.n	8009b62 <_free_r+0x46>
 8009b6c:	6811      	ldr	r1, [r2, #0]
 8009b6e:	1855      	adds	r5, r2, r1
 8009b70:	42a5      	cmp	r5, r4
 8009b72:	d10b      	bne.n	8009b8c <_free_r+0x70>
 8009b74:	6824      	ldr	r4, [r4, #0]
 8009b76:	4421      	add	r1, r4
 8009b78:	1854      	adds	r4, r2, r1
 8009b7a:	42a3      	cmp	r3, r4
 8009b7c:	6011      	str	r1, [r2, #0]
 8009b7e:	d1e0      	bne.n	8009b42 <_free_r+0x26>
 8009b80:	681c      	ldr	r4, [r3, #0]
 8009b82:	685b      	ldr	r3, [r3, #4]
 8009b84:	6053      	str	r3, [r2, #4]
 8009b86:	440c      	add	r4, r1
 8009b88:	6014      	str	r4, [r2, #0]
 8009b8a:	e7da      	b.n	8009b42 <_free_r+0x26>
 8009b8c:	d902      	bls.n	8009b94 <_free_r+0x78>
 8009b8e:	230c      	movs	r3, #12
 8009b90:	6003      	str	r3, [r0, #0]
 8009b92:	e7d6      	b.n	8009b42 <_free_r+0x26>
 8009b94:	6825      	ldr	r5, [r4, #0]
 8009b96:	1961      	adds	r1, r4, r5
 8009b98:	428b      	cmp	r3, r1
 8009b9a:	bf04      	itt	eq
 8009b9c:	6819      	ldreq	r1, [r3, #0]
 8009b9e:	685b      	ldreq	r3, [r3, #4]
 8009ba0:	6063      	str	r3, [r4, #4]
 8009ba2:	bf04      	itt	eq
 8009ba4:	1949      	addeq	r1, r1, r5
 8009ba6:	6021      	streq	r1, [r4, #0]
 8009ba8:	6054      	str	r4, [r2, #4]
 8009baa:	e7ca      	b.n	8009b42 <_free_r+0x26>
 8009bac:	b003      	add	sp, #12
 8009bae:	bd30      	pop	{r4, r5, pc}
 8009bb0:	20002000 	.word	0x20002000

08009bb4 <sbrk_aligned>:
 8009bb4:	b570      	push	{r4, r5, r6, lr}
 8009bb6:	4e0e      	ldr	r6, [pc, #56]	; (8009bf0 <sbrk_aligned+0x3c>)
 8009bb8:	460c      	mov	r4, r1
 8009bba:	6831      	ldr	r1, [r6, #0]
 8009bbc:	4605      	mov	r5, r0
 8009bbe:	b911      	cbnz	r1, 8009bc6 <sbrk_aligned+0x12>
 8009bc0:	f000 fba6 	bl	800a310 <_sbrk_r>
 8009bc4:	6030      	str	r0, [r6, #0]
 8009bc6:	4621      	mov	r1, r4
 8009bc8:	4628      	mov	r0, r5
 8009bca:	f000 fba1 	bl	800a310 <_sbrk_r>
 8009bce:	1c43      	adds	r3, r0, #1
 8009bd0:	d00a      	beq.n	8009be8 <sbrk_aligned+0x34>
 8009bd2:	1cc4      	adds	r4, r0, #3
 8009bd4:	f024 0403 	bic.w	r4, r4, #3
 8009bd8:	42a0      	cmp	r0, r4
 8009bda:	d007      	beq.n	8009bec <sbrk_aligned+0x38>
 8009bdc:	1a21      	subs	r1, r4, r0
 8009bde:	4628      	mov	r0, r5
 8009be0:	f000 fb96 	bl	800a310 <_sbrk_r>
 8009be4:	3001      	adds	r0, #1
 8009be6:	d101      	bne.n	8009bec <sbrk_aligned+0x38>
 8009be8:	f04f 34ff 	mov.w	r4, #4294967295
 8009bec:	4620      	mov	r0, r4
 8009bee:	bd70      	pop	{r4, r5, r6, pc}
 8009bf0:	20002004 	.word	0x20002004

08009bf4 <_malloc_r>:
 8009bf4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009bf8:	1ccd      	adds	r5, r1, #3
 8009bfa:	f025 0503 	bic.w	r5, r5, #3
 8009bfe:	3508      	adds	r5, #8
 8009c00:	2d0c      	cmp	r5, #12
 8009c02:	bf38      	it	cc
 8009c04:	250c      	movcc	r5, #12
 8009c06:	2d00      	cmp	r5, #0
 8009c08:	4607      	mov	r7, r0
 8009c0a:	db01      	blt.n	8009c10 <_malloc_r+0x1c>
 8009c0c:	42a9      	cmp	r1, r5
 8009c0e:	d905      	bls.n	8009c1c <_malloc_r+0x28>
 8009c10:	230c      	movs	r3, #12
 8009c12:	603b      	str	r3, [r7, #0]
 8009c14:	2600      	movs	r6, #0
 8009c16:	4630      	mov	r0, r6
 8009c18:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009c1c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009cf0 <_malloc_r+0xfc>
 8009c20:	f000 f868 	bl	8009cf4 <__malloc_lock>
 8009c24:	f8d8 3000 	ldr.w	r3, [r8]
 8009c28:	461c      	mov	r4, r3
 8009c2a:	bb5c      	cbnz	r4, 8009c84 <_malloc_r+0x90>
 8009c2c:	4629      	mov	r1, r5
 8009c2e:	4638      	mov	r0, r7
 8009c30:	f7ff ffc0 	bl	8009bb4 <sbrk_aligned>
 8009c34:	1c43      	adds	r3, r0, #1
 8009c36:	4604      	mov	r4, r0
 8009c38:	d155      	bne.n	8009ce6 <_malloc_r+0xf2>
 8009c3a:	f8d8 4000 	ldr.w	r4, [r8]
 8009c3e:	4626      	mov	r6, r4
 8009c40:	2e00      	cmp	r6, #0
 8009c42:	d145      	bne.n	8009cd0 <_malloc_r+0xdc>
 8009c44:	2c00      	cmp	r4, #0
 8009c46:	d048      	beq.n	8009cda <_malloc_r+0xe6>
 8009c48:	6823      	ldr	r3, [r4, #0]
 8009c4a:	4631      	mov	r1, r6
 8009c4c:	4638      	mov	r0, r7
 8009c4e:	eb04 0903 	add.w	r9, r4, r3
 8009c52:	f000 fb5d 	bl	800a310 <_sbrk_r>
 8009c56:	4581      	cmp	r9, r0
 8009c58:	d13f      	bne.n	8009cda <_malloc_r+0xe6>
 8009c5a:	6821      	ldr	r1, [r4, #0]
 8009c5c:	1a6d      	subs	r5, r5, r1
 8009c5e:	4629      	mov	r1, r5
 8009c60:	4638      	mov	r0, r7
 8009c62:	f7ff ffa7 	bl	8009bb4 <sbrk_aligned>
 8009c66:	3001      	adds	r0, #1
 8009c68:	d037      	beq.n	8009cda <_malloc_r+0xe6>
 8009c6a:	6823      	ldr	r3, [r4, #0]
 8009c6c:	442b      	add	r3, r5
 8009c6e:	6023      	str	r3, [r4, #0]
 8009c70:	f8d8 3000 	ldr.w	r3, [r8]
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d038      	beq.n	8009cea <_malloc_r+0xf6>
 8009c78:	685a      	ldr	r2, [r3, #4]
 8009c7a:	42a2      	cmp	r2, r4
 8009c7c:	d12b      	bne.n	8009cd6 <_malloc_r+0xe2>
 8009c7e:	2200      	movs	r2, #0
 8009c80:	605a      	str	r2, [r3, #4]
 8009c82:	e00f      	b.n	8009ca4 <_malloc_r+0xb0>
 8009c84:	6822      	ldr	r2, [r4, #0]
 8009c86:	1b52      	subs	r2, r2, r5
 8009c88:	d41f      	bmi.n	8009cca <_malloc_r+0xd6>
 8009c8a:	2a0b      	cmp	r2, #11
 8009c8c:	d917      	bls.n	8009cbe <_malloc_r+0xca>
 8009c8e:	1961      	adds	r1, r4, r5
 8009c90:	42a3      	cmp	r3, r4
 8009c92:	6025      	str	r5, [r4, #0]
 8009c94:	bf18      	it	ne
 8009c96:	6059      	strne	r1, [r3, #4]
 8009c98:	6863      	ldr	r3, [r4, #4]
 8009c9a:	bf08      	it	eq
 8009c9c:	f8c8 1000 	streq.w	r1, [r8]
 8009ca0:	5162      	str	r2, [r4, r5]
 8009ca2:	604b      	str	r3, [r1, #4]
 8009ca4:	4638      	mov	r0, r7
 8009ca6:	f104 060b 	add.w	r6, r4, #11
 8009caa:	f000 f829 	bl	8009d00 <__malloc_unlock>
 8009cae:	f026 0607 	bic.w	r6, r6, #7
 8009cb2:	1d23      	adds	r3, r4, #4
 8009cb4:	1af2      	subs	r2, r6, r3
 8009cb6:	d0ae      	beq.n	8009c16 <_malloc_r+0x22>
 8009cb8:	1b9b      	subs	r3, r3, r6
 8009cba:	50a3      	str	r3, [r4, r2]
 8009cbc:	e7ab      	b.n	8009c16 <_malloc_r+0x22>
 8009cbe:	42a3      	cmp	r3, r4
 8009cc0:	6862      	ldr	r2, [r4, #4]
 8009cc2:	d1dd      	bne.n	8009c80 <_malloc_r+0x8c>
 8009cc4:	f8c8 2000 	str.w	r2, [r8]
 8009cc8:	e7ec      	b.n	8009ca4 <_malloc_r+0xb0>
 8009cca:	4623      	mov	r3, r4
 8009ccc:	6864      	ldr	r4, [r4, #4]
 8009cce:	e7ac      	b.n	8009c2a <_malloc_r+0x36>
 8009cd0:	4634      	mov	r4, r6
 8009cd2:	6876      	ldr	r6, [r6, #4]
 8009cd4:	e7b4      	b.n	8009c40 <_malloc_r+0x4c>
 8009cd6:	4613      	mov	r3, r2
 8009cd8:	e7cc      	b.n	8009c74 <_malloc_r+0x80>
 8009cda:	230c      	movs	r3, #12
 8009cdc:	603b      	str	r3, [r7, #0]
 8009cde:	4638      	mov	r0, r7
 8009ce0:	f000 f80e 	bl	8009d00 <__malloc_unlock>
 8009ce4:	e797      	b.n	8009c16 <_malloc_r+0x22>
 8009ce6:	6025      	str	r5, [r4, #0]
 8009ce8:	e7dc      	b.n	8009ca4 <_malloc_r+0xb0>
 8009cea:	605b      	str	r3, [r3, #4]
 8009cec:	deff      	udf	#255	; 0xff
 8009cee:	bf00      	nop
 8009cf0:	20002000 	.word	0x20002000

08009cf4 <__malloc_lock>:
 8009cf4:	4801      	ldr	r0, [pc, #4]	; (8009cfc <__malloc_lock+0x8>)
 8009cf6:	f7ff bf0f 	b.w	8009b18 <__retarget_lock_acquire_recursive>
 8009cfa:	bf00      	nop
 8009cfc:	20001ffc 	.word	0x20001ffc

08009d00 <__malloc_unlock>:
 8009d00:	4801      	ldr	r0, [pc, #4]	; (8009d08 <__malloc_unlock+0x8>)
 8009d02:	f7ff bf0a 	b.w	8009b1a <__retarget_lock_release_recursive>
 8009d06:	bf00      	nop
 8009d08:	20001ffc 	.word	0x20001ffc

08009d0c <__ssputs_r>:
 8009d0c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d10:	688e      	ldr	r6, [r1, #8]
 8009d12:	461f      	mov	r7, r3
 8009d14:	42be      	cmp	r6, r7
 8009d16:	680b      	ldr	r3, [r1, #0]
 8009d18:	4682      	mov	sl, r0
 8009d1a:	460c      	mov	r4, r1
 8009d1c:	4690      	mov	r8, r2
 8009d1e:	d82c      	bhi.n	8009d7a <__ssputs_r+0x6e>
 8009d20:	898a      	ldrh	r2, [r1, #12]
 8009d22:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009d26:	d026      	beq.n	8009d76 <__ssputs_r+0x6a>
 8009d28:	6965      	ldr	r5, [r4, #20]
 8009d2a:	6909      	ldr	r1, [r1, #16]
 8009d2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009d30:	eba3 0901 	sub.w	r9, r3, r1
 8009d34:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009d38:	1c7b      	adds	r3, r7, #1
 8009d3a:	444b      	add	r3, r9
 8009d3c:	106d      	asrs	r5, r5, #1
 8009d3e:	429d      	cmp	r5, r3
 8009d40:	bf38      	it	cc
 8009d42:	461d      	movcc	r5, r3
 8009d44:	0553      	lsls	r3, r2, #21
 8009d46:	d527      	bpl.n	8009d98 <__ssputs_r+0x8c>
 8009d48:	4629      	mov	r1, r5
 8009d4a:	f7ff ff53 	bl	8009bf4 <_malloc_r>
 8009d4e:	4606      	mov	r6, r0
 8009d50:	b360      	cbz	r0, 8009dac <__ssputs_r+0xa0>
 8009d52:	6921      	ldr	r1, [r4, #16]
 8009d54:	464a      	mov	r2, r9
 8009d56:	f000 faeb 	bl	800a330 <memcpy>
 8009d5a:	89a3      	ldrh	r3, [r4, #12]
 8009d5c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009d60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d64:	81a3      	strh	r3, [r4, #12]
 8009d66:	6126      	str	r6, [r4, #16]
 8009d68:	6165      	str	r5, [r4, #20]
 8009d6a:	444e      	add	r6, r9
 8009d6c:	eba5 0509 	sub.w	r5, r5, r9
 8009d70:	6026      	str	r6, [r4, #0]
 8009d72:	60a5      	str	r5, [r4, #8]
 8009d74:	463e      	mov	r6, r7
 8009d76:	42be      	cmp	r6, r7
 8009d78:	d900      	bls.n	8009d7c <__ssputs_r+0x70>
 8009d7a:	463e      	mov	r6, r7
 8009d7c:	6820      	ldr	r0, [r4, #0]
 8009d7e:	4632      	mov	r2, r6
 8009d80:	4641      	mov	r1, r8
 8009d82:	f000 faab 	bl	800a2dc <memmove>
 8009d86:	68a3      	ldr	r3, [r4, #8]
 8009d88:	1b9b      	subs	r3, r3, r6
 8009d8a:	60a3      	str	r3, [r4, #8]
 8009d8c:	6823      	ldr	r3, [r4, #0]
 8009d8e:	4433      	add	r3, r6
 8009d90:	6023      	str	r3, [r4, #0]
 8009d92:	2000      	movs	r0, #0
 8009d94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d98:	462a      	mov	r2, r5
 8009d9a:	f000 fad7 	bl	800a34c <_realloc_r>
 8009d9e:	4606      	mov	r6, r0
 8009da0:	2800      	cmp	r0, #0
 8009da2:	d1e0      	bne.n	8009d66 <__ssputs_r+0x5a>
 8009da4:	6921      	ldr	r1, [r4, #16]
 8009da6:	4650      	mov	r0, sl
 8009da8:	f7ff feb8 	bl	8009b1c <_free_r>
 8009dac:	230c      	movs	r3, #12
 8009dae:	f8ca 3000 	str.w	r3, [sl]
 8009db2:	89a3      	ldrh	r3, [r4, #12]
 8009db4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009db8:	81a3      	strh	r3, [r4, #12]
 8009dba:	f04f 30ff 	mov.w	r0, #4294967295
 8009dbe:	e7e9      	b.n	8009d94 <__ssputs_r+0x88>

08009dc0 <_svfiprintf_r>:
 8009dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009dc4:	4698      	mov	r8, r3
 8009dc6:	898b      	ldrh	r3, [r1, #12]
 8009dc8:	061b      	lsls	r3, r3, #24
 8009dca:	b09d      	sub	sp, #116	; 0x74
 8009dcc:	4607      	mov	r7, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	4614      	mov	r4, r2
 8009dd2:	d50e      	bpl.n	8009df2 <_svfiprintf_r+0x32>
 8009dd4:	690b      	ldr	r3, [r1, #16]
 8009dd6:	b963      	cbnz	r3, 8009df2 <_svfiprintf_r+0x32>
 8009dd8:	2140      	movs	r1, #64	; 0x40
 8009dda:	f7ff ff0b 	bl	8009bf4 <_malloc_r>
 8009dde:	6028      	str	r0, [r5, #0]
 8009de0:	6128      	str	r0, [r5, #16]
 8009de2:	b920      	cbnz	r0, 8009dee <_svfiprintf_r+0x2e>
 8009de4:	230c      	movs	r3, #12
 8009de6:	603b      	str	r3, [r7, #0]
 8009de8:	f04f 30ff 	mov.w	r0, #4294967295
 8009dec:	e0d0      	b.n	8009f90 <_svfiprintf_r+0x1d0>
 8009dee:	2340      	movs	r3, #64	; 0x40
 8009df0:	616b      	str	r3, [r5, #20]
 8009df2:	2300      	movs	r3, #0
 8009df4:	9309      	str	r3, [sp, #36]	; 0x24
 8009df6:	2320      	movs	r3, #32
 8009df8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009dfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8009e00:	2330      	movs	r3, #48	; 0x30
 8009e02:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8009fa8 <_svfiprintf_r+0x1e8>
 8009e06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009e0a:	f04f 0901 	mov.w	r9, #1
 8009e0e:	4623      	mov	r3, r4
 8009e10:	469a      	mov	sl, r3
 8009e12:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009e16:	b10a      	cbz	r2, 8009e1c <_svfiprintf_r+0x5c>
 8009e18:	2a25      	cmp	r2, #37	; 0x25
 8009e1a:	d1f9      	bne.n	8009e10 <_svfiprintf_r+0x50>
 8009e1c:	ebba 0b04 	subs.w	fp, sl, r4
 8009e20:	d00b      	beq.n	8009e3a <_svfiprintf_r+0x7a>
 8009e22:	465b      	mov	r3, fp
 8009e24:	4622      	mov	r2, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	4638      	mov	r0, r7
 8009e2a:	f7ff ff6f 	bl	8009d0c <__ssputs_r>
 8009e2e:	3001      	adds	r0, #1
 8009e30:	f000 80a9 	beq.w	8009f86 <_svfiprintf_r+0x1c6>
 8009e34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009e36:	445a      	add	r2, fp
 8009e38:	9209      	str	r2, [sp, #36]	; 0x24
 8009e3a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f000 80a1 	beq.w	8009f86 <_svfiprintf_r+0x1c6>
 8009e44:	2300      	movs	r3, #0
 8009e46:	f04f 32ff 	mov.w	r2, #4294967295
 8009e4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e4e:	f10a 0a01 	add.w	sl, sl, #1
 8009e52:	9304      	str	r3, [sp, #16]
 8009e54:	9307      	str	r3, [sp, #28]
 8009e56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009e5a:	931a      	str	r3, [sp, #104]	; 0x68
 8009e5c:	4654      	mov	r4, sl
 8009e5e:	2205      	movs	r2, #5
 8009e60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e64:	4850      	ldr	r0, [pc, #320]	; (8009fa8 <_svfiprintf_r+0x1e8>)
 8009e66:	f7f6 f9bb 	bl	80001e0 <memchr>
 8009e6a:	9a04      	ldr	r2, [sp, #16]
 8009e6c:	b9d8      	cbnz	r0, 8009ea6 <_svfiprintf_r+0xe6>
 8009e6e:	06d0      	lsls	r0, r2, #27
 8009e70:	bf44      	itt	mi
 8009e72:	2320      	movmi	r3, #32
 8009e74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e78:	0711      	lsls	r1, r2, #28
 8009e7a:	bf44      	itt	mi
 8009e7c:	232b      	movmi	r3, #43	; 0x2b
 8009e7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009e82:	f89a 3000 	ldrb.w	r3, [sl]
 8009e86:	2b2a      	cmp	r3, #42	; 0x2a
 8009e88:	d015      	beq.n	8009eb6 <_svfiprintf_r+0xf6>
 8009e8a:	9a07      	ldr	r2, [sp, #28]
 8009e8c:	4654      	mov	r4, sl
 8009e8e:	2000      	movs	r0, #0
 8009e90:	f04f 0c0a 	mov.w	ip, #10
 8009e94:	4621      	mov	r1, r4
 8009e96:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e9a:	3b30      	subs	r3, #48	; 0x30
 8009e9c:	2b09      	cmp	r3, #9
 8009e9e:	d94d      	bls.n	8009f3c <_svfiprintf_r+0x17c>
 8009ea0:	b1b0      	cbz	r0, 8009ed0 <_svfiprintf_r+0x110>
 8009ea2:	9207      	str	r2, [sp, #28]
 8009ea4:	e014      	b.n	8009ed0 <_svfiprintf_r+0x110>
 8009ea6:	eba0 0308 	sub.w	r3, r0, r8
 8009eaa:	fa09 f303 	lsl.w	r3, r9, r3
 8009eae:	4313      	orrs	r3, r2
 8009eb0:	9304      	str	r3, [sp, #16]
 8009eb2:	46a2      	mov	sl, r4
 8009eb4:	e7d2      	b.n	8009e5c <_svfiprintf_r+0x9c>
 8009eb6:	9b03      	ldr	r3, [sp, #12]
 8009eb8:	1d19      	adds	r1, r3, #4
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	9103      	str	r1, [sp, #12]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	bfbb      	ittet	lt
 8009ec2:	425b      	neglt	r3, r3
 8009ec4:	f042 0202 	orrlt.w	r2, r2, #2
 8009ec8:	9307      	strge	r3, [sp, #28]
 8009eca:	9307      	strlt	r3, [sp, #28]
 8009ecc:	bfb8      	it	lt
 8009ece:	9204      	strlt	r2, [sp, #16]
 8009ed0:	7823      	ldrb	r3, [r4, #0]
 8009ed2:	2b2e      	cmp	r3, #46	; 0x2e
 8009ed4:	d10c      	bne.n	8009ef0 <_svfiprintf_r+0x130>
 8009ed6:	7863      	ldrb	r3, [r4, #1]
 8009ed8:	2b2a      	cmp	r3, #42	; 0x2a
 8009eda:	d134      	bne.n	8009f46 <_svfiprintf_r+0x186>
 8009edc:	9b03      	ldr	r3, [sp, #12]
 8009ede:	1d1a      	adds	r2, r3, #4
 8009ee0:	681b      	ldr	r3, [r3, #0]
 8009ee2:	9203      	str	r2, [sp, #12]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	bfb8      	it	lt
 8009ee8:	f04f 33ff 	movlt.w	r3, #4294967295
 8009eec:	3402      	adds	r4, #2
 8009eee:	9305      	str	r3, [sp, #20]
 8009ef0:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8009fb8 <_svfiprintf_r+0x1f8>
 8009ef4:	7821      	ldrb	r1, [r4, #0]
 8009ef6:	2203      	movs	r2, #3
 8009ef8:	4650      	mov	r0, sl
 8009efa:	f7f6 f971 	bl	80001e0 <memchr>
 8009efe:	b138      	cbz	r0, 8009f10 <_svfiprintf_r+0x150>
 8009f00:	9b04      	ldr	r3, [sp, #16]
 8009f02:	eba0 000a 	sub.w	r0, r0, sl
 8009f06:	2240      	movs	r2, #64	; 0x40
 8009f08:	4082      	lsls	r2, r0
 8009f0a:	4313      	orrs	r3, r2
 8009f0c:	3401      	adds	r4, #1
 8009f0e:	9304      	str	r3, [sp, #16]
 8009f10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f14:	4825      	ldr	r0, [pc, #148]	; (8009fac <_svfiprintf_r+0x1ec>)
 8009f16:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009f1a:	2206      	movs	r2, #6
 8009f1c:	f7f6 f960 	bl	80001e0 <memchr>
 8009f20:	2800      	cmp	r0, #0
 8009f22:	d038      	beq.n	8009f96 <_svfiprintf_r+0x1d6>
 8009f24:	4b22      	ldr	r3, [pc, #136]	; (8009fb0 <_svfiprintf_r+0x1f0>)
 8009f26:	bb1b      	cbnz	r3, 8009f70 <_svfiprintf_r+0x1b0>
 8009f28:	9b03      	ldr	r3, [sp, #12]
 8009f2a:	3307      	adds	r3, #7
 8009f2c:	f023 0307 	bic.w	r3, r3, #7
 8009f30:	3308      	adds	r3, #8
 8009f32:	9303      	str	r3, [sp, #12]
 8009f34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009f36:	4433      	add	r3, r6
 8009f38:	9309      	str	r3, [sp, #36]	; 0x24
 8009f3a:	e768      	b.n	8009e0e <_svfiprintf_r+0x4e>
 8009f3c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f40:	460c      	mov	r4, r1
 8009f42:	2001      	movs	r0, #1
 8009f44:	e7a6      	b.n	8009e94 <_svfiprintf_r+0xd4>
 8009f46:	2300      	movs	r3, #0
 8009f48:	3401      	adds	r4, #1
 8009f4a:	9305      	str	r3, [sp, #20]
 8009f4c:	4619      	mov	r1, r3
 8009f4e:	f04f 0c0a 	mov.w	ip, #10
 8009f52:	4620      	mov	r0, r4
 8009f54:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f58:	3a30      	subs	r2, #48	; 0x30
 8009f5a:	2a09      	cmp	r2, #9
 8009f5c:	d903      	bls.n	8009f66 <_svfiprintf_r+0x1a6>
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d0c6      	beq.n	8009ef0 <_svfiprintf_r+0x130>
 8009f62:	9105      	str	r1, [sp, #20]
 8009f64:	e7c4      	b.n	8009ef0 <_svfiprintf_r+0x130>
 8009f66:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f6a:	4604      	mov	r4, r0
 8009f6c:	2301      	movs	r3, #1
 8009f6e:	e7f0      	b.n	8009f52 <_svfiprintf_r+0x192>
 8009f70:	ab03      	add	r3, sp, #12
 8009f72:	9300      	str	r3, [sp, #0]
 8009f74:	462a      	mov	r2, r5
 8009f76:	4b0f      	ldr	r3, [pc, #60]	; (8009fb4 <_svfiprintf_r+0x1f4>)
 8009f78:	a904      	add	r1, sp, #16
 8009f7a:	4638      	mov	r0, r7
 8009f7c:	f3af 8000 	nop.w
 8009f80:	1c42      	adds	r2, r0, #1
 8009f82:	4606      	mov	r6, r0
 8009f84:	d1d6      	bne.n	8009f34 <_svfiprintf_r+0x174>
 8009f86:	89ab      	ldrh	r3, [r5, #12]
 8009f88:	065b      	lsls	r3, r3, #25
 8009f8a:	f53f af2d 	bmi.w	8009de8 <_svfiprintf_r+0x28>
 8009f8e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009f90:	b01d      	add	sp, #116	; 0x74
 8009f92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009f96:	ab03      	add	r3, sp, #12
 8009f98:	9300      	str	r3, [sp, #0]
 8009f9a:	462a      	mov	r2, r5
 8009f9c:	4b05      	ldr	r3, [pc, #20]	; (8009fb4 <_svfiprintf_r+0x1f4>)
 8009f9e:	a904      	add	r1, sp, #16
 8009fa0:	4638      	mov	r0, r7
 8009fa2:	f000 f879 	bl	800a098 <_printf_i>
 8009fa6:	e7eb      	b.n	8009f80 <_svfiprintf_r+0x1c0>
 8009fa8:	0800a448 	.word	0x0800a448
 8009fac:	0800a452 	.word	0x0800a452
 8009fb0:	00000000 	.word	0x00000000
 8009fb4:	08009d0d 	.word	0x08009d0d
 8009fb8:	0800a44e 	.word	0x0800a44e

08009fbc <_printf_common>:
 8009fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fc0:	4616      	mov	r6, r2
 8009fc2:	4699      	mov	r9, r3
 8009fc4:	688a      	ldr	r2, [r1, #8]
 8009fc6:	690b      	ldr	r3, [r1, #16]
 8009fc8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009fcc:	4293      	cmp	r3, r2
 8009fce:	bfb8      	it	lt
 8009fd0:	4613      	movlt	r3, r2
 8009fd2:	6033      	str	r3, [r6, #0]
 8009fd4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009fd8:	4607      	mov	r7, r0
 8009fda:	460c      	mov	r4, r1
 8009fdc:	b10a      	cbz	r2, 8009fe2 <_printf_common+0x26>
 8009fde:	3301      	adds	r3, #1
 8009fe0:	6033      	str	r3, [r6, #0]
 8009fe2:	6823      	ldr	r3, [r4, #0]
 8009fe4:	0699      	lsls	r1, r3, #26
 8009fe6:	bf42      	ittt	mi
 8009fe8:	6833      	ldrmi	r3, [r6, #0]
 8009fea:	3302      	addmi	r3, #2
 8009fec:	6033      	strmi	r3, [r6, #0]
 8009fee:	6825      	ldr	r5, [r4, #0]
 8009ff0:	f015 0506 	ands.w	r5, r5, #6
 8009ff4:	d106      	bne.n	800a004 <_printf_common+0x48>
 8009ff6:	f104 0a19 	add.w	sl, r4, #25
 8009ffa:	68e3      	ldr	r3, [r4, #12]
 8009ffc:	6832      	ldr	r2, [r6, #0]
 8009ffe:	1a9b      	subs	r3, r3, r2
 800a000:	42ab      	cmp	r3, r5
 800a002:	dc26      	bgt.n	800a052 <_printf_common+0x96>
 800a004:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a008:	1e13      	subs	r3, r2, #0
 800a00a:	6822      	ldr	r2, [r4, #0]
 800a00c:	bf18      	it	ne
 800a00e:	2301      	movne	r3, #1
 800a010:	0692      	lsls	r2, r2, #26
 800a012:	d42b      	bmi.n	800a06c <_printf_common+0xb0>
 800a014:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a018:	4649      	mov	r1, r9
 800a01a:	4638      	mov	r0, r7
 800a01c:	47c0      	blx	r8
 800a01e:	3001      	adds	r0, #1
 800a020:	d01e      	beq.n	800a060 <_printf_common+0xa4>
 800a022:	6823      	ldr	r3, [r4, #0]
 800a024:	6922      	ldr	r2, [r4, #16]
 800a026:	f003 0306 	and.w	r3, r3, #6
 800a02a:	2b04      	cmp	r3, #4
 800a02c:	bf02      	ittt	eq
 800a02e:	68e5      	ldreq	r5, [r4, #12]
 800a030:	6833      	ldreq	r3, [r6, #0]
 800a032:	1aed      	subeq	r5, r5, r3
 800a034:	68a3      	ldr	r3, [r4, #8]
 800a036:	bf0c      	ite	eq
 800a038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a03c:	2500      	movne	r5, #0
 800a03e:	4293      	cmp	r3, r2
 800a040:	bfc4      	itt	gt
 800a042:	1a9b      	subgt	r3, r3, r2
 800a044:	18ed      	addgt	r5, r5, r3
 800a046:	2600      	movs	r6, #0
 800a048:	341a      	adds	r4, #26
 800a04a:	42b5      	cmp	r5, r6
 800a04c:	d11a      	bne.n	800a084 <_printf_common+0xc8>
 800a04e:	2000      	movs	r0, #0
 800a050:	e008      	b.n	800a064 <_printf_common+0xa8>
 800a052:	2301      	movs	r3, #1
 800a054:	4652      	mov	r2, sl
 800a056:	4649      	mov	r1, r9
 800a058:	4638      	mov	r0, r7
 800a05a:	47c0      	blx	r8
 800a05c:	3001      	adds	r0, #1
 800a05e:	d103      	bne.n	800a068 <_printf_common+0xac>
 800a060:	f04f 30ff 	mov.w	r0, #4294967295
 800a064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a068:	3501      	adds	r5, #1
 800a06a:	e7c6      	b.n	8009ffa <_printf_common+0x3e>
 800a06c:	18e1      	adds	r1, r4, r3
 800a06e:	1c5a      	adds	r2, r3, #1
 800a070:	2030      	movs	r0, #48	; 0x30
 800a072:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a076:	4422      	add	r2, r4
 800a078:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a07c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a080:	3302      	adds	r3, #2
 800a082:	e7c7      	b.n	800a014 <_printf_common+0x58>
 800a084:	2301      	movs	r3, #1
 800a086:	4622      	mov	r2, r4
 800a088:	4649      	mov	r1, r9
 800a08a:	4638      	mov	r0, r7
 800a08c:	47c0      	blx	r8
 800a08e:	3001      	adds	r0, #1
 800a090:	d0e6      	beq.n	800a060 <_printf_common+0xa4>
 800a092:	3601      	adds	r6, #1
 800a094:	e7d9      	b.n	800a04a <_printf_common+0x8e>
	...

0800a098 <_printf_i>:
 800a098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a09c:	7e0f      	ldrb	r7, [r1, #24]
 800a09e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a0a0:	2f78      	cmp	r7, #120	; 0x78
 800a0a2:	4691      	mov	r9, r2
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	469a      	mov	sl, r3
 800a0aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a0ae:	d807      	bhi.n	800a0c0 <_printf_i+0x28>
 800a0b0:	2f62      	cmp	r7, #98	; 0x62
 800a0b2:	d80a      	bhi.n	800a0ca <_printf_i+0x32>
 800a0b4:	2f00      	cmp	r7, #0
 800a0b6:	f000 80d4 	beq.w	800a262 <_printf_i+0x1ca>
 800a0ba:	2f58      	cmp	r7, #88	; 0x58
 800a0bc:	f000 80c0 	beq.w	800a240 <_printf_i+0x1a8>
 800a0c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a0c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a0c8:	e03a      	b.n	800a140 <_printf_i+0xa8>
 800a0ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a0ce:	2b15      	cmp	r3, #21
 800a0d0:	d8f6      	bhi.n	800a0c0 <_printf_i+0x28>
 800a0d2:	a101      	add	r1, pc, #4	; (adr r1, 800a0d8 <_printf_i+0x40>)
 800a0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a0d8:	0800a131 	.word	0x0800a131
 800a0dc:	0800a145 	.word	0x0800a145
 800a0e0:	0800a0c1 	.word	0x0800a0c1
 800a0e4:	0800a0c1 	.word	0x0800a0c1
 800a0e8:	0800a0c1 	.word	0x0800a0c1
 800a0ec:	0800a0c1 	.word	0x0800a0c1
 800a0f0:	0800a145 	.word	0x0800a145
 800a0f4:	0800a0c1 	.word	0x0800a0c1
 800a0f8:	0800a0c1 	.word	0x0800a0c1
 800a0fc:	0800a0c1 	.word	0x0800a0c1
 800a100:	0800a0c1 	.word	0x0800a0c1
 800a104:	0800a249 	.word	0x0800a249
 800a108:	0800a171 	.word	0x0800a171
 800a10c:	0800a203 	.word	0x0800a203
 800a110:	0800a0c1 	.word	0x0800a0c1
 800a114:	0800a0c1 	.word	0x0800a0c1
 800a118:	0800a26b 	.word	0x0800a26b
 800a11c:	0800a0c1 	.word	0x0800a0c1
 800a120:	0800a171 	.word	0x0800a171
 800a124:	0800a0c1 	.word	0x0800a0c1
 800a128:	0800a0c1 	.word	0x0800a0c1
 800a12c:	0800a20b 	.word	0x0800a20b
 800a130:	682b      	ldr	r3, [r5, #0]
 800a132:	1d1a      	adds	r2, r3, #4
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	602a      	str	r2, [r5, #0]
 800a138:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a13c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a140:	2301      	movs	r3, #1
 800a142:	e09f      	b.n	800a284 <_printf_i+0x1ec>
 800a144:	6820      	ldr	r0, [r4, #0]
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	0607      	lsls	r7, r0, #24
 800a14a:	f103 0104 	add.w	r1, r3, #4
 800a14e:	6029      	str	r1, [r5, #0]
 800a150:	d501      	bpl.n	800a156 <_printf_i+0xbe>
 800a152:	681e      	ldr	r6, [r3, #0]
 800a154:	e003      	b.n	800a15e <_printf_i+0xc6>
 800a156:	0646      	lsls	r6, r0, #25
 800a158:	d5fb      	bpl.n	800a152 <_printf_i+0xba>
 800a15a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a15e:	2e00      	cmp	r6, #0
 800a160:	da03      	bge.n	800a16a <_printf_i+0xd2>
 800a162:	232d      	movs	r3, #45	; 0x2d
 800a164:	4276      	negs	r6, r6
 800a166:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a16a:	485a      	ldr	r0, [pc, #360]	; (800a2d4 <_printf_i+0x23c>)
 800a16c:	230a      	movs	r3, #10
 800a16e:	e012      	b.n	800a196 <_printf_i+0xfe>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	6820      	ldr	r0, [r4, #0]
 800a174:	1d19      	adds	r1, r3, #4
 800a176:	6029      	str	r1, [r5, #0]
 800a178:	0605      	lsls	r5, r0, #24
 800a17a:	d501      	bpl.n	800a180 <_printf_i+0xe8>
 800a17c:	681e      	ldr	r6, [r3, #0]
 800a17e:	e002      	b.n	800a186 <_printf_i+0xee>
 800a180:	0641      	lsls	r1, r0, #25
 800a182:	d5fb      	bpl.n	800a17c <_printf_i+0xe4>
 800a184:	881e      	ldrh	r6, [r3, #0]
 800a186:	4853      	ldr	r0, [pc, #332]	; (800a2d4 <_printf_i+0x23c>)
 800a188:	2f6f      	cmp	r7, #111	; 0x6f
 800a18a:	bf0c      	ite	eq
 800a18c:	2308      	moveq	r3, #8
 800a18e:	230a      	movne	r3, #10
 800a190:	2100      	movs	r1, #0
 800a192:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a196:	6865      	ldr	r5, [r4, #4]
 800a198:	60a5      	str	r5, [r4, #8]
 800a19a:	2d00      	cmp	r5, #0
 800a19c:	bfa2      	ittt	ge
 800a19e:	6821      	ldrge	r1, [r4, #0]
 800a1a0:	f021 0104 	bicge.w	r1, r1, #4
 800a1a4:	6021      	strge	r1, [r4, #0]
 800a1a6:	b90e      	cbnz	r6, 800a1ac <_printf_i+0x114>
 800a1a8:	2d00      	cmp	r5, #0
 800a1aa:	d04b      	beq.n	800a244 <_printf_i+0x1ac>
 800a1ac:	4615      	mov	r5, r2
 800a1ae:	fbb6 f1f3 	udiv	r1, r6, r3
 800a1b2:	fb03 6711 	mls	r7, r3, r1, r6
 800a1b6:	5dc7      	ldrb	r7, [r0, r7]
 800a1b8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a1bc:	4637      	mov	r7, r6
 800a1be:	42bb      	cmp	r3, r7
 800a1c0:	460e      	mov	r6, r1
 800a1c2:	d9f4      	bls.n	800a1ae <_printf_i+0x116>
 800a1c4:	2b08      	cmp	r3, #8
 800a1c6:	d10b      	bne.n	800a1e0 <_printf_i+0x148>
 800a1c8:	6823      	ldr	r3, [r4, #0]
 800a1ca:	07de      	lsls	r6, r3, #31
 800a1cc:	d508      	bpl.n	800a1e0 <_printf_i+0x148>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	6861      	ldr	r1, [r4, #4]
 800a1d2:	4299      	cmp	r1, r3
 800a1d4:	bfde      	ittt	le
 800a1d6:	2330      	movle	r3, #48	; 0x30
 800a1d8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a1dc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a1e0:	1b52      	subs	r2, r2, r5
 800a1e2:	6122      	str	r2, [r4, #16]
 800a1e4:	f8cd a000 	str.w	sl, [sp]
 800a1e8:	464b      	mov	r3, r9
 800a1ea:	aa03      	add	r2, sp, #12
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	4640      	mov	r0, r8
 800a1f0:	f7ff fee4 	bl	8009fbc <_printf_common>
 800a1f4:	3001      	adds	r0, #1
 800a1f6:	d14a      	bne.n	800a28e <_printf_i+0x1f6>
 800a1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800a1fc:	b004      	add	sp, #16
 800a1fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a202:	6823      	ldr	r3, [r4, #0]
 800a204:	f043 0320 	orr.w	r3, r3, #32
 800a208:	6023      	str	r3, [r4, #0]
 800a20a:	4833      	ldr	r0, [pc, #204]	; (800a2d8 <_printf_i+0x240>)
 800a20c:	2778      	movs	r7, #120	; 0x78
 800a20e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	6829      	ldr	r1, [r5, #0]
 800a216:	061f      	lsls	r7, r3, #24
 800a218:	f851 6b04 	ldr.w	r6, [r1], #4
 800a21c:	d402      	bmi.n	800a224 <_printf_i+0x18c>
 800a21e:	065f      	lsls	r7, r3, #25
 800a220:	bf48      	it	mi
 800a222:	b2b6      	uxthmi	r6, r6
 800a224:	07df      	lsls	r7, r3, #31
 800a226:	bf48      	it	mi
 800a228:	f043 0320 	orrmi.w	r3, r3, #32
 800a22c:	6029      	str	r1, [r5, #0]
 800a22e:	bf48      	it	mi
 800a230:	6023      	strmi	r3, [r4, #0]
 800a232:	b91e      	cbnz	r6, 800a23c <_printf_i+0x1a4>
 800a234:	6823      	ldr	r3, [r4, #0]
 800a236:	f023 0320 	bic.w	r3, r3, #32
 800a23a:	6023      	str	r3, [r4, #0]
 800a23c:	2310      	movs	r3, #16
 800a23e:	e7a7      	b.n	800a190 <_printf_i+0xf8>
 800a240:	4824      	ldr	r0, [pc, #144]	; (800a2d4 <_printf_i+0x23c>)
 800a242:	e7e4      	b.n	800a20e <_printf_i+0x176>
 800a244:	4615      	mov	r5, r2
 800a246:	e7bd      	b.n	800a1c4 <_printf_i+0x12c>
 800a248:	682b      	ldr	r3, [r5, #0]
 800a24a:	6826      	ldr	r6, [r4, #0]
 800a24c:	6961      	ldr	r1, [r4, #20]
 800a24e:	1d18      	adds	r0, r3, #4
 800a250:	6028      	str	r0, [r5, #0]
 800a252:	0635      	lsls	r5, r6, #24
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	d501      	bpl.n	800a25c <_printf_i+0x1c4>
 800a258:	6019      	str	r1, [r3, #0]
 800a25a:	e002      	b.n	800a262 <_printf_i+0x1ca>
 800a25c:	0670      	lsls	r0, r6, #25
 800a25e:	d5fb      	bpl.n	800a258 <_printf_i+0x1c0>
 800a260:	8019      	strh	r1, [r3, #0]
 800a262:	2300      	movs	r3, #0
 800a264:	6123      	str	r3, [r4, #16]
 800a266:	4615      	mov	r5, r2
 800a268:	e7bc      	b.n	800a1e4 <_printf_i+0x14c>
 800a26a:	682b      	ldr	r3, [r5, #0]
 800a26c:	1d1a      	adds	r2, r3, #4
 800a26e:	602a      	str	r2, [r5, #0]
 800a270:	681d      	ldr	r5, [r3, #0]
 800a272:	6862      	ldr	r2, [r4, #4]
 800a274:	2100      	movs	r1, #0
 800a276:	4628      	mov	r0, r5
 800a278:	f7f5 ffb2 	bl	80001e0 <memchr>
 800a27c:	b108      	cbz	r0, 800a282 <_printf_i+0x1ea>
 800a27e:	1b40      	subs	r0, r0, r5
 800a280:	6060      	str	r0, [r4, #4]
 800a282:	6863      	ldr	r3, [r4, #4]
 800a284:	6123      	str	r3, [r4, #16]
 800a286:	2300      	movs	r3, #0
 800a288:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a28c:	e7aa      	b.n	800a1e4 <_printf_i+0x14c>
 800a28e:	6923      	ldr	r3, [r4, #16]
 800a290:	462a      	mov	r2, r5
 800a292:	4649      	mov	r1, r9
 800a294:	4640      	mov	r0, r8
 800a296:	47d0      	blx	sl
 800a298:	3001      	adds	r0, #1
 800a29a:	d0ad      	beq.n	800a1f8 <_printf_i+0x160>
 800a29c:	6823      	ldr	r3, [r4, #0]
 800a29e:	079b      	lsls	r3, r3, #30
 800a2a0:	d413      	bmi.n	800a2ca <_printf_i+0x232>
 800a2a2:	68e0      	ldr	r0, [r4, #12]
 800a2a4:	9b03      	ldr	r3, [sp, #12]
 800a2a6:	4298      	cmp	r0, r3
 800a2a8:	bfb8      	it	lt
 800a2aa:	4618      	movlt	r0, r3
 800a2ac:	e7a6      	b.n	800a1fc <_printf_i+0x164>
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4649      	mov	r1, r9
 800a2b4:	4640      	mov	r0, r8
 800a2b6:	47d0      	blx	sl
 800a2b8:	3001      	adds	r0, #1
 800a2ba:	d09d      	beq.n	800a1f8 <_printf_i+0x160>
 800a2bc:	3501      	adds	r5, #1
 800a2be:	68e3      	ldr	r3, [r4, #12]
 800a2c0:	9903      	ldr	r1, [sp, #12]
 800a2c2:	1a5b      	subs	r3, r3, r1
 800a2c4:	42ab      	cmp	r3, r5
 800a2c6:	dcf2      	bgt.n	800a2ae <_printf_i+0x216>
 800a2c8:	e7eb      	b.n	800a2a2 <_printf_i+0x20a>
 800a2ca:	2500      	movs	r5, #0
 800a2cc:	f104 0619 	add.w	r6, r4, #25
 800a2d0:	e7f5      	b.n	800a2be <_printf_i+0x226>
 800a2d2:	bf00      	nop
 800a2d4:	0800a459 	.word	0x0800a459
 800a2d8:	0800a46a 	.word	0x0800a46a

0800a2dc <memmove>:
 800a2dc:	4288      	cmp	r0, r1
 800a2de:	b510      	push	{r4, lr}
 800a2e0:	eb01 0402 	add.w	r4, r1, r2
 800a2e4:	d902      	bls.n	800a2ec <memmove+0x10>
 800a2e6:	4284      	cmp	r4, r0
 800a2e8:	4623      	mov	r3, r4
 800a2ea:	d807      	bhi.n	800a2fc <memmove+0x20>
 800a2ec:	1e43      	subs	r3, r0, #1
 800a2ee:	42a1      	cmp	r1, r4
 800a2f0:	d008      	beq.n	800a304 <memmove+0x28>
 800a2f2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2f6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2fa:	e7f8      	b.n	800a2ee <memmove+0x12>
 800a2fc:	4402      	add	r2, r0
 800a2fe:	4601      	mov	r1, r0
 800a300:	428a      	cmp	r2, r1
 800a302:	d100      	bne.n	800a306 <memmove+0x2a>
 800a304:	bd10      	pop	{r4, pc}
 800a306:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a30a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a30e:	e7f7      	b.n	800a300 <memmove+0x24>

0800a310 <_sbrk_r>:
 800a310:	b538      	push	{r3, r4, r5, lr}
 800a312:	4d06      	ldr	r5, [pc, #24]	; (800a32c <_sbrk_r+0x1c>)
 800a314:	2300      	movs	r3, #0
 800a316:	4604      	mov	r4, r0
 800a318:	4608      	mov	r0, r1
 800a31a:	602b      	str	r3, [r5, #0]
 800a31c:	f7f6 ffda 	bl	80012d4 <_sbrk>
 800a320:	1c43      	adds	r3, r0, #1
 800a322:	d102      	bne.n	800a32a <_sbrk_r+0x1a>
 800a324:	682b      	ldr	r3, [r5, #0]
 800a326:	b103      	cbz	r3, 800a32a <_sbrk_r+0x1a>
 800a328:	6023      	str	r3, [r4, #0]
 800a32a:	bd38      	pop	{r3, r4, r5, pc}
 800a32c:	20001ff8 	.word	0x20001ff8

0800a330 <memcpy>:
 800a330:	440a      	add	r2, r1
 800a332:	4291      	cmp	r1, r2
 800a334:	f100 33ff 	add.w	r3, r0, #4294967295
 800a338:	d100      	bne.n	800a33c <memcpy+0xc>
 800a33a:	4770      	bx	lr
 800a33c:	b510      	push	{r4, lr}
 800a33e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a342:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a346:	4291      	cmp	r1, r2
 800a348:	d1f9      	bne.n	800a33e <memcpy+0xe>
 800a34a:	bd10      	pop	{r4, pc}

0800a34c <_realloc_r>:
 800a34c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a350:	4680      	mov	r8, r0
 800a352:	4614      	mov	r4, r2
 800a354:	460e      	mov	r6, r1
 800a356:	b921      	cbnz	r1, 800a362 <_realloc_r+0x16>
 800a358:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35c:	4611      	mov	r1, r2
 800a35e:	f7ff bc49 	b.w	8009bf4 <_malloc_r>
 800a362:	b92a      	cbnz	r2, 800a370 <_realloc_r+0x24>
 800a364:	f7ff fbda 	bl	8009b1c <_free_r>
 800a368:	4625      	mov	r5, r4
 800a36a:	4628      	mov	r0, r5
 800a36c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a370:	f000 f81b 	bl	800a3aa <_malloc_usable_size_r>
 800a374:	4284      	cmp	r4, r0
 800a376:	4607      	mov	r7, r0
 800a378:	d802      	bhi.n	800a380 <_realloc_r+0x34>
 800a37a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a37e:	d812      	bhi.n	800a3a6 <_realloc_r+0x5a>
 800a380:	4621      	mov	r1, r4
 800a382:	4640      	mov	r0, r8
 800a384:	f7ff fc36 	bl	8009bf4 <_malloc_r>
 800a388:	4605      	mov	r5, r0
 800a38a:	2800      	cmp	r0, #0
 800a38c:	d0ed      	beq.n	800a36a <_realloc_r+0x1e>
 800a38e:	42bc      	cmp	r4, r7
 800a390:	4622      	mov	r2, r4
 800a392:	4631      	mov	r1, r6
 800a394:	bf28      	it	cs
 800a396:	463a      	movcs	r2, r7
 800a398:	f7ff ffca 	bl	800a330 <memcpy>
 800a39c:	4631      	mov	r1, r6
 800a39e:	4640      	mov	r0, r8
 800a3a0:	f7ff fbbc 	bl	8009b1c <_free_r>
 800a3a4:	e7e1      	b.n	800a36a <_realloc_r+0x1e>
 800a3a6:	4635      	mov	r5, r6
 800a3a8:	e7df      	b.n	800a36a <_realloc_r+0x1e>

0800a3aa <_malloc_usable_size_r>:
 800a3aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3ae:	1f18      	subs	r0, r3, #4
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	bfbc      	itt	lt
 800a3b4:	580b      	ldrlt	r3, [r1, r0]
 800a3b6:	18c0      	addlt	r0, r0, r3
 800a3b8:	4770      	bx	lr
	...

0800a3bc <_init>:
 800a3bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3be:	bf00      	nop
 800a3c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3c2:	bc08      	pop	{r3}
 800a3c4:	469e      	mov	lr, r3
 800a3c6:	4770      	bx	lr

0800a3c8 <_fini>:
 800a3c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3ca:	bf00      	nop
 800a3cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ce:	bc08      	pop	{r3}
 800a3d0:	469e      	mov	lr, r3
 800a3d2:	4770      	bx	lr
